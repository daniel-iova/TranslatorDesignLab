/* The following code was generated by JFlex 1.3.5 on 11/1/22, 9:55 PM */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 11/1/22, 9:55 PM from the specification file
 * <tt>file:/C:/Users/alex_/eclipse-workspace/TranslatorDesignLab/TranslatorDesignLab/TDLab/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\22\1\0\1\15"+
    "\7\0\1\0\2\0\1\5\1\32\1\56\12\14\1\7\1\0\1\4"+
    "\1\31\1\6\1\16\1\0\1\51\1\45\1\42\1\34\1\5\1\35"+
    "\1\5\1\52\1\62\2\5\1\44\1\54\1\5\1\60\1\61\1\5"+
    "\1\33\1\47\1\53\12\5\1\13\1\5\1\43\1\57\1\36\1\11"+
    "\1\24\1\12\1\46\1\5\1\26\1\63\1\5\1\21\1\20\1\30"+
    "\1\27\1\37\1\50\1\10\1\25\1\40\1\41\1\23\1\5\1\17"+
    "\1\55\1\5\uff85\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    52,   104,   156,   208,   104,   260,   312,   104,   364, 
      416,   104,   468,   208,   520,   572,   624,   676,   728,   416, 
      416,   104,   780,   832,   884,   676,   936,   988,  1040,  1092, 
     1144,  1196,  1248,  1300,  1352,  1404,  1456,  1508,  1560,  1612, 
     1664,  1716,  1768,  1820,  1872,  1924,  1196,  1976,  2028,  2080, 
     2132,  2184,  2236,  2288,  2340,  2392,  2444,  2496,  2548,  2600, 
     2652,  2704,  2756,  2808,  2860,  2912,  2964,  3016,  3068,  3120, 
      676,  3172,  3224,  3276,  3328,  3380,  3432,   104,  3484,  3536, 
     3588,  3640,  3692,  3744,  3796,  3848,  3900,  3952,  4004,  4056, 
     4108,  4160,  4212,  4264,  4316,  4368,  4420,  4472,  4524,  4576, 
     4628,  4680,  4732,  4784,  4836,  4888,  4940,  4992,  5044,  5096, 
     5148,  5200,  5252,  5304,  5356,  5408,  5460,  5512,  5564,  5616, 
      104,  5668,  5720,  5772,   104,   104,  5824,   104,  5876,  5928, 
     5980,  6032,  6084,  6136,  6188,  6240,  6292,  6344,  6396,  6448, 
     6500,  6552,  6604,  6656,  6708,  6760,  6812,  6864,  6916,  6968, 
     7020,  7072,  7124,  7176,  7228,  7280,  7332,  7384,  7436,  7488, 
     7540,  7592,  7644,  7696,  7748,  7800,  7852,  7904,   104,   104, 
     7956,   104,  8008,  8060,  8112,  8164,  8216,  8268,   104,  8320, 
     8372,  8424,  8476,  8528,  8580,  8632,  8684,  8736,  8788,  8840, 
     8892,  8944,  8996,  9048,  9100,  9152,   676,  9204,  9256,  9308, 
     9360,  9412,   676,  9464,  9516,  9568,  9620,  9672,  9724,  9776, 
     9828,  9880,  9932,  9984, 10036, 10088, 10140, 10192, 10244, 10296, 
    10348,   104, 10400, 10452, 10504,   104,   104, 10556,   104, 10608, 
    10660, 10712, 10764, 10816, 10868, 10920, 10972, 11024,   676,   676, 
    11076, 11128,   676, 11180,   676, 11232, 11284, 11336, 11388, 11440, 
    11492, 11544, 11596, 11648, 11700,   104, 11752, 11804, 11856, 11908, 
    11960,   104,   104, 12012,   104, 12064, 12116, 12168, 12220, 12272, 
    12324, 12376,   676, 12428, 12480,   676, 12532, 12584, 12636, 12688, 
    12740, 12792, 12844, 12896, 12948, 13000, 13052, 13104, 13156, 13208, 
    13260, 13312, 13364, 13416, 13468, 13520, 13572,   676,   676, 13624, 
    13676,   676, 13728, 13780, 13832,   676, 13884, 13936, 13988, 14040, 
    14092, 14144,   104, 14196, 14248, 14300, 14352, 14404, 14456,   104, 
    14508, 14560,   676,   676, 14612, 14664, 14716, 14768, 14820,   104, 
      104,   104, 14872, 14924, 14976, 15028, 15080, 15132, 15184, 15236, 
    15288, 15340, 15392, 15444,   104, 15496,   104, 15548, 15600, 15652, 
    15704, 15756, 15808, 15860,   104,   676, 15912, 15964,   104, 16016, 
    16068, 16120,   104,   104,   104, 16172, 16224,   676, 16276,   104, 
    16328,   104, 16380, 16432,   104,   676, 16484, 16536,   104
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\3"+
    "\1\12\4\10\1\13\1\3\3\10\1\6\6\10\1\14"+
    "\1\3\23\10\1\15\5\10\64\16\2\3\1\0\63\3"+
    "\1\5\61\3\64\0\2\3\1\0\5\3\1\17\5\3"+
    "\1\20\37\3\1\21\7\3\1\0\2\3\1\10\1\3"+
    "\1\22\5\10\2\3\3\10\1\3\6\10\2\3\23\10"+
    "\1\3\5\10\2\3\1\0\2\3\1\10\1\3\1\22"+
    "\1\10\1\23\3\10\2\3\3\10\1\3\6\10\2\3"+
    "\23\10\1\3\5\10\2\24\1\0\12\24\1\25\46\24"+
    "\2\3\1\0\3\3\1\26\57\3\1\0\6\3\1\27"+
    "\54\3\1\0\14\3\1\30\46\3\1\0\5\3\1\31"+
    "\55\3\1\0\2\3\1\32\2\3\5\32\2\3\3\32"+
    "\1\3\6\32\2\3\23\32\1\3\5\32\2\3\1\0"+
    "\2\3\1\10\1\3\1\22\2\10\1\33\2\10\2\3"+
    "\3\10\1\3\6\10\2\3\23\10\1\3\5\10\2\3"+
    "\1\0\7\3\1\34\53\3\1\0\15\3\1\35\45\3"+
    "\1\0\6\3\1\36\54\3\1\0\2\3\1\10\1\3"+
    "\1\37\3\10\1\40\1\10\2\3\3\10\1\3\2\10"+
    "\1\41\3\10\2\3\23\10\1\3\5\10\2\3\1\0"+
    "\4\3\1\42\15\3\1\43\40\3\1\0\16\3\1\44"+
    "\44\3\1\0\7\3\1\45\53\3\1\0\2\3\1\32"+
    "\2\3\1\46\1\47\3\32\2\3\3\32\1\3\1\50"+
    "\1\32\1\51\1\32\1\52\1\53\2\3\4\32\1\54"+
    "\3\32\1\55\12\32\1\3\3\32\1\56\1\32\2\3"+
    "\1\0\2\3\1\10\1\3\1\22\4\10\1\57\2\3"+
    "\3\10\1\3\6\10\2\3\23\10\1\3\5\10\2\3"+
    "\1\0\2\3\1\10\1\3\1\60\5\10\2\3\3\10"+
    "\1\3\6\10\2\3\23\10\1\3\5\10\2\3\1\0"+
    "\16\3\1\61\11\3\1\62\1\63\3\3\1\64\3\3"+
    "\1\65\1\66\1\3\1\67\1\3\1\70\1\71\13\3"+
    "\1\0\4\3\1\72\56\3\1\0\17\3\1\73\43\3"+
    "\1\0\4\3\1\74\15\3\1\75\40\3\1\0\2\3"+
    "\1\32\2\3\5\32\2\3\3\32\1\3\1\32\1\76"+
    "\4\32\2\3\23\32\1\3\5\32\2\3\1\0\2\3"+
    "\1\32\2\3\5\32\2\3\3\32\1\3\6\32\2\3"+
    "\10\32\1\77\12\32\1\3\5\32\2\3\1\0\2\3"+
    "\1\32\2\3\5\32\2\3\3\32\1\3\6\32\2\3"+
    "\10\32\1\100\12\32\1\3\5\32\2\3\1\0\2\3"+
    "\1\32\2\3\5\32\2\3\3\32\1\3\6\32\2\3"+
    "\6\32\1\101\14\32\1\3\5\32\2\3\1\0\2\3"+
    "\1\32\2\3\5\32\2\3\3\32\1\3\6\32\2\3"+
    "\23\32\1\3\1\102\4\32\2\3\1\0\2\3\1\32"+
    "\2\3\5\32\2\3\3\32\1\3\4\32\1\103\1\32"+
    "\2\3\23\32\1\3\5\32\2\3\1\0\2\3\1\32"+
    "\2\3\1\104\4\32\2\3\3\32\1\3\6\32\2\3"+
    "\10\32\1\105\12\32\1\3\5\32\2\3\1\0\2\3"+
    "\1\32\2\3\5\32\2\3\3\32\1\3\6\32\2\3"+
    "\23\32\1\3\1\106\4\32\2\3\1\0\2\3\1\32"+
    "\2\3\5\32\2\3\3\32\1\3\6\32\2\3\1\32"+
    "\1\107\21\32\1\3\5\32\2\3\1\0\2\3\1\32"+
    "\2\3\1\110\1\111\3\32\2\3\2\32\1\112\1\3"+
    "\2\32\1\113\1\114\2\32\2\3\3\32\1\115\17\32"+
    "\1\3\5\32\2\3\1\0\23\3\1\116\14\3\1\117"+
    "\22\3\1\0\31\3\1\120\31\3\1\0\21\3\1\121"+
    "\41\3\1\0\52\3\1\122\10\3\1\0\23\3\1\123"+
    "\37\3\1\0\40\3\1\124\22\3\1\0\21\3\1\125"+
    "\13\3\1\126\25\3\1\0\16\3\1\127\44\3\1\0"+
    "\50\3\1\130\12\3\1\0\30\3\1\131\1\132\5\3"+
    "\1\133\1\3\1\134\21\3\1\0\20\3\1\135\42\3"+
    "\1\0\16\3\1\136\11\3\1\137\1\140\3\3\1\141"+
    "\3\3\1\142\1\143\1\3\1\144\1\3\1\145\1\146"+
    "\13\3\1\0\4\3\1\147\56\3\1\0\2\3\1\32"+
    "\2\3\5\32\2\3\3\32\1\3\2\32\1\150\3\32"+
    "\2\3\23\32\1\3\5\32\2\3\1\0\2\3\1\32"+
    "\2\3\5\32\2\3\3\32\1\3\6\32\2\3\5\32"+
    "\1\151\15\32\1\3\5\32\2\3\1\0\2\3\1\32"+
    "\2\3\5\32\2\3\2\32\1\152\1\3\6\32\2\3"+
    "\23\32\1\3\5\32\2\3\1\0\2\3\1\32\2\3"+
    "\5\32\2\3\3\32\1\3\6\32\2\3\23\32\1\3"+
    "\1\153\4\32\2\3\1\0\2\3\1\32\2\3\5\32"+
    "\2\3\3\32\1\3\6\32\2\3\23\32\1\3\4\32"+
    "\1\154\2\3\1\0\2\3\1\32\2\3\1\32\1\155"+
    "\3\32\2\3\3\32\1\3\6\32\2\3\23\32\1\3"+
    "\5\32\2\3\1\0\2\3\1\32\2\3\5\32\2\3"+
    "\3\32\1\3\1\32\1\156\4\32\2\3\23\32\1\3"+
    "\5\32\2\3\1\0\2\3\1\32\2\3\1\157\4\32"+
    "\2\3\3\32\1\3\6\32\2\3\23\32\1\3\5\32"+
    "\2\3\1\0\2\3\1\32\2\3\5\32\2\3\3\32"+
    "\1\3\4\32\1\160\1\32\2\3\23\32\1\3\5\32"+
    "\2\3\1\0\2\3\1\32\2\3\5\32\2\3\3\32"+
    "\1\3\6\32\2\3\10\32\1\161\12\32\1\3\5\32"+
    "\2\3\1\0\2\3\1\32\2\3\5\32\2\3\3\32"+
    "\1\3\4\32\1\162\1\32\2\3\23\32\1\3\5\32"+
    "\2\3\1\0\2\3\1\32\2\3\5\32\2\3\3\32"+
    "\1\3\6\32\2\3\10\32\1\163\12\32\1\3\5\32"+
    "\2\3\1\0\2\3\1\32\2\3\5\32\2\3\3\32"+
    "\1\3\1\32\1\164\4\32\2\3\6\32\1\165\14\32"+
    "\1\3\5\32\2\3\1\0\2\3\1\32\2\3\5\32"+
    "\2\3\3\32\1\3\2\32\1\166\3\32\2\3\23\32"+
    "\1\3\5\32\2\3\1\0\2\3\1\32\2\3\5\32"+
    "\2\3\3\32\1\3\4\32\1\167\1\32\2\3\23\32"+
    "\1\3\5\32\2\3\1\0\25\3\1\170\35\3\1\0"+
    "\32\3\1\171\30\3\1\0\22\3\1\172\40\3\1\0"+
    "\34\3\1\173\26\3\1\0\22\3\1\174\40\3\1\0"+
    "\43\3\1\175\17\3\1\0\45\3\1\176\15\3\1\0"+
    "\40\3\1\177\22\3\1\0\35\3\1\200\25\3\1\0"+
    "\51\3\1\201\11\3\1\0\21\3\1\202\41\3\1\0"+
    "\40\3\1\203\22\3\1\0\16\3\1\204\5\3\1\205"+
    "\36\3\1\0\23\3\1\206\37\3\1\0\21\3\1\207"+
    "\41\3\1\0\23\3\1\210\14\3\1\211\22\3\1\0"+
    "\31\3\1\212\31\3\1\0\21\3\1\213\41\3\1\0"+
    "\52\3\1\214\10\3\1\0\23\3\1\215\37\3\1\0"+
    "\40\3\1\216\22\3\1\0\21\3\1\217\13\3\1\220"+
    "\25\3\1\0\16\3\1\221\44\3\1\0\50\3\1\222"+
    "\12\3\1\0\30\3\1\223\1\224\5\3\1\225\1\3"+
    "\1\226\21\3\1\0\2\3\1\32\2\3\5\32\2\3"+
    "\3\32\1\3\4\32\1\227\1\32\2\3\23\32\1\3"+
    "\5\32\2\3\1\0\2\3\1\32\2\3\5\32\2\3"+
    "\3\32\1\3\6\32\2\3\10\32\1\230\12\32\1\3"+
    "\5\32\2\3\1\0\2\3\1\32\2\3\5\32\2\3"+
    "\3\32\1\3\6\32\2\3\6\32\1\231\14\32\1\3"+
    "\5\32\2\3\1\0\2\3\1\32\2\3\5\32\2\3"+
    "\3\32\1\3\6\32\2\3\23\32\1\3\4\32\1\232"+
    "\2\3\1\0\2\3\1\32\2\3\5\32\2\3\3\32"+
    "\1\3\1\32\1\233\4\32\2\3\23\32\1\3\5\32"+
    "\2\3\1\0\2\3\1\32\2\3\5\32\2\3\3\32"+
    "\1\3\1\32\1\234\4\32\2\3\23\32\1\3\5\32"+
    "\2\3\1\0\2\3\1\32\2\3\1\32\1\235\3\32"+
    "\2\3\3\32\1\3\6\32\2\3\23\32\1\3\5\32"+
    "\2\3\1\0\2\3\1\32\2\3\5\32\2\3\3\32"+
    "\1\3\2\32\1\236\3\32\2\3\23\32\1\3\5\32"+
    "\2\3\1\0\2\3\1\32\2\3\5\32\2\3\3\32"+
    "\1\3\6\32\2\3\6\32\1\237\14\32\1\3\5\32"+
    "\2\3\1\0\2\3\1\32\2\3\5\32\2\3\3\32"+
    "\1\3\5\32\1\240\2\3\23\32\1\3\5\32\2\3"+
    "\1\0\2\3\1\32\2\3\5\32\2\3\1\32\1\241"+
    "\1\32\1\3\6\32\2\3\23\32\1\3\5\32\2\3"+
    "\1\0\2\3\1\32\2\3\5\32\2\3\3\32\1\3"+
    "\6\32\2\3\23\32\1\3\1\242\4\32\2\3\1\0"+
    "\2\3\1\32\2\3\5\32\2\3\3\32\1\3\1\32"+
    "\1\243\4\32\2\3\23\32\1\3\5\32\2\3\1\0"+
    "\2\3\1\32\2\3\5\32\2\3\3\32\1\3\6\32"+
    "\2\3\23\32\1\3\1\244\4\32\2\3\1\0\2\3"+
    "\1\32\2\3\5\32\2\3\3\32\1\3\6\32\2\3"+
    "\1\32\1\245\21\32\1\3\5\32\2\3\1\0\2\3"+
    "\1\32\2\3\5\32\2\3\1\32\1\246\1\32\1\3"+
    "\6\32\2\3\23\32\1\3\5\32\2\3\1\0\43\3"+
    "\1\247\17\3\1\0\33\3\1\250\27\3\1\0\21\3"+
    "\1\251\41\3\1\0\35\3\1\252\25\3\1\0\35\3"+
    "\1\253\25\3\1\0\41\3\1\254\21\3\1\0\22\3"+
    "\1\255\40\3\1\0\35\3\1\256\25\3\1\0\40\3"+
    "\1\257\22\3\1\0\25\3\1\260\35\3\1\0\35\3"+
    "\1\261\25\3\1\0\5\3\1\262\55\3\1\0\3\3"+
    "\1\263\57\3\1\0\25\3\1\264\35\3\1\0\32\3"+
    "\1\265\30\3\1\0\22\3\1\266\40\3\1\0\34\3"+
    "\1\267\26\3\1\0\22\3\1\270\40\3\1\0\43\3"+
    "\1\271\17\3\1\0\45\3\1\272\15\3\1\0\40\3"+
    "\1\273\22\3\1\0\35\3\1\274\25\3\1\0\51\3"+
    "\1\275\11\3\1\0\21\3\1\276\41\3\1\0\40\3"+
    "\1\277\22\3\1\0\16\3\1\300\5\3\1\301\36\3"+
    "\1\0\23\3\1\302\37\3\1\0\2\3\1\32\2\3"+
    "\5\32\2\3\3\32\1\3\6\32\2\3\6\32\1\303"+
    "\14\32\1\3\5\32\2\3\1\0\2\3\1\32\2\3"+
    "\5\32\2\3\3\32\1\3\6\32\2\3\5\32\1\304"+
    "\15\32\1\3\5\32\2\3\1\0\2\3\1\32\2\3"+
    "\5\32\2\3\3\32\1\3\1\32\1\305\4\32\2\3"+
    "\23\32\1\3\5\32\2\3\1\0\2\3\1\32\2\3"+
    "\5\32\2\3\3\32\1\3\1\32\1\306\4\32\2\3"+
    "\23\32\1\3\5\32\2\3\1\0\2\3\1\32\2\3"+
    "\5\32\2\3\3\32\1\3\6\32\2\3\3\32\1\307"+
    "\17\32\1\3\5\32\2\3\1\0\2\3\1\32\2\3"+
    "\5\32\2\3\3\32\1\3\6\32\2\3\23\32\1\3"+
    "\3\32\1\310\1\32\2\3\1\0\2\3\1\32\2\3"+
    "\5\32\2\3\3\32\1\3\3\32\1\311\2\32\2\3"+
    "\23\32\1\3\5\32\2\3\1\0\2\3\1\32\2\3"+
    "\5\32\2\3\3\32\1\3\1\32\1\312\4\32\2\3"+
    "\23\32\1\3\5\32\2\3\1\0\2\3\1\32\2\3"+
    "\5\32\2\3\3\32\1\3\6\32\2\3\5\32\1\313"+
    "\15\32\1\3\5\32\2\3\1\0\2\3\1\32\2\3"+
    "\5\32\2\3\3\32\1\3\6\32\2\3\13\32\1\314"+
    "\7\32\1\3\5\32\2\3\1\0\2\3\1\32\2\3"+
    "\5\32\2\3\3\32\1\3\6\32\2\3\10\32\1\315"+
    "\12\32\1\3\5\32\2\3\1\0\2\3\1\32\2\3"+
    "\5\32\2\3\3\32\1\3\1\32\1\316\4\32\2\3"+
    "\23\32\1\3\5\32\2\3\1\0\2\3\1\32\2\3"+
    "\5\32\2\3\3\32\1\3\6\32\2\3\16\32\1\317"+
    "\4\32\1\3\5\32\2\3\1\0\2\3\1\32\2\3"+
    "\5\32\2\3\3\32\1\3\6\32\2\3\7\32\1\320"+
    "\13\32\1\3\2\32\1\321\2\32\2\3\1\0\2\3"+
    "\1\32\2\3\5\32\2\3\3\32\1\3\1\32\1\322"+
    "\4\32\2\3\23\32\1\3\5\32\2\3\1\0\2\3"+
    "\1\32\2\3\5\32\2\3\1\32\1\323\1\32\1\3"+
    "\6\32\2\3\23\32\1\3\5\32\2\3\1\0\44\3"+
    "\1\324\16\3\1\0\5\3\1\325\55\3\1\0\21\3"+
    "\1\326\41\3\1\0\24\3\1\327\36\3\1\0\40\3"+
    "\1\330\22\3\1\0\22\3\1\331\40\3\1\0\35\3"+
    "\1\332\25\3\1\0\21\3\1\333\41\3\1\0\22\3"+
    "\1\334\40\3\1\0\43\3\1\335\17\3\1\0\3\3"+
    "\1\336\57\3\1\0\33\3\1\337\27\3\1\0\21\3"+
    "\1\340\41\3\1\0\35\3\1\341\25\3\1\0\3\3"+
    "\1\342\57\3\1\0\3\3\1\343\57\3\1\0\35\3"+
    "\1\344\25\3\1\0\3\3\1\345\57\3\1\0\41\3"+
    "\1\346\21\3\1\0\22\3\1\347\40\3\1\0\35\3"+
    "\1\350\25\3\1\0\40\3\1\351\22\3\1\0\25\3"+
    "\1\352\35\3\1\0\35\3\1\353\25\3\1\0\2\3"+
    "\1\32\2\3\1\354\4\32\2\3\3\32\1\3\6\32"+
    "\2\3\23\32\1\3\5\32\2\3\1\0\2\3\1\32"+
    "\2\3\5\32\2\3\3\32\1\3\6\32\2\3\22\32"+
    "\1\355\1\3\5\32\2\3\1\0\2\3\1\32\2\3"+
    "\5\32\2\3\3\32\1\3\6\32\2\3\3\32\1\356"+
    "\17\32\1\3\5\32\2\3\1\0\2\3\1\32\2\3"+
    "\5\32\2\3\3\32\1\3\6\32\2\3\5\32\1\357"+
    "\15\32\1\3\5\32\2\3\1\0\2\3\1\32\2\3"+
    "\5\32\2\3\3\32\1\3\6\32\2\3\1\32\1\360"+
    "\21\32\1\3\5\32\2\3\1\0\2\3\1\32\2\3"+
    "\5\32\2\3\3\32\1\3\6\32\2\3\3\32\1\361"+
    "\17\32\1\3\5\32\2\3\1\0\2\3\1\32\2\3"+
    "\5\32\2\3\3\32\1\3\6\32\2\3\20\32\1\362"+
    "\2\32\1\3\5\32\2\3\1\0\2\3\1\32\2\3"+
    "\5\32\2\3\3\32\1\3\1\32\1\363\4\32\2\3"+
    "\23\32\1\3\5\32\2\3\1\0\2\3\1\32\2\3"+
    "\5\32\2\3\3\32\1\3\3\32\1\364\2\32\2\3"+
    "\23\32\1\3\5\32\2\3\1\0\2\3\1\32\2\3"+
    "\5\32\2\3\2\32\1\365\1\3\6\32\2\3\23\32"+
    "\1\3\5\32\2\3\1\0\2\3\1\32\2\3\5\32"+
    "\2\3\2\32\1\366\1\3\6\32\2\3\23\32\1\3"+
    "\5\32\2\3\1\0\2\3\1\32\2\3\5\32\2\3"+
    "\2\32\1\367\1\3\6\32\2\3\23\32\1\3\5\32"+
    "\2\3\1\0\2\3\1\32\2\3\1\370\4\32\2\3"+
    "\3\32\1\3\6\32\2\3\23\32\1\3\5\32\2\3"+
    "\1\0\2\3\1\32\2\3\2\32\1\371\2\32\2\3"+
    "\3\32\1\3\6\32\2\3\23\32\1\3\5\32\2\3"+
    "\1\0\2\3\1\32\2\3\5\32\2\3\3\32\1\3"+
    "\1\32\1\372\4\32\2\3\23\32\1\3\5\32\2\3"+
    "\1\0\35\3\1\373\25\3\1\0\23\3\1\374\37\3"+
    "\1\0\15\3\1\375\45\3\1\0\36\3\1\376\24\3"+
    "\1\0\35\3\1\377\25\3\1\0\22\3\1\u0100\40\3"+
    "\1\0\40\3\1\u0101\22\3\1\0\5\3\1\u0102\55\3"+
    "\1\0\23\3\1\u0103\37\3\1\0\44\3\1\u0104\16\3"+
    "\1\0\5\3\1\u0105\55\3\1\0\3\3\1\u0106\57\3"+
    "\1\0\3\3\1\u0107\57\3\1\0\21\3\1\u0108\41\3"+
    "\1\0\3\3\1\u0109\57\3\1\0\24\3\1\u010a\36\3"+
    "\1\0\40\3\1\u010b\22\3\1\0\22\3\1\u010c\40\3"+
    "\1\0\35\3\1\u010d\25\3\1\0\21\3\1\u010e\41\3"+
    "\1\0\2\3\1\32\2\3\5\32\2\3\3\32\1\3"+
    "\6\32\2\3\3\32\1\u010f\17\32\1\3\5\32\2\3"+
    "\1\0\2\3\1\32\2\3\5\32\2\3\3\32\1\3"+
    "\6\32\2\3\4\32\1\u0110\16\32\1\3\5\32\2\3"+
    "\1\0\2\3\1\32\2\3\5\32\2\3\3\32\1\3"+
    "\6\32\2\3\5\32\1\u0111\15\32\1\3\5\32\2\3"+
    "\1\0\2\3\1\32\2\3\5\32\2\3\3\32\1\3"+
    "\6\32\2\3\10\32\1\u0112\12\32\1\3\5\32\2\3"+
    "\1\0\2\3\1\32\2\3\5\32\2\3\3\32\1\3"+
    "\6\32\2\3\22\32\1\u0113\1\3\5\32\2\3\1\0"+
    "\2\3\1\32\2\3\5\32\2\3\3\32\1\3\5\32"+
    "\1\u0114\2\3\23\32\1\3\5\32\2\3\1\0\2\3"+
    "\1\32\2\3\5\32\2\3\3\32\1\3\2\32\1\u0115"+
    "\3\32\2\3\23\32\1\3\5\32\2\3\1\0\2\3"+
    "\1\32\2\3\5\32\2\3\3\32\1\3\6\32\2\3"+
    "\10\32\1\u0116\12\32\1\3\5\32\2\3\1\0\2\3"+
    "\1\32\2\3\5\32\2\3\3\32\1\3\4\32\1\u0117"+
    "\1\32\2\3\23\32\1\3\5\32\2\3\1\0\2\3"+
    "\1\32\2\3\5\32\2\3\3\32\1\3\3\32\1\u0118"+
    "\2\32\2\3\23\32\1\3\5\32\2\3\1\0\2\3"+
    "\1\32\2\3\5\32\2\3\3\32\1\3\5\32\1\u0119"+
    "\2\3\23\32\1\3\5\32\2\3\1\0\5\3\1\u011a"+
    "\55\3\1\0\34\3\1\u011b\26\3\1\0\21\3\1\u011c"+
    "\41\3\1\0\5\3\1\u011d\55\3\1\0\52\3\1\u011e"+
    "\10\3\1\0\23\3\1\u011f\37\3\1\0\40\3\1\u0120"+
    "\22\3\1\0\24\3\1\u0121\36\3\1\0\35\3\1\u0122"+
    "\25\3\1\0\23\3\1\u0123\37\3\1\0\15\3\1\u0124"+
    "\45\3\1\0\36\3\1\u0125\24\3\1\0\35\3\1\u0126"+
    "\25\3\1\0\22\3\1\u0127\40\3\1\0\40\3\1\u0128"+
    "\22\3\1\0\5\3\1\u0129\55\3\1\0\2\3\1\32"+
    "\2\3\5\32\2\3\3\32\1\3\1\32\1\u012a\4\32"+
    "\2\3\23\32\1\3\5\32\2\3\1\0\2\3\1\32"+
    "\2\3\5\32\2\3\3\32\1\3\1\32\1\u012b\4\32"+
    "\2\3\23\32\1\3\5\32\2\3\1\0\2\3\1\32"+
    "\2\3\5\32\2\3\3\32\1\3\6\32\2\3\5\32"+
    "\1\u012c\15\32\1\3\5\32\2\3\1\0\2\3\1\32"+
    "\2\3\5\32\2\3\3\32\1\3\6\32\2\3\4\32"+
    "\1\u012d\16\32\1\3\5\32\2\3\1\0\2\3\1\32"+
    "\2\3\5\32\2\3\3\32\1\3\4\32\1\u012e\1\32"+
    "\2\3\23\32\1\3\5\32\2\3\1\0\2\3\1\32"+
    "\2\3\5\32\2\3\3\32\1\3\2\32\1\u012f\3\32"+
    "\2\3\23\32\1\3\5\32\2\3\1\0\2\3\1\32"+
    "\2\3\5\32\2\3\3\32\1\3\6\32\2\3\4\32"+
    "\1\u0130\16\32\1\3\5\32\2\3\1\0\2\3\1\32"+
    "\2\3\5\32\2\3\3\32\1\3\5\32\1\u0131\2\3"+
    "\23\32\1\3\5\32\2\3\1\0\2\3\1\32\2\3"+
    "\5\32\2\3\3\32\1\3\6\32\2\3\5\32\1\u0132"+
    "\15\32\1\3\5\32\2\3\1\0\23\3\1\u0133\37\3"+
    "\1\0\35\3\1\u0134\25\3\1\0\25\3\1\u0135\35\3"+
    "\1\0\33\3\1\u0136\27\3\1\0\34\3\1\u0137\26\3"+
    "\1\0\25\3\1\u0138\35\3\1\0\16\3\1\u0139\44\3"+
    "\1\0\25\3\1\u013a\35\3\1\0\5\3\1\u013b\55\3"+
    "\1\0\34\3\1\u013c\26\3\1\0\21\3\1\u013d\41\3"+
    "\1\0\5\3\1\u013e\55\3\1\0\52\3\1\u013f\10\3"+
    "\1\0\3\3\1\u0140\57\3\1\0\23\3\1\u0141\37\3"+
    "\1\0\40\3\1\u0142\22\3\1\0\2\3\1\32\2\3"+
    "\5\32\2\3\3\32\1\3\1\32\1\u0143\4\32\2\3"+
    "\23\32\1\3\5\32\2\3\1\0\2\3\1\32\2\3"+
    "\5\32\2\3\3\32\1\3\1\32\1\u0144\4\32\2\3"+
    "\23\32\1\3\5\32\2\3\1\0\2\3\1\32\2\3"+
    "\5\32\2\3\3\32\1\3\2\32\1\u0145\3\32\2\3"+
    "\23\32\1\3\5\32\2\3\1\0\2\3\1\32\2\3"+
    "\5\32\2\3\3\32\1\3\1\32\1\u0146\4\32\2\3"+
    "\23\32\1\3\5\32\2\3\1\0\2\3\1\32\2\3"+
    "\5\32\2\3\3\32\1\3\1\32\1\u0147\4\32\2\3"+
    "\23\32\1\3\5\32\2\3\1\0\25\3\1\u0148\35\3"+
    "\1\0\23\3\1\u0149\37\3\1\0\35\3\1\u014a\25\3"+
    "\1\0\21\3\1\u014b\41\3\1\0\21\3\1\u014c\41\3"+
    "\1\0\21\3\1\u014d\41\3\1\0\26\3\1\u014e\34\3"+
    "\1\0\23\3\1\u014f\37\3\1\0\35\3\1\u0150\25\3"+
    "\1\0\25\3\1\u0151\35\3\1\0\33\3\1\u0152\27\3"+
    "\1\0\34\3\1\u0153\26\3\1\0\25\3\1\u0154\35\3"+
    "\1\0\16\3\1\u0155\44\3\1\0\2\3\1\32\2\3"+
    "\5\32\2\3\3\32\1\3\6\32\2\3\23\32\1\3"+
    "\1\32\1\u0156\3\32\2\3\1\0\2\3\1\32\2\3"+
    "\1\u0157\4\32\2\3\3\32\1\3\6\32\2\3\23\32"+
    "\1\3\5\32\2\3\1\0\2\3\1\32\2\3\1\32"+
    "\1\u0158\3\32\2\3\3\32\1\3\6\32\2\3\23\32"+
    "\1\3\5\32\2\3\1\0\43\3\1\u0159\17\3\1\0"+
    "\24\3\1\u015a\36\3\1\0\5\3\1\u015b\55\3\1\0"+
    "\12\3\1\u015c\50\3\1\0\25\3\1\u015d\35\3\1\0"+
    "\23\3\1\u015e\37\3\1\0\35\3\1\u015f\25\3\1\0"+
    "\21\3\1\u0160\41\3\1\0\21\3\1\u0161\41\3\1\0"+
    "\21\3\1\u0162\41\3\1\0\3\3\1\u0163\57\3\1\0"+
    "\2\3\1\32\2\3\2\32\1\u0164\2\32\2\3\3\32"+
    "\1\3\6\32\2\3\23\32\1\3\5\32\2\3\1\0"+
    "\2\3\1\32\2\3\5\32\2\3\3\32\1\3\6\32"+
    "\2\3\5\32\1\u0165\15\32\1\3\5\32\2\3\1\0"+
    "\2\3\1\32\2\3\5\32\2\3\3\32\1\3\6\32"+
    "\2\3\12\32\1\u0166\10\32\1\3\5\32\2\3\1\0"+
    "\25\3\1\u0167\35\3\1\0\11\3\1\u0168\51\3\1\0"+
    "\43\3\1\u0169\17\3\1\0\24\3\1\u016a\36\3\1\0"+
    "\3\3\1\u016b\57\3\1\0\3\3\1\u016c\57\3\1\0"+
    "\3\3\1\u016d\57\3\1\0\5\3\1\u016e\55\3\1\0"+
    "\2\3\1\32\2\3\5\32\2\3\3\32\1\3\6\32"+
    "\2\3\22\32\1\u016f\1\3\5\32\2\3\1\0\2\3"+
    "\1\32\2\3\5\32\2\3\3\32\1\3\6\32\2\3"+
    "\22\32\1\u0170\1\3\5\32\2\3\1\0\27\3\1\u0171"+
    "\33\3\1\0\3\3\1\u0172\57\3\1\0\25\3\1\u0173"+
    "\35\3\1\0\3\3\1\u0174\57\3\1\0\2\3\1\32"+
    "\2\3\5\32\2\3\3\32\1\3\6\32\2\3\23\32"+
    "\1\3\1\32\1\u0175\3\32\2\3\1\0\11\3\1\u0176"+
    "\51\3\1\0\3\3\1\u0177\57\3\1\0\2\3\1\32"+
    "\2\3\2\32\1\u0178\2\32\2\3\3\32\1\3\6\32"+
    "\2\3\23\32\1\3\5\32\2\3\1\0\12\3\1\u0179"+
    "\50\3\1\0\13\3\1\u017a\47\3\1\0\3\3\1\u017b"+
    "\55\3";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[16588];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 146) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 305: 
          {  return symbolFactory.newSymbol("RDFS_COMMENT", RDFS_COMMENT);  }
        case 380: break;
        case 301: 
          {  return symbolFactory.newSymbol("RDFS_SEEALSO", RDFS_SEEALSO);  }
        case 381: break;
        case 125: 
          {  return symbolFactory.newSymbol("OPEN_RDF_SEQ", OPEN_RDF_SEQ);  }
        case 382: break;
        case 124: 
          {  return symbolFactory.newSymbol("OPEN_RDF_BAG", OPEN_RDF_BAG);  }
        case 383: break;
        case 120: 
          {  return symbolFactory.newSymbol("OPEN_RDF_RDF", OPEN_RDF_RDF);  }
        case 384: break;
        case 16: 
          {  return symbolFactory.newSymbol("OPEN_END_TAG", OPEN_END_TAG);  }
        case 385: break;
        case 127: 
          {  return symbolFactory.newSymbol("OPEN_RDF_ALT", OPEN_RDF_ALT);  }
        case 386: break;
        case 178: 
          {  return symbolFactory.newSymbol("CLOSE_RDF_LI", CLOSE_RDF_LI);  }
        case 387: break;
        case 322: 
          {  return symbolFactory.newSymbol("RDF_PREDICATE", RDF_PREDICATE);  }
        case 388: break;
        case 168: 
          {  return symbolFactory.newSymbol("OPEN_RDF_TYPE", OPEN_RDF_TYPE);  }
        case 389: break;
        case 221: 
          {  return symbolFactory.newSymbol("CLOSE_RDF_RDF", CLOSE_RDF_RDF);  }
        case 390: break;
        case 225: 
          {  return symbolFactory.newSymbol("CLOSE_RDF_BAG", CLOSE_RDF_BAG);  }
        case 391: break;
        case 226: 
          {  return symbolFactory.newSymbol("CLOSE_RDF_SEQ", CLOSE_RDF_SEQ);  }
        case 392: break;
        case 228: 
          {  return symbolFactory.newSymbol("CLOSE_RDF_ALT", CLOSE_RDF_ALT);  }
        case 393: break;
        case 10: 
          {  return symbolFactory.newSymbol("QUOTE", QUOTE);  }
        case 394: break;
        case 298: 
          { return symbolFactory.newSymbol("RDF_DATATYPE", RDF_DATATYPE);  }
        case 395: break;
        case 297: 
          { return symbolFactory.newSymbol("RDF_RESOURCE", RDF_RESOURCE);  }
        case 396: break;
        case 13: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 397: break;
        case 238: 
          {  return symbolFactory.newSymbol("RDF_OBJECT", RDF_OBJECT);  }
        case 398: break;
        case 242: 
          {  return symbolFactory.newSymbol("RDFS_RANGE", RDFS_RANGE);  }
        case 399: break;
        case 244: 
          {  return symbolFactory.newSymbol("RDFS_LABEL", RDFS_LABEL);  }
        case 400: break;
        case 6: 
          {  return symbolFactory.newSymbol("OPEN_TAG", OPEN_TAG);  }
        case 401: break;
        case 378: 
          {  return symbolFactory.newSymbol("XML_VERSION", XML_VERSION);  }
        case 402: break;
        case 275: 
          {  return symbolFactory.newSymbol("RDFS_DOMAIN", RDFS_DOMAIN);  }
        case 403: break;
        case 272: 
          {  return symbolFactory.newSymbol("RDF_SUBJECT", RDF_SUBJECT);  }
        case 404: break;
        case 70: 
          { return symbolFactory.newSymbol("RDF_ID", RDF_ID);  }
        case 405: break;
        case 77: 
          {  return symbolFactory.newSymbol("OPEN_RDF_LI", OPEN_RDF_LI);  }
        case 406: break;
        case 8: 
          {  return symbolFactory.newSymbol("CLOSE_TAG", CLOSE_TAG);  }
        case 407: break;
        case 196: 
          {  return symbolFactory.newSymbol("RDF_VALUE", RDF_VALUE);  }
        case 408: break;
        case 202: 
          { return symbolFactory.newSymbol("RDF_ABOUT", RDF_ABOUT);  }
        case 409: break;
        case 375: 
          {  return symbolFactory.newSymbol("RDFS_SUBPROPERTYOF", RDFS_SUBPROPERTYOF);  }
        case 410: break;
        case 363: 
          {  return symbolFactory.newSymbol("CLOSE_RDFS_RESOURCE", CLOSE_RDFS_RESOURCE);  }
        case 411: break;
        case 330: 
          {  return symbolFactory.newSymbol("OPEN_RDFS_RESOURCE", OPEN_RDFS_RESOURCE);  }
        case 412: break;
        case 239: 
          { return symbolFactory.newSymbol("RDF_NODEID", RDF_NODEID);  }
        case 413: break;
        case 2: 
        case 7: 
        case 9: 
        case 12: 
        case 14: 
        case 15: 
        case 17: 
        case 18: 
        case 19: 
        case 22: 
        case 23: 
        case 24: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 119: 
        case 121: 
        case 122: 
        case 123: 
        case 126: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 166: 
        case 167: 
        case 170: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 222: 
        case 223: 
        case 224: 
        case 227: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 263: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 320: 
        case 321: 
        case 327: 
        case 328: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 345: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 353: 
        case 359: 
        case 360: 
        case 361: 
        case 365: 
        case 368: 
        case 370: 
        case 373: 
        case 376: 
        case 377: 
          {  return symbolFactory.newSymbol("INSIDE_TEXT", INSIDE_TEXT, yytext());  }
        case 414: break;
        case 11: 
          {  return symbolFactory.newSymbol("EQUALS", EQUALS);  }
        case 415: break;
        case 369: 
          {  return symbolFactory.newSymbol("CLOSE_RDF_LANGSTRING", CLOSE_RDF_LANGSTRING);  }
        case 416: break;
        case 364: 
          { return symbolFactory.newSymbol("CLOSE_RDF_DATATYPE", CLOSE_RDF_DATATYPE);  }
        case 417: break;
        case 344: 
          {  return symbolFactory.newSymbol("OPEN_RDF_LANGSTRING", OPEN_RDF_LANGSTRING);  }
        case 418: break;
        case 331: 
          { return symbolFactory.newSymbol("OPEN_RDF_DATATYPE", OPEN_RDF_DATATYPE);  }
        case 419: break;
        case 20: 
          {  return symbolFactory.newSymbol("PROPERTY_VALUE", PROPERTY_VALUE, yytext());  }
        case 420: break;
        case 255: 
          {  return symbolFactory.newSymbol("OPEN_RDFS_CLASS", OPEN_RDFS_CLASS);  }
        case 421: break;
        case 319: 
          {  return symbolFactory.newSymbol("CLOSE_RDFS_CLASS", CLOSE_RDFS_CLASS);  }
        case 422: break;
        case 312: 
          {  return symbolFactory.newSymbol("OPEN_RDFS_LITERAL", OPEN_RDFS_LITERAL);  }
        case 423: break;
        case 25: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 194: 
        case 195: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 235: 
        case 236: 
        case 237: 
        case 240: 
        case 241: 
        case 243: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 270: 
        case 271: 
        case 273: 
        case 274: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 299: 
        case 300: 
        case 302: 
        case 303: 
        case 304: 
        case 324: 
        case 325: 
        case 326: 
        case 341: 
        case 342: 
        case 343: 
        case 356: 
        case 357: 
        case 366: 
        case 372: 
          {  return symbolFactory.newSymbol("TAG_NAME_WITH_SCHEME", TAG_NAME_WITH_SCHEME);  }
        case 424: break;
        case 367: 
          {  return symbolFactory.newSymbol("RDFS_ISDEFINEDBY", RDFS_ISDEFINEDBY);  }
        case 425: break;
        case 46: 
          { return symbolFactory.newSymbol("RDF_N", RDF_N);  }
        case 426: break;
        case 371: 
          { return symbolFactory.newSymbol("CLOSE_RDF_CONTAINER", CLOSE_RDF_CONTAINER);  }
        case 427: break;
        case 362: 
          { return symbolFactory.newSymbol("CLOSE_RDF_STATEMENT", CLOSE_RDF_STATEMENT);  }
        case 428: break;
        case 354: 
          {  return symbolFactory.newSymbol("CLOSE_RDFS_LITERAL", CLOSE_RDFS_LITERAL);  }
        case 429: break;
        case 346: 
          { return symbolFactory.newSymbol("OPEN_RDF_CONTAINER", OPEN_RDF_CONTAINER);  }
        case 430: break;
        case 329: 
          { return symbolFactory.newSymbol("OPEN_RDF_STATEMENT", OPEN_RDF_STATEMENT);  }
        case 431: break;
        case 323: 
          { return symbolFactory.newSymbol("RDF_PARSETYPE", RDF_PARSETYPE);  }
        case 432: break;
        case 21: 
          {  return symbolFactory.newSymbol("CLOSE_SINGULAR_TAG", CLOSE_SINGULAR_TAG);  }
        case 433: break;
        case 374: 
          {  return symbolFactory.newSymbol("CLOSE_RDF_DESCRIPTION", CLOSE_RDF_DESCRIPTION);  }
        case 434: break;
        case 358: 
          {  return symbolFactory.newSymbol("OPEN_RDF_DESCRIPTION", OPEN_RDF_DESCRIPTION);  }
        case 435: break;
        case 355: 
          {  return symbolFactory.newSymbol("RDFS_SUBCLASSOF", RDFS_SUBCLASSOF);  }
        case 436: break;
        case 261: 
          {  return symbolFactory.newSymbol("CLOSE_RDF_TYPE", CLOSE_RDF_TYPE);  }
        case 437: break;
        case 169: 
          { return symbolFactory.newSymbol("OPEN_RDF_LIST", OPEN_RDF_LIST);  }
        case 438: break;
        case 171: 
          { return symbolFactory.newSymbol("OPEN_RDF_HTML", OPEN_RDF_HTML);  }
        case 439: break;
        case 264: 
          { return symbolFactory.newSymbol("CLOSE_RDF_HTML", CLOSE_RDF_HTML);  }
        case 440: break;
        case 3: 
        case 4: 
        case 5: 
          {  }
        case 441: break;
        case 262: 
          { return symbolFactory.newSymbol("CLOSE_RDF_LIST", CLOSE_RDF_LIST);  }
        case 442: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
