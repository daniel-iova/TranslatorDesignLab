/* The following code was generated by JFlex 1.3.5 on 11/15/22, 7:08 PM */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 11/15/22, 7:08 PM from the specification file
 * <tt>file:/C:/Users/alex_/eclipse-workspace/TranslatorDesignLab/TranslatorDesignLab/TDLab/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\23\1\0\1\15"+
    "\7\0\1\0\2\0\1\5\1\33\1\16\12\14\1\7\1\0\1\4"+
    "\1\32\1\6\1\17\1\0\1\40\1\41\1\34\1\11\1\25\1\12"+
    "\1\42\1\44\1\27\1\46\1\5\1\22\1\21\1\31\1\30\1\35"+
    "\1\43\1\10\1\26\1\36\1\37\1\24\1\5\1\20\1\45\5\5"+
    "\1\13\1\5\1\40\1\41\1\34\1\11\1\25\1\12\1\42\1\44"+
    "\1\27\1\46\1\5\1\22\1\21\1\31\1\30\1\35\1\43\1\10"+
    "\1\26\1\36\1\37\1\24\1\5\1\20\1\45\1\5\uff85\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    39,    78,   117,    78,   156,   195,   234,   273,   312, 
      351,    78,   390,   429,   195,   468,   507,   546,   312,   312, 
       78,   585,   624,   468,   663,   702,   741,   780,   507,   819, 
      858,   897,   936,   975,  1014,  1053,  1092,  1131,  1170,  1209, 
     1248,  1287,  1326,  1365,  1404,  1443,  1482,   858,  1521,  1560, 
     1599,  1638,  1677,  1716,  1755,  1794,  1833,  1872,  1911,  1950, 
     1989,  2028,   468,  2067,  2106,  2145,  2184,  2223,  2262,  2301, 
     2340,  2379,  2418,  2457,  2496,  2535,  2574,  2613,  2652,  2691, 
     2730,  2769,  2808,  2847,  2886,  2925,  2964,  3003,   468,  3042, 
     3081,  3120,  3159,  3198,  3237,   468,  3276,  3315,  3354,  3393, 
     3432,  3471,  3510,   468,  3549,   468,  3588,  3627,  3666,  3705, 
     3744,  3783,  3822,  3861,  3900,  3939,  3978,  4017,  4056,  4095, 
     4134,  4173,  4212,  4251,  4290,  4329,  4368,  4407,  4446,  4485, 
     4524,  4563,  4602,  4641,  4680,  4719,   468,  4758,  4797,  4836, 
     4875,  4914,  4953,  4992,  5031,   468,  5070,   468,  5109,  5148, 
     5187,  5226,  5265,  5304,  5343,  5382,  5421,  5460,  5499,  5538, 
     5577,  5616,    78,  5655,  5694,  5733,  5772,  5811,  5850,  5889, 
     5928,  5967,  6006,  6045,  6084,  6123,  6162,  6201,  6240,  6279, 
     6318,   468,  6357,  6396,  6435,  6474,  6513,  6552,   468,  6591, 
     6630,  6669,  6708,  6747,  6786,  6825,  6864,  6903,  6942,  6981, 
     7020,  7059,    78,  7098,  7137,  7176,    78,  7215,  7254,    78, 
       78,  7293,  7332,  7371,  7410,  7449,  7488,  7527,  7566,  7605, 
     7644,  7683,  7722,  7761,   468,   468,  7800,  7839,  7878,   468, 
     7917,  7956,  7995,   468,  8034,  8073,  8112,  8151,   468,  8190, 
     8229,  8268,    78,  8307,  8346,    78,    78,  8385,  8424,  8463, 
     8502,  8541,  8580,  8619,  8658,  8697,  8736,  8775,   468,  8814, 
     8853,  8892,   468,  8931,  8970,  9009,  9048,  9087,  9126,  9165, 
     9204,  9243,  9282,  9321,  9360,  9399,  9438,  9477,  9516,  9555, 
      468,  9594,   468,  9633,  9672,  9711,  9750,  9789,  9828,   468, 
      468,  9867,  9906,  9945,   468,  9984, 10023, 10062, 10101, 10140, 
    10179, 10218,    78, 10257, 10296, 10335, 10374,   468,   468,   468, 
      468,   468, 10413, 10452, 10491, 10530, 10569, 10608, 10647, 10686, 
    10725, 10764, 10803, 10842, 10881,   468, 10920, 10959, 10998,   468, 
    11037, 11076, 11115, 11154, 11193,    78, 11232, 11271,   468,   468, 
    11310, 11349, 11388, 11427,    78,    78,    78, 11466, 11505, 11544, 
      468, 11583,    78,    78, 11622, 11661,    78, 11700,   468, 11739, 
    11778,    78
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\3\1\11"+
    "\4\7\1\12\1\13\1\3\3\7\1\5\6\7\1\14"+
    "\1\3\13\7\47\3\51\0\1\5\62\0\1\15\1\16"+
    "\34\0\1\17\1\0\1\20\5\17\3\0\3\17\1\0"+
    "\6\17\2\0\13\17\2\21\1\0\44\21\5\0\1\17"+
    "\1\0\1\20\1\17\1\22\3\17\3\0\3\17\1\0"+
    "\6\17\2\0\13\17\2\23\1\0\12\23\1\24\31\23"+
    "\6\0\1\25\50\0\1\26\56\0\1\27\33\0\1\30"+
    "\2\0\5\30\3\0\3\30\1\0\6\30\2\0\13\30"+
    "\2\21\1\0\1\21\1\31\42\21\5\0\1\17\1\0"+
    "\1\20\2\17\1\32\2\17\3\0\3\17\1\0\6\17"+
    "\2\0\13\17\11\0\1\33\56\0\1\34\25\0\2\21"+
    "\1\0\1\21\1\31\11\21\1\35\30\21\5\0\1\17"+
    "\1\0\1\36\3\17\1\37\1\17\3\0\3\17\1\0"+
    "\2\17\1\40\3\17\2\0\13\17\12\0\1\41\56\0"+
    "\1\42\31\0\1\30\2\0\1\43\1\44\3\30\3\0"+
    "\2\30\1\45\1\0\1\46\1\30\1\47\1\50\1\51"+
    "\1\52\2\0\1\30\1\53\1\54\1\30\1\55\1\56"+
    "\2\30\1\57\2\30\5\0\1\17\1\0\1\20\4\17"+
    "\1\60\3\0\3\17\1\0\6\17\2\0\13\17\5\0"+
    "\1\17\1\0\1\61\5\17\3\0\3\17\1\0\6\17"+
    "\2\0\13\17\7\0\1\62\16\0\1\63\43\0\1\64"+
    "\30\0\1\30\2\0\1\30\1\65\3\30\3\0\3\30"+
    "\1\0\1\30\1\66\4\30\2\0\13\30\5\0\1\30"+
    "\2\0\5\30\3\0\3\30\1\0\1\30\1\67\4\30"+
    "\2\0\4\30\1\70\6\30\5\0\1\30\2\0\5\30"+
    "\3\0\3\30\1\0\3\30\1\71\2\30\2\0\4\30"+
    "\1\72\6\30\5\0\1\30\2\0\5\30\3\0\3\30"+
    "\1\0\6\30\2\0\4\30\1\73\6\30\5\0\1\30"+
    "\2\0\5\30\3\0\3\30\1\0\1\30\1\74\4\30"+
    "\2\0\2\30\1\75\1\76\7\30\5\0\1\30\2\0"+
    "\1\30\1\77\3\30\3\0\3\30\1\0\6\30\2\0"+
    "\13\30\5\0\1\30\2\0\5\30\3\0\3\30\1\0"+
    "\6\30\2\0\5\30\1\100\5\30\5\0\1\30\2\0"+
    "\5\30\3\0\3\30\1\0\4\30\1\101\1\30\2\0"+
    "\13\30\5\0\1\30\2\0\1\102\4\30\3\0\3\30"+
    "\1\0\6\30\2\0\4\30\1\103\6\30\5\0\1\30"+
    "\2\0\5\30\3\0\3\30\1\0\6\30\2\0\11\30"+
    "\1\104\1\30\5\0\1\30\2\0\5\30\3\0\2\30"+
    "\1\105\1\0\6\30\2\0\5\30\1\106\5\30\5\0"+
    "\1\30\2\0\5\30\3\0\3\30\1\0\6\30\2\0"+
    "\4\30\1\107\6\30\5\0\1\30\2\0\5\30\3\0"+
    "\3\30\1\0\6\30\2\0\2\30\1\110\10\30\5\0"+
    "\1\30\2\0\1\111\1\112\3\30\3\0\2\30\1\113"+
    "\1\0\2\30\1\114\1\115\2\30\2\0\1\116\12\30"+
    "\10\0\1\117\1\120\10\0\1\121\3\0\1\122\7\0"+
    "\1\123\1\0\1\124\1\125\2\0\1\126\11\0\1\127"+
    "\63\0\1\130\27\0\1\30\2\0\2\30\1\131\2\30"+
    "\3\0\3\30\1\0\6\30\2\0\13\30\5\0\1\30"+
    "\2\0\5\30\3\0\3\30\1\0\2\30\1\132\3\30"+
    "\2\0\13\30\5\0\1\30\2\0\5\30\3\0\3\30"+
    "\1\0\2\30\1\133\3\30\2\0\13\30\5\0\1\30"+
    "\2\0\5\30\3\0\3\30\1\0\6\30\2\0\2\30"+
    "\1\134\10\30\5\0\1\30\2\0\5\30\3\0\3\30"+
    "\1\0\2\30\1\135\3\30\2\0\13\30\5\0\1\30"+
    "\2\0\5\30\3\0\3\30\1\0\5\30\1\136\2\0"+
    "\13\30\5\0\1\30\2\0\5\30\3\0\2\30\1\137"+
    "\1\0\6\30\2\0\13\30\5\0\1\30\2\0\5\30"+
    "\3\0\3\30\1\0\6\30\2\0\7\30\1\140\3\30"+
    "\5\0\1\30\2\0\5\30\3\0\3\30\1\0\6\30"+
    "\2\0\4\30\1\141\6\30\5\0\1\30\2\0\5\30"+
    "\3\0\3\30\1\0\6\30\2\0\5\30\1\142\5\30"+
    "\5\0\1\30\2\0\5\30\3\0\3\30\1\0\6\30"+
    "\2\0\12\30\1\143\5\0\1\30\2\0\1\30\1\144"+
    "\3\30\3\0\3\30\1\0\6\30\2\0\13\30\5\0"+
    "\1\30\2\0\5\30\3\0\3\30\1\0\1\30\1\145"+
    "\4\30\2\0\13\30\5\0\1\30\2\0\1\146\4\30"+
    "\3\0\3\30\1\0\6\30\2\0\13\30\5\0\1\30"+
    "\2\0\5\30\3\0\3\30\1\0\6\30\2\0\1\30"+
    "\1\147\11\30\5\0\1\30\2\0\5\30\3\0\3\30"+
    "\1\0\6\30\2\0\2\30\1\150\10\30\5\0\1\30"+
    "\2\0\5\30\3\0\3\30\1\0\4\30\1\151\1\30"+
    "\2\0\13\30\5\0\1\30\2\0\5\30\3\0\3\30"+
    "\1\0\6\30\2\0\6\30\1\152\4\30\5\0\1\30"+
    "\2\0\5\30\3\0\1\30\1\153\1\30\1\0\6\30"+
    "\2\0\13\30\5\0\1\30\2\0\5\30\3\0\3\30"+
    "\1\0\1\30\1\154\4\30\2\0\4\30\1\155\6\30"+
    "\5\0\1\30\2\0\5\30\3\0\3\30\1\0\4\30"+
    "\1\156\1\30\2\0\4\30\1\157\6\30\5\0\1\30"+
    "\2\0\5\30\3\0\3\30\1\0\3\30\1\160\2\30"+
    "\2\0\4\30\1\161\6\30\5\0\1\30\2\0\5\30"+
    "\3\0\3\30\1\0\1\30\1\162\4\30\2\0\3\30"+
    "\1\163\7\30\5\0\1\30\2\0\5\30\3\0\3\30"+
    "\1\0\2\30\1\164\3\30\2\0\13\30\5\0\1\30"+
    "\2\0\5\30\3\0\2\30\1\165\1\0\4\30\1\166"+
    "\1\30\2\0\13\30\11\0\1\167\62\0\1\170\50\0"+
    "\1\171\10\0\1\172\33\0\1\173\10\0\1\174\55\0"+
    "\1\175\23\0\1\176\64\0\1\177\44\0\1\200\20\0"+
    "\1\201\1\202\10\0\1\203\11\0\1\204\37\0\1\205"+
    "\26\0\1\30\2\0\5\30\3\0\3\30\1\0\4\30"+
    "\1\206\1\30\2\0\13\30\5\0\1\30\2\0\5\30"+
    "\3\0\3\30\1\0\6\30\2\0\1\207\12\30\5\0"+
    "\1\30\2\0\5\30\3\0\3\30\1\0\6\30\2\0"+
    "\4\30\1\210\6\30\5\0\1\30\2\0\5\30\3\0"+
    "\3\30\1\0\6\30\2\0\2\30\1\211\10\30\5\0"+
    "\1\30\2\0\5\30\3\0\3\30\1\0\6\30\2\0"+
    "\6\30\1\212\4\30\5\0\1\30\2\0\5\30\3\0"+
    "\3\30\1\0\6\30\2\0\3\30\1\213\7\30\5\0"+
    "\1\30\2\0\5\30\3\0\3\30\1\0\6\30\2\0"+
    "\2\30\1\214\10\30\5\0\1\30\2\0\5\30\3\0"+
    "\3\30\1\0\6\30\2\0\12\30\1\215\5\0\1\30"+
    "\2\0\5\30\3\0\3\30\1\0\1\30\1\216\4\30"+
    "\2\0\13\30\5\0\1\30\2\0\5\30\3\0\3\30"+
    "\1\0\1\30\1\217\4\30\2\0\13\30\5\0\1\30"+
    "\2\0\1\30\1\220\3\30\3\0\3\30\1\0\6\30"+
    "\2\0\13\30\5\0\1\30\2\0\5\30\3\0\3\30"+
    "\1\0\2\30\1\221\3\30\2\0\13\30\5\0\1\30"+
    "\2\0\5\30\3\0\3\30\1\0\1\30\1\222\4\30"+
    "\2\0\13\30\5\0\1\30\2\0\5\30\3\0\3\30"+
    "\1\0\6\30\2\0\3\30\1\223\7\30\5\0\1\30"+
    "\2\0\5\30\3\0\2\30\1\224\1\0\6\30\2\0"+
    "\13\30\5\0\1\30\2\0\5\30\3\0\3\30\1\0"+
    "\2\30\1\225\3\30\2\0\13\30\5\0\1\30\2\0"+
    "\5\30\3\0\3\30\1\0\5\30\1\226\2\0\13\30"+
    "\5\0\1\30\2\0\5\30\3\0\1\30\1\227\1\30"+
    "\1\0\6\30\2\0\13\30\5\0\1\30\2\0\5\30"+
    "\3\0\3\30\1\0\6\30\2\0\2\30\1\230\10\30"+
    "\5\0\1\30\2\0\5\30\3\0\3\30\1\0\6\30"+
    "\2\0\2\30\1\231\10\30\5\0\1\30\2\0\5\30"+
    "\3\0\3\30\1\0\6\30\2\0\5\30\1\232\5\30"+
    "\5\0\1\30\2\0\5\30\3\0\3\30\1\0\1\30"+
    "\1\233\4\30\2\0\13\30\5\0\1\30\2\0\5\30"+
    "\3\0\3\30\1\0\6\30\2\0\5\30\1\234\5\30"+
    "\5\0\1\30\2\0\1\30\1\235\3\30\3\0\3\30"+
    "\1\0\6\30\2\0\13\30\5\0\1\30\2\0\5\30"+
    "\3\0\3\30\1\0\6\30\2\0\4\30\1\236\6\30"+
    "\5\0\1\30\2\0\5\30\3\0\1\30\1\237\1\30"+
    "\1\0\5\30\1\240\2\0\13\30\12\0\1\241\62\0"+
    "\1\242\26\0\1\243\17\0\1\244\51\0\1\245\60\0"+
    "\1\246\43\0\1\247\43\0\1\250\47\0\1\251\52\0"+
    "\1\252\25\0\1\253\52\0\1\254\61\0\1\255\35\0"+
    "\1\256\41\0\1\257\5\0\1\260\26\0\1\261\43\0"+
    "\1\30\2\0\5\30\3\0\3\30\1\0\6\30\2\0"+
    "\3\30\1\262\7\30\5\0\1\30\2\0\1\263\4\30"+
    "\3\0\3\30\1\0\6\30\2\0\13\30\5\0\1\30"+
    "\2\0\5\30\3\0\3\30\1\0\6\30\2\0\2\30"+
    "\1\264\10\30\5\0\1\30\2\0\5\30\3\0\3\30"+
    "\1\0\2\30\1\265\3\30\2\0\13\30\5\0\1\30"+
    "\2\0\5\30\3\0\3\30\1\0\1\30\1\266\4\30"+
    "\2\0\13\30\5\0\1\30\2\0\5\30\3\0\3\30"+
    "\1\0\1\30\1\267\4\30\2\0\13\30\5\0\1\30"+
    "\2\0\5\30\3\0\3\30\1\0\1\30\1\270\4\30"+
    "\2\0\13\30\5\0\1\30\2\0\5\30\3\0\3\30"+
    "\1\0\6\30\2\0\1\271\12\30\5\0\1\30\2\0"+
    "\5\30\3\0\3\30\1\0\3\30\1\272\2\30\2\0"+
    "\13\30\5\0\1\30\2\0\5\30\3\0\3\30\1\0"+
    "\3\30\1\273\2\30\2\0\13\30\5\0\1\30\2\0"+
    "\5\30\3\0\3\30\1\0\1\30\1\274\4\30\2\0"+
    "\13\30\5\0\1\30\2\0\5\30\3\0\3\30\1\0"+
    "\6\30\2\0\2\30\1\275\10\30\5\0\1\30\2\0"+
    "\5\30\3\0\3\30\1\0\4\30\1\276\1\30\2\0"+
    "\13\30\5\0\1\30\2\0\5\30\3\0\3\30\1\0"+
    "\6\30\2\0\6\30\1\277\4\30\5\0\1\30\2\0"+
    "\5\30\3\0\3\30\1\0\6\30\2\0\4\30\1\300"+
    "\6\30\5\0\1\30\2\0\5\30\3\0\3\30\1\0"+
    "\6\30\2\0\4\30\1\301\6\30\5\0\1\30\2\0"+
    "\5\30\3\0\3\30\1\0\1\30\1\302\4\30\2\0"+
    "\13\30\5\0\1\30\2\0\5\30\3\0\3\30\1\0"+
    "\1\30\1\303\4\30\2\0\13\30\5\0\1\30\2\0"+
    "\5\30\3\0\3\30\1\0\6\30\2\0\4\30\1\304"+
    "\6\30\5\0\1\30\2\0\5\30\3\0\3\30\1\0"+
    "\6\30\2\0\1\305\1\306\11\30\5\0\1\30\2\0"+
    "\5\30\3\0\3\30\1\0\1\30\1\307\4\30\2\0"+
    "\13\30\5\0\1\30\2\0\5\30\3\0\3\30\1\0"+
    "\2\30\1\310\3\30\2\0\13\30\5\0\1\30\2\0"+
    "\5\30\3\0\1\30\1\311\1\30\1\0\6\30\2\0"+
    "\13\30\5\0\1\30\2\0\5\30\3\0\3\30\1\0"+
    "\6\30\2\0\2\30\1\312\10\30\6\0\1\313\74\0"+
    "\1\314\50\0\1\315\52\0\1\316\12\0\1\317\76\0"+
    "\1\320\35\0\1\321\27\0\1\322\46\0\1\323\62\0"+
    "\1\324\52\0\1\325\56\0\1\326\46\0\1\327\50\0"+
    "\1\330\37\0\1\331\43\0\1\332\25\0\1\30\2\0"+
    "\1\333\4\30\3\0\3\30\1\0\6\30\2\0\13\30"+
    "\5\0\1\30\2\0\5\30\3\0\3\30\1\0\3\30"+
    "\1\334\2\30\2\0\13\30\5\0\1\30\2\0\5\30"+
    "\3\0\3\30\1\0\6\30\2\0\11\30\1\335\1\30"+
    "\5\0\1\30\2\0\5\30\3\0\3\30\1\0\6\30"+
    "\2\0\2\30\1\336\10\30\5\0\1\30\2\0\5\30"+
    "\3\0\1\30\1\337\1\30\1\0\6\30\2\0\13\30"+
    "\5\0\1\30\2\0\5\30\3\0\3\30\1\0\6\30"+
    "\2\0\1\340\12\30\5\0\1\30\2\0\5\30\3\0"+
    "\3\30\1\0\6\30\2\0\2\30\1\341\10\30\5\0"+
    "\1\30\2\0\1\30\1\342\3\30\3\0\3\30\1\0"+
    "\6\30\2\0\13\30\5\0\1\30\2\0\5\30\3\0"+
    "\3\30\1\0\6\30\2\0\1\343\12\30\5\0\1\30"+
    "\2\0\5\30\3\0\3\30\1\0\6\30\2\0\2\30"+
    "\1\344\10\30\5\0\1\30\2\0\5\30\3\0\3\30"+
    "\1\0\6\30\2\0\3\30\1\345\7\30\5\0\1\30"+
    "\2\0\5\30\3\0\3\30\1\0\1\30\1\346\4\30"+
    "\2\0\13\30\5\0\1\30\2\0\5\30\3\0\3\30"+
    "\1\0\3\30\1\347\2\30\2\0\13\30\5\0\1\30"+
    "\2\0\5\30\3\0\3\30\1\0\6\30\2\0\2\30"+
    "\1\350\10\30\5\0\1\30\2\0\1\351\4\30\3\0"+
    "\3\30\1\0\6\30\2\0\13\30\5\0\1\30\2\0"+
    "\5\30\3\0\2\30\1\352\1\0\6\30\2\0\13\30"+
    "\5\0\1\30\2\0\5\30\3\0\2\30\1\353\1\0"+
    "\6\30\2\0\13\30\5\0\1\30\2\0\5\30\3\0"+
    "\2\30\1\354\1\0\6\30\2\0\13\30\5\0\1\30"+
    "\2\0\1\355\4\30\3\0\3\30\1\0\6\30\2\0"+
    "\13\30\5\0\1\30\2\0\2\30\1\356\2\30\3\0"+
    "\3\30\1\0\6\30\2\0\13\30\5\0\1\30\2\0"+
    "\5\30\3\0\3\30\1\0\2\30\1\357\3\30\2\0"+
    "\13\30\5\0\1\30\2\0\5\30\3\0\3\30\1\0"+
    "\1\30\1\360\4\30\2\0\13\30\5\0\1\30\2\0"+
    "\5\30\3\0\3\30\1\0\6\30\2\0\4\30\1\361"+
    "\6\30\10\0\1\362\44\0\1\363\66\0\1\364\45\0"+
    "\1\365\27\0\1\366\46\0\1\367\70\0\1\370\56\0"+
    "\1\371\33\0\1\372\47\0\1\373\56\0\1\374\37\0"+
    "\1\375\24\0\1\30\2\0\5\30\3\0\3\30\1\0"+
    "\6\30\2\0\1\376\12\30\5\0\1\30\2\0\5\30"+
    "\3\0\3\30\1\0\6\30\2\0\1\30\1\377\11\30"+
    "\5\0\1\30\2\0\5\30\3\0\3\30\1\0\6\30"+
    "\2\0\1\30\1\u0100\11\30\5\0\1\30\2\0\1\u0101"+
    "\4\30\3\0\3\30\1\0\6\30\2\0\13\30\5\0"+
    "\1\30\2\0\5\30\3\0\3\30\1\0\1\30\1\u0102"+
    "\4\30\2\0\13\30\5\0\1\30\2\0\5\30\3\0"+
    "\3\30\1\0\6\30\2\0\2\30\1\u0103\10\30\5\0"+
    "\1\30\2\0\5\30\3\0\3\30\1\0\6\30\2\0"+
    "\4\30\1\u0104\6\30\5\0\1\30\2\0\5\30\3\0"+
    "\3\30\1\0\6\30\2\0\11\30\1\u0105\1\30\5\0"+
    "\1\30\2\0\1\u0106\4\30\3\0\3\30\1\0\6\30"+
    "\2\0\13\30\5\0\1\30\2\0\5\30\3\0\3\30"+
    "\1\0\5\30\1\u0107\2\0\13\30\5\0\1\30\2\0"+
    "\5\30\3\0\3\30\1\0\6\30\2\0\11\30\1\u0108"+
    "\1\30\5\0\1\30\2\0\5\30\3\0\3\30\1\0"+
    "\6\30\2\0\4\30\1\u0109\6\30\5\0\1\30\2\0"+
    "\5\30\3\0\3\30\1\0\2\30\1\u010a\3\30\2\0"+
    "\13\30\5\0\1\30\2\0\5\30\3\0\3\30\1\0"+
    "\6\30\2\0\4\30\1\u010b\6\30\5\0\1\30\2\0"+
    "\5\30\3\0\3\30\1\0\4\30\1\u010c\1\30\2\0"+
    "\13\30\5\0\1\30\2\0\5\30\3\0\3\30\1\0"+
    "\3\30\1\u010d\2\30\2\0\13\30\5\0\1\30\2\0"+
    "\5\30\3\0\3\30\1\0\5\30\1\u010e\2\0\13\30"+
    "\5\0\1\30\2\0\5\30\3\0\3\30\1\0\3\30"+
    "\1\u010f\2\30\2\0\13\30\27\0\1\u0110\55\0\1\u0111"+
    "\31\0\1\u0112\64\0\1\u0113\45\0\1\u0114\20\0\1\u0115"+
    "\64\0\1\u0116\60\0\1\u0117\36\0\1\u0118\23\0\1\30"+
    "\2\0\5\30\3\0\3\30\1\0\1\30\1\u0119\4\30"+
    "\2\0\13\30\5\0\1\30\2\0\5\30\3\0\3\30"+
    "\1\0\6\30\2\0\2\30\1\u011a\10\30\5\0\1\30"+
    "\2\0\5\30\3\0\3\30\1\0\1\30\1\u011b\4\30"+
    "\2\0\13\30\5\0\1\30\2\0\5\30\3\0\3\30"+
    "\1\0\3\30\1\u011c\2\30\2\0\13\30\5\0\1\30"+
    "\2\0\5\30\3\0\3\30\1\0\5\30\1\u011d\2\0"+
    "\13\30\5\0\1\30\2\0\5\30\3\0\3\30\1\0"+
    "\6\30\2\0\2\30\1\u011e\10\30\5\0\1\30\2\0"+
    "\5\30\3\0\3\30\1\0\6\30\2\0\1\30\1\u011f"+
    "\11\30\5\0\1\30\2\0\5\30\3\0\3\30\1\0"+
    "\6\30\2\0\1\u0120\12\30\5\0\1\30\2\0\5\30"+
    "\3\0\3\30\1\0\6\30\2\0\1\30\1\u0121\11\30"+
    "\5\0\1\30\2\0\5\30\3\0\2\30\1\u0122\1\0"+
    "\6\30\2\0\13\30\5\0\1\30\2\0\5\30\3\0"+
    "\3\30\1\0\4\30\1\u0123\1\30\2\0\13\30\5\0"+
    "\1\30\2\0\5\30\3\0\3\30\1\0\2\30\1\u0124"+
    "\3\30\2\0\13\30\5\0\1\30\2\0\5\30\3\0"+
    "\3\30\1\0\6\30\2\0\1\30\1\u0125\11\30\5\0"+
    "\1\30\2\0\5\30\3\0\3\30\1\0\5\30\1\u0126"+
    "\2\0\13\30\5\0\1\30\2\0\5\30\3\0\3\30"+
    "\1\0\6\30\2\0\2\30\1\u0127\10\30\5\0\1\30"+
    "\2\0\5\30\3\0\3\30\1\0\5\30\1\u0128\2\0"+
    "\13\30\35\0\1\u0129\21\0\1\u012a\63\0\1\u012b\31\0"+
    "\1\u012c\103\0\1\u012d\41\0\1\u012e\14\0\1\u012f\67\0"+
    "\1\u0130\50\0\1\u0131\22\0\1\30\2\0\5\30\3\0"+
    "\3\30\1\0\3\30\1\u0132\2\30\2\0\13\30\5\0"+
    "\1\30\2\0\5\30\3\0\3\30\1\0\5\30\1\u0133"+
    "\2\0\13\30\5\0\1\30\2\0\5\30\3\0\3\30"+
    "\1\0\6\30\2\0\2\30\1\u0134\10\30\5\0\1\30"+
    "\2\0\5\30\3\0\3\30\1\0\1\30\1\u0135\4\30"+
    "\2\0\13\30\5\0\1\30\2\0\5\30\3\0\3\30"+
    "\1\0\1\30\1\u0136\4\30\2\0\13\30\5\0\1\30"+
    "\2\0\5\30\3\0\3\30\1\0\1\30\1\u0137\4\30"+
    "\2\0\13\30\5\0\1\30\2\0\5\30\3\0\3\30"+
    "\1\0\1\30\1\u0138\4\30\2\0\13\30\5\0\1\30"+
    "\2\0\5\30\3\0\3\30\1\0\2\30\1\u0139\3\30"+
    "\2\0\13\30\5\0\1\30\2\0\5\30\3\0\3\30"+
    "\1\0\1\30\1\u013a\4\30\2\0\13\30\5\0\1\30"+
    "\2\0\5\30\3\0\3\30\1\0\1\30\1\u013b\4\30"+
    "\2\0\13\30\5\0\1\30\2\0\5\30\3\0\3\30"+
    "\1\0\1\30\1\u013c\4\30\2\0\13\30\36\0\1\u013d"+
    "\37\0\1\u013e\50\0\1\u013f\51\0\1\u0140\47\0\1\u0141"+
    "\33\0\1\u0142\55\0\1\u0143\47\0\1\u0144\21\0\1\30"+
    "\2\0\5\30\3\0\3\30\1\0\4\30\1\u0145\1\30"+
    "\2\0\13\30\5\0\1\30\2\0\5\30\3\0\3\30"+
    "\1\0\6\30\2\0\6\30\1\u0146\4\30\5\0\1\30"+
    "\2\0\5\30\3\0\3\30\1\0\4\30\1\u0147\1\30"+
    "\2\0\13\30\5\0\1\30\2\0\1\u0148\4\30\3\0"+
    "\3\30\1\0\6\30\2\0\13\30\5\0\1\30\2\0"+
    "\1\30\1\u0149\3\30\3\0\3\30\1\0\6\30\2\0"+
    "\13\30\5\0\1\30\2\0\1\u014a\4\30\3\0\3\30"+
    "\1\0\6\30\2\0\13\30\27\0\1\u014b\50\0\1\u014c"+
    "\53\0\1\u014d\35\0\1\u014e\46\0\1\u014f\27\0\1\u0150"+
    "\65\0\1\u0151\36\0\1\u0152\36\0\1\30\2\0\5\30"+
    "\3\0\3\30\1\0\5\30\1\u0153\2\0\13\30\5\0"+
    "\1\30\2\0\2\30\1\u0154\2\30\3\0\3\30\1\0"+
    "\6\30\2\0\13\30\5\0\1\30\2\0\5\30\3\0"+
    "\3\30\1\0\6\30\2\0\2\30\1\u0155\10\30\5\0"+
    "\1\30\2\0\5\30\3\0\3\30\1\0\6\30\2\0"+
    "\5\30\1\u0156\5\30\30\0\1\u0157\60\0\1\u0158\12\0"+
    "\1\u0159\46\0\1\u015a\46\0\1\u015b\50\0\1\u015c\52\0"+
    "\1\u015d\37\0\1\30\2\0\5\30\3\0\3\30\1\0"+
    "\6\30\2\0\11\30\1\u015e\1\30\5\0\1\30\2\0"+
    "\5\30\3\0\3\30\1\0\6\30\2\0\11\30\1\u015f"+
    "\1\30\31\0\1\u0160\23\0\1\u0161\46\0\1\u0162\73\0"+
    "\1\u0163\20\0\1\30\2\0\5\30\3\0\3\30\1\0"+
    "\4\30\1\u0164\1\30\2\0\13\30\6\0\1\u0165\54\0"+
    "\1\u0166\37\0\1\30\2\0\2\30\1\u0167\2\30\3\0"+
    "\3\30\1\0\6\30\2\0\13\30\15\0\1\u0168\50\0"+
    "\1\u0169\35\0\1\u016a\40\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  9,  1,  9,  1,  1,  1,  1,  1,  1,  9,  1,  0,  0,  0, 
     0,  0,  0,  1,  9,  0,  0,  1,  1,  0,  0,  0,  1,  0,  0,  0, 
     0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  0,  0,  0,  9,  0, 
     0,  9,  9,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  0,  9,  0,  0,  9,  9,  0,  0,  0,  0,  0,  0,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  9,  0, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0, 
     0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  9, 
     0,  0,  1,  1,  1,  1,  0,  0,  9,  9,  9,  0,  0,  1,  1,  0, 
     9,  9,  0,  1,  9,  0,  1,  0,  0,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[11817];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 294: 
          {  return symbolFactory.newSymbol("RDFS_COMMENT", RDFS_COMMENT);  }
        case 363: break;
        case 290: 
          {  return symbolFactory.newSymbol("RDFS_SEEALSO", RDFS_SEEALSO);  }
        case 364: break;
        case 103: 
          {  return symbolFactory.newSymbol("OPEN_RDF_ALT", OPEN_RDF_ALT);  }
        case 365: break;
        case 95: 
          {  return symbolFactory.newSymbol("OPEN_RDF_SEQ", OPEN_RDF_SEQ);  }
        case 366: break;
        case 88: 
          {  return symbolFactory.newSymbol("OPEN_RDF_RDF", OPEN_RDF_RDF);  }
        case 367: break;
        case 12: 
          {  return symbolFactory.newSymbol("OPEN_END_TAG", OPEN_END_TAG);  }
        case 368: break;
        case 105: 
          {  return symbolFactory.newSymbol("OPEN_RDF_BAG", OPEN_RDF_BAG);  }
        case 369: break;
        case 162: 
          {  return symbolFactory.newSymbol("CLOSE_RDF_LI", CLOSE_RDF_LI);  }
        case 370: break;
        case 308: 
          {  return symbolFactory.newSymbol("RDF_PREDICATE", RDF_PREDICATE);  }
        case 371: break;
        case 145: 
          {  return symbolFactory.newSymbol("OPEN_RDF_TYPE", OPEN_RDF_TYPE);  }
        case 372: break;
        case 202: 
          {  return symbolFactory.newSymbol("CLOSE_RDF_RDF", CLOSE_RDF_RDF);  }
        case 373: break;
        case 206: 
          {  return symbolFactory.newSymbol("CLOSE_RDF_SEQ", CLOSE_RDF_SEQ);  }
        case 374: break;
        case 209: 
          {  return symbolFactory.newSymbol("CLOSE_RDF_ALT", CLOSE_RDF_ALT);  }
        case 375: break;
        case 210: 
          {  return symbolFactory.newSymbol("CLOSE_RDF_BAG", CLOSE_RDF_BAG);  }
        case 376: break;
        case 9: 
          {  return symbolFactory.newSymbol("QUOTE", QUOTE);  }
        case 377: break;
        case 282: 
          { return symbolFactory.newSymbol("RDF_DATATYPE", RDF_DATATYPE);  }
        case 378: break;
        case 280: 
          { return symbolFactory.newSymbol("RDF_RESOURCE", RDF_RESOURCE);  }
        case 379: break;
        case 2: 
        case 6: 
        case 8: 
        case 10: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 380: break;
        case 224: 
          {  return symbolFactory.newSymbol("RDF_OBJECT", RDF_OBJECT);  }
        case 381: break;
        case 229: 
          {  return symbolFactory.newSymbol("RDFS_RANGE", RDFS_RANGE);  }
        case 382: break;
        case 233: 
          {  return symbolFactory.newSymbol("RDFS_LABEL", RDFS_LABEL);  }
        case 383: break;
        case 5: 
          {  return symbolFactory.newSymbol("OPEN_TAG", OPEN_TAG);  }
        case 384: break;
        case 361: 
          {  return symbolFactory.newSymbol("XML_VERSION", XML_VERSION);  }
        case 385: break;
        case 262: 
          {  return symbolFactory.newSymbol("RDFS_DOMAIN", RDFS_DOMAIN);  }
        case 386: break;
        case 258: 
          {  return symbolFactory.newSymbol("RDF_SUBJECT", RDF_SUBJECT);  }
        case 387: break;
        case 62: 
          { return symbolFactory.newSymbol("RDF_ID", RDF_ID);  }
        case 388: break;
        case 56: 
          {  return symbolFactory.newSymbol("OPEN_RDF_LI", OPEN_RDF_LI);  }
        case 389: break;
        case 7: 
          {  return symbolFactory.newSymbol("CLOSE_TAG", CLOSE_TAG);  }
        case 390: break;
        case 181: 
          {  return symbolFactory.newSymbol("RDF_VALUE", RDF_VALUE);  }
        case 391: break;
        case 188: 
          { return symbolFactory.newSymbol("RDF_ABOUT", RDF_ABOUT);  }
        case 392: break;
        case 358: 
          {  return symbolFactory.newSymbol("RDFS_SUBPROPERTYOF", RDFS_SUBPROPERTYOF);  }
        case 393: break;
        case 345: 
          {  return symbolFactory.newSymbol("CLOSE_RDFS_RESOURCE", CLOSE_RDFS_RESOURCE);  }
        case 394: break;
        case 310: 
          {  return symbolFactory.newSymbol("OPEN_RDFS_RESOURCE", OPEN_RDFS_RESOURCE);  }
        case 395: break;
        case 225: 
          { return symbolFactory.newSymbol("RDF_NODEID", RDF_NODEID);  }
        case 396: break;
        case 24: 
        case 28: 
          {  return symbolFactory.newSymbol("INSIDE_TEXT", INSIDE_TEXT, yytext());  }
        case 397: break;
        case 11: 
          {  return symbolFactory.newSymbol("EQUALS", EQUALS);  }
        case 398: break;
        case 352: 
          {  return symbolFactory.newSymbol("CLOSE_RDF_LANGSTRING", CLOSE_RDF_LANGSTRING);  }
        case 399: break;
        case 346: 
          { return symbolFactory.newSymbol("CLOSE_RDF_DATATYPE", CLOSE_RDF_DATATYPE);  }
        case 400: break;
        case 325: 
          {  return symbolFactory.newSymbol("OPEN_RDF_LANGSTRING", OPEN_RDF_LANGSTRING);  }
        case 401: break;
        case 311: 
          { return symbolFactory.newSymbol("OPEN_RDF_DATATYPE", OPEN_RDF_DATATYPE);  }
        case 402: break;
        case 19: 
          {  return symbolFactory.newSymbol("PROPERTY_VALUE", PROPERTY_VALUE, yytext());  }
        case 403: break;
        case 238: 
          {  return symbolFactory.newSymbol("OPEN_RDFS_CLASS", OPEN_RDFS_CLASS);  }
        case 404: break;
        case 302: 
          {  return symbolFactory.newSymbol("CLOSE_RDFS_CLASS", CLOSE_RDFS_CLASS);  }
        case 405: break;
        case 289: 
          {  return symbolFactory.newSymbol("OPEN_RDFS_LITERAL", OPEN_RDFS_LITERAL);  }
        case 406: break;
        case 23: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 104: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 133: 
        case 134: 
        case 135: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 146: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 226: 
        case 227: 
        case 228: 
        case 230: 
        case 231: 
        case 232: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 239: 
        case 240: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 259: 
        case 260: 
        case 261: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 281: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 291: 
        case 292: 
        case 293: 
        case 295: 
        case 305: 
        case 306: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 324: 
        case 326: 
        case 327: 
        case 328: 
        case 340: 
        case 341: 
        case 349: 
        case 355: 
          {  return symbolFactory.newSymbol("TAG_NAME_WITH_SCHEME", TAG_NAME_WITH_SCHEME);  }
        case 407: break;
        case 350: 
          {  return symbolFactory.newSymbol("RDFS_ISDEFINEDBY", RDFS_ISDEFINEDBY);  }
        case 408: break;
        case 47: 
          { return symbolFactory.newSymbol("RDF_N", RDF_N);  }
        case 409: break;
        case 353: 
          { return symbolFactory.newSymbol("CLOSE_RDF_CONTAINER", CLOSE_RDF_CONTAINER);  }
        case 410: break;
        case 344: 
          { return symbolFactory.newSymbol("CLOSE_RDF_STATEMENT", CLOSE_RDF_STATEMENT);  }
        case 411: break;
        case 335: 
          {  return symbolFactory.newSymbol("CLOSE_RDFS_LITERAL", CLOSE_RDFS_LITERAL);  }
        case 412: break;
        case 329: 
          { return symbolFactory.newSymbol("OPEN_RDF_CONTAINER", OPEN_RDF_CONTAINER);  }
        case 413: break;
        case 309: 
          { return symbolFactory.newSymbol("RDF_PARSETYPE", RDF_PARSETYPE);  }
        case 414: break;
        case 307: 
          { return symbolFactory.newSymbol("OPEN_RDF_STATEMENT", OPEN_RDF_STATEMENT);  }
        case 415: break;
        case 20: 
          {  return symbolFactory.newSymbol("CLOSE_SINGULAR_TAG", CLOSE_SINGULAR_TAG);  }
        case 416: break;
        case 356: 
          {  return symbolFactory.newSymbol("CLOSE_RDF_DESCRIPTION", CLOSE_RDF_DESCRIPTION);  }
        case 417: break;
        case 339: 
          {  return symbolFactory.newSymbol("RDFS_SUBCLASSOF", RDFS_SUBCLASSOF);  }
        case 418: break;
        case 338: 
          {  return symbolFactory.newSymbol("OPEN_RDF_DESCRIPTION", OPEN_RDF_DESCRIPTION);  }
        case 419: break;
        case 245: 
          {  return symbolFactory.newSymbol("CLOSE_RDF_TYPE", CLOSE_RDF_TYPE);  }
        case 420: break;
        case 136: 
          { return symbolFactory.newSymbol("OPEN_RDF_LIST", OPEN_RDF_LIST);  }
        case 421: break;
        case 147: 
          { return symbolFactory.newSymbol("OPEN_RDF_HTML", OPEN_RDF_HTML);  }
        case 422: break;
        case 246: 
          { return symbolFactory.newSymbol("CLOSE_RDF_HTML", CLOSE_RDF_HTML);  }
        case 423: break;
        case 3: 
        case 4: 
          {  }
        case 424: break;
        case 242: 
          { return symbolFactory.newSymbol("CLOSE_RDF_LIST", CLOSE_RDF_LIST);  }
        case 425: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
