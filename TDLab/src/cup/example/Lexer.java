/* The following code was generated by JFlex 1.3.5 on 11/1/22, 10:15 PM */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 11/1/22, 10:15 PM from the specification file
 * <tt>file:/C:/Users/alex_/eclipse-workspace/TranslatorDesignLab/TranslatorDesignLab/TDLab/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\23\1\0\1\15"+
    "\7\0\1\0\2\0\1\5\1\33\1\16\12\14\1\7\1\0\1\4"+
    "\1\32\1\6\1\17\1\0\1\52\1\46\1\43\1\35\1\5\1\36"+
    "\1\5\1\53\1\62\2\5\1\45\1\55\1\5\1\60\1\61\1\5"+
    "\1\34\1\50\1\54\12\5\1\13\1\5\1\44\1\57\1\37\1\11"+
    "\1\25\1\12\1\47\1\5\1\27\1\63\1\5\1\22\1\21\1\31"+
    "\1\30\1\40\1\51\1\10\1\26\1\41\1\42\1\24\1\5\1\20"+
    "\1\56\1\5\uff85\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    52,   104,   156,   104,   208,   260,   312,   364,   416, 
      468,   104,   520,   572,   624,   260,   676,   728,   780,   416, 
      416,   104,   832,   884,   936,   676,   988,  1040,  1092,  1144, 
     1196,   728,  1248,  1300,  1352,  1404,  1456,  1508,  1560,  1612, 
     1664,  1716,  1768,  1820,  1872,  1924,  1976,  2028,  1300,  2080, 
     2132,  2184,  2236,  2288,  2340,  2392,  2444,  2496,  2548,  2600, 
     2652,  2704,  2756,  2808,  2860,  2912,  2964,  3016,  3068,  3120, 
     3172,  3224,   676,  3276,  3328,  3380,  3432,  3484,  3536,   104, 
     3588,  3640,  3692,  3744,  3796,  3848,  3900,  3952,  4004,  4056, 
     4108,  4160,  4212,  4264,  4316,  4368,  4420,  4472,  4524,  4576, 
     4628,  4680,  4732,  4784,  4836,  4888,  4940,  4992,  5044,  5096, 
     5148,  5200,  5252,  5304,  5356,  5408,  5460,  5512,  5564,  5616, 
     5668,  5720,   104,  5772,  5824,  5876,   104,   104,  5928,   104, 
     5980,  6032,  6084,  6136,  6188,  6240,  6292,  6344,  6396,  6448, 
     6500,  6552,  6604,  6656,  6708,  6760,  6812,  6864,  6916,  6968, 
     7020,  7072,  7124,  7176,  7228,  7280,  7332,  7384,  7436,  7488, 
     7540,  7592,  7644,  7696,  7748,  7800,  7852,  7904,  7956,  8008, 
      104,   104,  8060,   104,  8112,  8164,  8216,  8268,  8320,   104, 
     8372,  8424,  8476,  8528,  8580,  8632,  8684,  8736,  8788,  8840, 
     8892,  8944,  8996,  9048,  9100,  9152,  9204,  9256,   676,  9308, 
     9360,  9412,  9464,  9516,   676,  9568,  9620,  9672,  9724,  9776, 
     9828,  9880,  9932,  9984, 10036, 10088, 10140, 10192, 10244, 10296, 
    10348, 10400,   104, 10452, 10504, 10556,   104,   104, 10608,   104, 
    10660, 10712, 10764, 10816, 10868, 10920, 10972, 11024, 11076, 11128, 
      676,   676, 11180, 11232,   676, 11284,   676, 11336, 11388, 11440, 
    11492, 11544, 11596, 11648, 11700, 11752, 11804,   104, 11856, 11908, 
    11960, 12012,   104,   104, 12064,   104, 12116, 12168, 12220, 12272, 
    12324, 12376, 12428, 12480,   676, 12532, 12584,   676, 12636, 12688, 
    12740, 12792, 12844, 12896, 12948, 13000, 13052, 13104, 13156, 13208, 
    13260, 13312, 13364, 13416, 13468, 13520, 13572, 13624, 13676,   676, 
      676, 13728, 13780,   676, 13832, 13884, 13936,   676, 13988, 14040, 
    14092, 14144, 14196, 14248,   104, 14300, 14352, 14404, 14456, 14508, 
      104, 14560, 14612, 14664,   676,   676, 14716, 14768, 14820, 14872, 
    14924,   104,   104,   104, 14976, 15028, 15080, 15132, 15184, 15236, 
    15288, 15340, 15392, 15444, 15496, 15548,   104, 15600,   104, 15652, 
    15704, 15756, 15808, 15860, 15912,   104, 15964,   676, 16016, 16068, 
      104, 16120, 16172,   104,   104,   104, 16224, 16276, 16328,   676, 
      104, 16380,   104, 16432, 16484,   104, 16536,   676, 16588, 16640, 
      104
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\3\1\11"+
    "\4\7\1\12\1\13\1\3\3\7\1\5\6\7\1\14"+
    "\1\3\30\7\64\3\66\0\1\5\71\0\1\15\5\0"+
    "\1\16\1\17\51\0\1\20\1\0\1\21\5\20\3\0"+
    "\3\20\1\0\6\20\2\0\30\20\2\22\1\0\61\22"+
    "\5\0\1\20\1\0\1\21\1\20\1\23\3\20\3\0"+
    "\3\20\1\0\6\20\2\0\30\20\2\24\1\0\12\24"+
    "\1\25\46\24\6\0\1\26\66\0\1\27\62\0\1\30"+
    "\73\0\1\31\50\0\1\32\2\0\5\32\3\0\3\32"+
    "\1\0\6\32\2\0\30\32\2\22\1\0\1\22\1\33"+
    "\57\22\5\0\1\20\1\0\1\21\2\20\1\34\2\20"+
    "\3\0\3\20\1\0\6\20\2\0\30\20\12\0\1\35"+
    "\62\0\1\36\73\0\1\37\42\0\2\22\1\0\1\22"+
    "\1\33\11\22\1\40\45\22\5\0\1\20\1\0\1\41"+
    "\3\20\1\42\1\20\3\0\3\20\1\0\2\20\1\43"+
    "\3\20\2\0\30\20\7\0\1\44\16\0\1\45\47\0"+
    "\1\46\73\0\1\47\46\0\1\32\2\0\1\50\1\51"+
    "\3\32\3\0\3\32\1\0\1\52\1\32\1\53\1\32"+
    "\1\54\1\55\2\0\4\32\1\56\3\32\1\57\15\32"+
    "\1\60\1\32\5\0\1\20\1\0\1\21\4\20\1\61"+
    "\3\0\3\20\1\0\6\20\2\0\30\20\5\0\1\20"+
    "\1\0\1\62\5\20\3\0\3\20\1\0\6\20\2\0"+
    "\30\20\22\0\1\63\11\0\1\64\1\65\3\0\1\66"+
    "\3\0\1\67\1\70\1\0\1\71\1\0\1\72\1\73"+
    "\17\0\1\74\63\0\1\75\16\0\1\76\60\0\1\77"+
    "\45\0\1\32\2\0\5\32\3\0\3\32\1\0\1\32"+
    "\1\100\4\32\2\0\30\32\5\0\1\32\2\0\5\32"+
    "\3\0\3\32\1\0\6\32\2\0\10\32\1\101\17\32"+
    "\5\0\1\32\2\0\5\32\3\0\3\32\1\0\6\32"+
    "\2\0\10\32\1\102\17\32\5\0\1\32\2\0\5\32"+
    "\3\0\3\32\1\0\6\32\2\0\6\32\1\103\21\32"+
    "\5\0\1\32\2\0\5\32\3\0\3\32\1\0\6\32"+
    "\2\0\23\32\1\104\4\32\5\0\1\32\2\0\5\32"+
    "\3\0\3\32\1\0\4\32\1\105\1\32\2\0\30\32"+
    "\5\0\1\32\2\0\1\106\4\32\3\0\3\32\1\0"+
    "\6\32\2\0\10\32\1\107\17\32\5\0\1\32\2\0"+
    "\5\32\3\0\3\32\1\0\6\32\2\0\23\32\1\110"+
    "\4\32\5\0\1\32\2\0\5\32\3\0\3\32\1\0"+
    "\6\32\2\0\1\32\1\111\26\32\5\0\1\32\2\0"+
    "\1\112\1\113\3\32\3\0\2\32\1\114\1\0\2\32"+
    "\1\115\1\116\2\32\2\0\3\32\1\117\24\32\27\0"+
    "\1\120\14\0\1\121\54\0\1\122\53\0\1\123\114\0"+
    "\1\124\34\0\1\125\100\0\1\126\44\0\1\127\13\0"+
    "\1\130\44\0\1\131\115\0\1\132\43\0\1\133\1\134"+
    "\5\0\1\135\1\0\1\136\40\0\1\137\11\0\1\140"+
    "\1\141\3\0\1\142\3\0\1\143\1\144\1\0\1\145"+
    "\1\0\1\146\1\147\17\0\1\150\100\0\1\151\44\0"+
    "\1\32\2\0\5\32\3\0\3\32\1\0\2\32\1\152"+
    "\3\32\2\0\30\32\5\0\1\32\2\0\5\32\3\0"+
    "\3\32\1\0\6\32\2\0\5\32\1\153\22\32\5\0"+
    "\1\32\2\0\5\32\3\0\2\32\1\154\1\0\6\32"+
    "\2\0\30\32\5\0\1\32\2\0\5\32\3\0\3\32"+
    "\1\0\6\32\2\0\23\32\1\155\4\32\5\0\1\32"+
    "\2\0\5\32\3\0\3\32\1\0\6\32\2\0\27\32"+
    "\1\156\5\0\1\32\2\0\1\32\1\157\3\32\3\0"+
    "\3\32\1\0\6\32\2\0\30\32\5\0\1\32\2\0"+
    "\5\32\3\0\3\32\1\0\1\32\1\160\4\32\2\0"+
    "\30\32\5\0\1\32\2\0\1\161\4\32\3\0\3\32"+
    "\1\0\6\32\2\0\30\32\5\0\1\32\2\0\5\32"+
    "\3\0\3\32\1\0\4\32\1\162\1\32\2\0\30\32"+
    "\5\0\1\32\2\0\5\32\3\0\3\32\1\0\6\32"+
    "\2\0\10\32\1\163\17\32\5\0\1\32\2\0\5\32"+
    "\3\0\3\32\1\0\4\32\1\164\1\32\2\0\30\32"+
    "\5\0\1\32\2\0\5\32\3\0\3\32\1\0\6\32"+
    "\2\0\10\32\1\165\17\32\5\0\1\32\2\0\5\32"+
    "\3\0\3\32\1\0\1\32\1\166\4\32\2\0\6\32"+
    "\1\167\21\32\5\0\1\32\2\0\5\32\3\0\3\32"+
    "\1\0\2\32\1\170\3\32\2\0\30\32\5\0\1\32"+
    "\2\0\5\32\3\0\3\32\1\0\4\32\1\171\1\32"+
    "\2\0\30\32\31\0\1\172\70\0\1\173\53\0\1\174"+
    "\75\0\1\175\51\0\1\176\104\0\1\177\65\0\1\200"+
    "\56\0\1\201\60\0\1\202\77\0\1\203\33\0\1\204"+
    "\102\0\1\205\41\0\1\206\5\0\1\207\62\0\1\210"+
    "\63\0\1\211\14\0\1\212\54\0\1\213\53\0\1\214"+
    "\114\0\1\215\34\0\1\216\100\0\1\217\44\0\1\220"+
    "\13\0\1\221\44\0\1\222\115\0\1\223\43\0\1\224"+
    "\1\225\5\0\1\226\1\0\1\227\43\0\1\230\43\0"+
    "\1\32\2\0\5\32\3\0\3\32\1\0\4\32\1\231"+
    "\1\32\2\0\30\32\5\0\1\32\2\0\5\32\3\0"+
    "\3\32\1\0\6\32\2\0\10\32\1\232\17\32\5\0"+
    "\1\32\2\0\5\32\3\0\3\32\1\0\6\32\2\0"+
    "\6\32\1\233\21\32\5\0\1\32\2\0\5\32\3\0"+
    "\3\32\1\0\6\32\2\0\27\32\1\234\5\0\1\32"+
    "\2\0\5\32\3\0\3\32\1\0\1\32\1\235\4\32"+
    "\2\0\30\32\5\0\1\32\2\0\5\32\3\0\3\32"+
    "\1\0\1\32\1\236\4\32\2\0\30\32\5\0\1\32"+
    "\2\0\1\32\1\237\3\32\3\0\3\32\1\0\6\32"+
    "\2\0\30\32\5\0\1\32\2\0\5\32\3\0\3\32"+
    "\1\0\2\32\1\240\3\32\2\0\30\32\5\0\1\32"+
    "\2\0\5\32\3\0\3\32\1\0\6\32\2\0\6\32"+
    "\1\241\21\32\5\0\1\32\2\0\5\32\3\0\3\32"+
    "\1\0\5\32\1\242\2\0\30\32\5\0\1\32\2\0"+
    "\5\32\3\0\1\32\1\243\1\32\1\0\6\32\2\0"+
    "\30\32\5\0\1\32\2\0\5\32\3\0\3\32\1\0"+
    "\6\32\2\0\23\32\1\244\4\32\5\0\1\32\2\0"+
    "\5\32\3\0\3\32\1\0\1\32\1\245\4\32\2\0"+
    "\30\32\5\0\1\32\2\0\5\32\3\0\3\32\1\0"+
    "\6\32\2\0\23\32\1\246\4\32\5\0\1\32\2\0"+
    "\5\32\3\0\3\32\1\0\6\32\2\0\1\32\1\247"+
    "\26\32\5\0\1\32\2\0\5\32\3\0\1\32\1\250"+
    "\1\32\1\0\6\32\2\0\30\32\47\0\1\251\53\0"+
    "\1\252\51\0\1\253\77\0\1\254\63\0\1\255\67\0"+
    "\1\256\44\0\1\257\76\0\1\260\66\0\1\261\50\0"+
    "\1\262\73\0\1\263\30\0\1\264\106\0\1\265\70\0"+
    "\1\266\53\0\1\267\75\0\1\270\51\0\1\271\104\0"+
    "\1\272\65\0\1\273\56\0\1\274\60\0\1\275\77\0"+
    "\1\276\33\0\1\277\102\0\1\300\41\0\1\301\5\0"+
    "\1\302\62\0\1\303\44\0\1\304\60\0\1\32\2\0"+
    "\5\32\3\0\3\32\1\0\6\32\2\0\6\32\1\305"+
    "\21\32\5\0\1\32\2\0\5\32\3\0\3\32\1\0"+
    "\6\32\2\0\5\32\1\306\22\32\5\0\1\32\2\0"+
    "\5\32\3\0\3\32\1\0\1\32\1\307\4\32\2\0"+
    "\30\32\5\0\1\32\2\0\5\32\3\0\3\32\1\0"+
    "\1\32\1\310\4\32\2\0\30\32\5\0\1\32\2\0"+
    "\5\32\3\0\3\32\1\0\6\32\2\0\3\32\1\311"+
    "\24\32\5\0\1\32\2\0\5\32\3\0\3\32\1\0"+
    "\6\32\2\0\26\32\1\312\1\32\5\0\1\32\2\0"+
    "\5\32\3\0\3\32\1\0\3\32\1\313\2\32\2\0"+
    "\30\32\5\0\1\32\2\0\5\32\3\0\3\32\1\0"+
    "\1\32\1\314\4\32\2\0\30\32\5\0\1\32\2\0"+
    "\5\32\3\0\3\32\1\0\6\32\2\0\5\32\1\315"+
    "\22\32\5\0\1\32\2\0\5\32\3\0\3\32\1\0"+
    "\6\32\2\0\13\32\1\316\14\32\5\0\1\32\2\0"+
    "\5\32\3\0\3\32\1\0\6\32\2\0\10\32\1\317"+
    "\17\32\5\0\1\32\2\0\5\32\3\0\3\32\1\0"+
    "\1\32\1\320\4\32\2\0\30\32\5\0\1\32\2\0"+
    "\5\32\3\0\3\32\1\0\6\32\2\0\16\32\1\321"+
    "\11\32\5\0\1\32\2\0\5\32\3\0\3\32\1\0"+
    "\6\32\2\0\7\32\1\322\15\32\1\323\2\32\5\0"+
    "\1\32\2\0\5\32\3\0\3\32\1\0\1\32\1\324"+
    "\4\32\2\0\30\32\5\0\1\32\2\0\5\32\3\0"+
    "\1\32\1\325\1\32\1\0\6\32\2\0\30\32\50\0"+
    "\1\326\23\0\1\327\100\0\1\330\66\0\1\331\77\0"+
    "\1\332\45\0\1\333\76\0\1\334\47\0\1\335\105\0"+
    "\1\336\22\0\1\337\114\0\1\340\51\0\1\341\77\0"+
    "\1\342\30\0\1\343\63\0\1\344\116\0\1\345\30\0"+
    "\1\346\122\0\1\347\44\0\1\350\76\0\1\351\66\0"+
    "\1\352\50\0\1\353\73\0\1\354\50\0\1\355\42\0"+
    "\1\32\2\0\1\356\4\32\3\0\3\32\1\0\6\32"+
    "\2\0\30\32\5\0\1\32\2\0\5\32\3\0\3\32"+
    "\1\0\6\32\2\0\22\32\1\357\5\32\5\0\1\32"+
    "\2\0\5\32\3\0\3\32\1\0\6\32\2\0\3\32"+
    "\1\360\24\32\5\0\1\32\2\0\5\32\3\0\3\32"+
    "\1\0\6\32\2\0\5\32\1\361\22\32\5\0\1\32"+
    "\2\0\5\32\3\0\3\32\1\0\6\32\2\0\1\32"+
    "\1\362\26\32\5\0\1\32\2\0\5\32\3\0\3\32"+
    "\1\0\6\32\2\0\3\32\1\363\24\32\5\0\1\32"+
    "\2\0\5\32\3\0\3\32\1\0\6\32\2\0\20\32"+
    "\1\364\7\32\5\0\1\32\2\0\5\32\3\0\3\32"+
    "\1\0\1\32\1\365\4\32\2\0\30\32\5\0\1\32"+
    "\2\0\5\32\3\0\3\32\1\0\3\32\1\366\2\32"+
    "\2\0\30\32\5\0\1\32\2\0\5\32\3\0\2\32"+
    "\1\367\1\0\6\32\2\0\30\32\5\0\1\32\2\0"+
    "\5\32\3\0\2\32\1\370\1\0\6\32\2\0\30\32"+
    "\5\0\1\32\2\0\5\32\3\0\2\32\1\371\1\0"+
    "\6\32\2\0\30\32\5\0\1\32\2\0\1\372\4\32"+
    "\3\0\3\32\1\0\6\32\2\0\30\32\5\0\1\32"+
    "\2\0\2\32\1\373\2\32\3\0\3\32\1\0\6\32"+
    "\2\0\30\32\5\0\1\32\2\0\5\32\3\0\3\32"+
    "\1\0\1\32\1\374\4\32\2\0\30\32\41\0\1\375"+
    "\51\0\1\376\55\0\1\377\104\0\1\u0100\62\0\1\u0101"+
    "\50\0\1\u0102\101\0\1\u0103\27\0\1\u0104\123\0\1\u0105"+
    "\23\0\1\u0106\61\0\1\u0107\63\0\1\u0108\102\0\1\u0109"+
    "\44\0\1\u010a\105\0\1\u010b\77\0\1\u010c\45\0\1\u010d"+
    "\76\0\1\u010e\47\0\1\u010f\65\0\1\u0110\41\0\1\32"+
    "\2\0\5\32\3\0\3\32\1\0\6\32\2\0\3\32"+
    "\1\u0111\24\32\5\0\1\32\2\0\5\32\3\0\3\32"+
    "\1\0\6\32\2\0\4\32\1\u0112\23\32\5\0\1\32"+
    "\2\0\5\32\3\0\3\32\1\0\6\32\2\0\5\32"+
    "\1\u0113\22\32\5\0\1\32\2\0\5\32\3\0\3\32"+
    "\1\0\6\32\2\0\10\32\1\u0114\17\32\5\0\1\32"+
    "\2\0\5\32\3\0\3\32\1\0\6\32\2\0\22\32"+
    "\1\u0115\5\32\5\0\1\32\2\0\5\32\3\0\3\32"+
    "\1\0\5\32\1\u0116\2\0\30\32\5\0\1\32\2\0"+
    "\5\32\3\0\3\32\1\0\2\32\1\u0117\3\32\2\0"+
    "\30\32\5\0\1\32\2\0\5\32\3\0\3\32\1\0"+
    "\6\32\2\0\10\32\1\u0118\17\32\5\0\1\32\2\0"+
    "\5\32\3\0\3\32\1\0\4\32\1\u0119\1\32\2\0"+
    "\30\32\5\0\1\32\2\0\5\32\3\0\3\32\1\0"+
    "\3\32\1\u011a\2\32\2\0\30\32\5\0\1\32\2\0"+
    "\5\32\3\0\3\32\1\0\5\32\1\u011b\2\0\30\32"+
    "\10\0\1\u011c\113\0\1\u011d\50\0\1\u011e\46\0\1\u011f"+
    "\131\0\1\u0120\34\0\1\u0121\100\0\1\u0122\60\0\1\u0123"+
    "\51\0\1\u0124\55\0\1\u0125\104\0\1\u0126\62\0\1\u0127"+
    "\50\0\1\u0128\101\0\1\u0129\27\0\1\u012a\103\0\1\u012b"+
    "\40\0\1\32\2\0\5\32\3\0\3\32\1\0\1\32"+
    "\1\u012c\4\32\2\0\30\32\5\0\1\32\2\0\5\32"+
    "\3\0\3\32\1\0\1\32\1\u012d\4\32\2\0\30\32"+
    "\5\0\1\32\2\0\5\32\3\0\3\32\1\0\6\32"+
    "\2\0\5\32\1\u012e\22\32\5\0\1\32\2\0\5\32"+
    "\3\0\3\32\1\0\6\32\2\0\4\32\1\u012f\23\32"+
    "\5\0\1\32\2\0\5\32\3\0\3\32\1\0\4\32"+
    "\1\u0130\1\32\2\0\30\32\5\0\1\32\2\0\5\32"+
    "\3\0\3\32\1\0\2\32\1\u0131\3\32\2\0\30\32"+
    "\5\0\1\32\2\0\5\32\3\0\3\32\1\0\6\32"+
    "\2\0\4\32\1\u0132\23\32\5\0\1\32\2\0\5\32"+
    "\3\0\3\32\1\0\5\32\1\u0133\2\0\30\32\5\0"+
    "\1\32\2\0\5\32\3\0\3\32\1\0\6\32\2\0"+
    "\5\32\1\u0134\22\32\27\0\1\u0135\75\0\1\u0136\53\0"+
    "\1\u0137\71\0\1\u0138\64\0\1\u0139\54\0\1\u013a\54\0"+
    "\1\u013b\51\0\1\u013c\113\0\1\u013d\50\0\1\u013e\46\0"+
    "\1\u013f\131\0\1\u0140\13\0\1\u0141\104\0\1\u0142\100\0"+
    "\1\u0143\50\0\1\u0144\37\0\1\32\2\0\5\32\3\0"+
    "\3\32\1\0\1\32\1\u0145\4\32\2\0\30\32\5\0"+
    "\1\32\2\0\5\32\3\0\3\32\1\0\1\32\1\u0146"+
    "\4\32\2\0\30\32\5\0\1\32\2\0\5\32\3\0"+
    "\3\32\1\0\2\32\1\u0147\3\32\2\0\30\32\5\0"+
    "\1\32\2\0\5\32\3\0\3\32\1\0\1\32\1\u0148"+
    "\4\32\2\0\30\32\5\0\1\32\2\0\5\32\3\0"+
    "\3\32\1\0\1\32\1\u0149\4\32\2\0\30\32\31\0"+
    "\1\u014a\61\0\1\u014b\75\0\1\u014c\47\0\1\u014d\63\0"+
    "\1\u014e\63\0\1\u014f\65\0\1\u0150\75\0\1\u0151\53\0"+
    "\1\u0152\71\0\1\u0153\64\0\1\u0154\54\0\1\u0155\54\0"+
    "\1\u0156\73\0\1\u0157\36\0\1\32\2\0\5\32\3\0"+
    "\3\32\1\0\6\32\2\0\24\32\1\u0158\3\32\5\0"+
    "\1\32\2\0\1\u0159\4\32\3\0\3\32\1\0\6\32"+
    "\2\0\30\32\5\0\1\32\2\0\1\32\1\u015a\3\32"+
    "\3\0\3\32\1\0\6\32\2\0\30\32\47\0\1\u015b"+
    "\44\0\1\u015c\43\0\1\u015d\104\0\1\u015e\61\0\1\u015f"+
    "\75\0\1\u0160\47\0\1\u0161\63\0\1\u0162\63\0\1\u0163"+
    "\44\0\1\u0164\72\0\1\u0165\53\0\1\32\2\0\2\32"+
    "\1\u0166\2\32\3\0\3\32\1\0\6\32\2\0\30\32"+
    "\5\0\1\32\2\0\5\32\3\0\3\32\1\0\6\32"+
    "\2\0\5\32\1\u0167\22\32\5\0\1\32\2\0\5\32"+
    "\3\0\3\32\1\0\6\32\2\0\12\32\1\u0168\15\32"+
    "\31\0\1\u0169\101\0\1\u016a\44\0\1\u016b\41\0\1\u016c"+
    "\63\0\1\u016d\63\0\1\u016e\65\0\1\u016f\67\0\1\u0170"+
    "\54\0\1\32\2\0\5\32\3\0\3\32\1\0\6\32"+
    "\2\0\22\32\1\u0171\5\32\5\0\1\32\2\0\5\32"+
    "\3\0\3\32\1\0\6\32\2\0\22\32\1\u0172\5\32"+
    "\6\0\1\u0173\106\0\1\u0174\40\0\1\u0175\110\0\1\u0176"+
    "\35\0\1\32\2\0\5\32\3\0\3\32\1\0\6\32"+
    "\2\0\24\32\1\u0177\3\32\6\0\1\u0178\71\0\1\u0179"+
    "\54\0\1\32\2\0\2\32\1\u017a\2\32\3\0\3\32"+
    "\1\0\6\32\2\0\30\32\15\0\1\u017b\65\0\1\u017c"+
    "\52\0\1\u017d\55\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  9,  1,  9,  1,  1,  1,  1,  1,  1,  9,  0,  1,  0,  0, 
     0,  0,  0,  0,  1,  9,  0,  0,  0,  1,  1,  0,  0,  0,  0,  1, 
     0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  9,  0,  0,  0,  9,  9, 
     0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  9,  9,  0,  9,  0,  0, 
     0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0, 
     0,  0,  9,  9,  0,  9,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0, 
     0,  9,  0,  0,  0,  0,  9,  9,  0,  9,  0,  0,  0,  0,  0,  0, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0, 
     9,  0,  0,  0,  1,  1,  1,  1,  1,  0,  0,  9,  9,  9,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  9,  0,  9,  0,  0,  0, 
     0,  0,  0,  9,  0,  1,  1,  1,  9,  0,  0,  9,  9,  9,  0,  0, 
     1,  1,  9,  0,  9,  0,  1,  9,  0,  1,  0,  0,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[16692];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 146) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 307: 
          {  return symbolFactory.newSymbol("RDFS_COMMENT", RDFS_COMMENT);  }
        case 382: break;
        case 303: 
          {  return symbolFactory.newSymbol("RDFS_SEEALSO", RDFS_SEEALSO);  }
        case 383: break;
        case 127: 
          {  return symbolFactory.newSymbol("OPEN_RDF_SEQ", OPEN_RDF_SEQ);  }
        case 384: break;
        case 126: 
          {  return symbolFactory.newSymbol("OPEN_RDF_BAG", OPEN_RDF_BAG);  }
        case 385: break;
        case 122: 
          {  return symbolFactory.newSymbol("OPEN_RDF_RDF", OPEN_RDF_RDF);  }
        case 386: break;
        case 13: 
          {  return symbolFactory.newSymbol("OPEN_END_TAG", OPEN_END_TAG);  }
        case 387: break;
        case 129: 
          {  return symbolFactory.newSymbol("OPEN_RDF_ALT", OPEN_RDF_ALT);  }
        case 388: break;
        case 179: 
          {  return symbolFactory.newSymbol("CLOSE_RDF_LI", CLOSE_RDF_LI);  }
        case 389: break;
        case 324: 
          {  return symbolFactory.newSymbol("RDF_PREDICATE", RDF_PREDICATE);  }
        case 390: break;
        case 170: 
          {  return symbolFactory.newSymbol("OPEN_RDF_TYPE", OPEN_RDF_TYPE);  }
        case 391: break;
        case 222: 
          {  return symbolFactory.newSymbol("CLOSE_RDF_RDF", CLOSE_RDF_RDF);  }
        case 392: break;
        case 226: 
          {  return symbolFactory.newSymbol("CLOSE_RDF_BAG", CLOSE_RDF_BAG);  }
        case 393: break;
        case 227: 
          {  return symbolFactory.newSymbol("CLOSE_RDF_SEQ", CLOSE_RDF_SEQ);  }
        case 394: break;
        case 229: 
          {  return symbolFactory.newSymbol("CLOSE_RDF_ALT", CLOSE_RDF_ALT);  }
        case 395: break;
        case 9: 
          {  return symbolFactory.newSymbol("QUOTE", QUOTE);  }
        case 396: break;
        case 300: 
          { return symbolFactory.newSymbol("RDF_DATATYPE", RDF_DATATYPE);  }
        case 397: break;
        case 299: 
          { return symbolFactory.newSymbol("RDF_RESOURCE", RDF_RESOURCE);  }
        case 398: break;
        case 2: 
        case 6: 
        case 8: 
        case 10: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 399: break;
        case 240: 
          {  return symbolFactory.newSymbol("RDF_OBJECT", RDF_OBJECT);  }
        case 400: break;
        case 244: 
          {  return symbolFactory.newSymbol("RDFS_RANGE", RDFS_RANGE);  }
        case 401: break;
        case 246: 
          {  return symbolFactory.newSymbol("RDFS_LABEL", RDFS_LABEL);  }
        case 402: break;
        case 5: 
          {  return symbolFactory.newSymbol("OPEN_TAG", OPEN_TAG);  }
        case 403: break;
        case 380: 
          {  return symbolFactory.newSymbol("XML_VERSION", XML_VERSION);  }
        case 404: break;
        case 277: 
          {  return symbolFactory.newSymbol("RDFS_DOMAIN", RDFS_DOMAIN);  }
        case 405: break;
        case 274: 
          {  return symbolFactory.newSymbol("RDF_SUBJECT", RDF_SUBJECT);  }
        case 406: break;
        case 72: 
          { return symbolFactory.newSymbol("RDF_ID", RDF_ID);  }
        case 407: break;
        case 79: 
          {  return symbolFactory.newSymbol("OPEN_RDF_LI", OPEN_RDF_LI);  }
        case 408: break;
        case 7: 
          {  return symbolFactory.newSymbol("CLOSE_TAG", CLOSE_TAG);  }
        case 409: break;
        case 198: 
          {  return symbolFactory.newSymbol("RDF_VALUE", RDF_VALUE);  }
        case 410: break;
        case 204: 
          { return symbolFactory.newSymbol("RDF_ABOUT", RDF_ABOUT);  }
        case 411: break;
        case 377: 
          {  return symbolFactory.newSymbol("RDFS_SUBPROPERTYOF", RDFS_SUBPROPERTYOF);  }
        case 412: break;
        case 364: 
          {  return symbolFactory.newSymbol("CLOSE_RDFS_RESOURCE", CLOSE_RDFS_RESOURCE);  }
        case 413: break;
        case 332: 
          {  return symbolFactory.newSymbol("OPEN_RDFS_RESOURCE", OPEN_RDFS_RESOURCE);  }
        case 414: break;
        case 241: 
          { return symbolFactory.newSymbol("RDF_NODEID", RDF_NODEID);  }
        case 415: break;
        case 26: 
        case 31: 
          {  return symbolFactory.newSymbol("INSIDE_TEXT", INSIDE_TEXT, yytext());  }
        case 416: break;
        case 11: 
          {  return symbolFactory.newSymbol("EQUALS", EQUALS);  }
        case 417: break;
        case 370: 
          {  return symbolFactory.newSymbol("CLOSE_RDF_LANGSTRING", CLOSE_RDF_LANGSTRING);  }
        case 418: break;
        case 365: 
          { return symbolFactory.newSymbol("CLOSE_RDF_DATATYPE", CLOSE_RDF_DATATYPE);  }
        case 419: break;
        case 346: 
          {  return symbolFactory.newSymbol("OPEN_RDF_LANGSTRING", OPEN_RDF_LANGSTRING);  }
        case 420: break;
        case 333: 
          { return symbolFactory.newSymbol("OPEN_RDF_DATATYPE", OPEN_RDF_DATATYPE);  }
        case 421: break;
        case 20: 
          {  return symbolFactory.newSymbol("PROPERTY_VALUE", PROPERTY_VALUE, yytext());  }
        case 422: break;
        case 257: 
          {  return symbolFactory.newSymbol("OPEN_RDFS_CLASS", OPEN_RDFS_CLASS);  }
        case 423: break;
        case 320: 
          {  return symbolFactory.newSymbol("CLOSE_RDFS_CLASS", CLOSE_RDFS_CLASS);  }
        case 424: break;
        case 314: 
          {  return symbolFactory.newSymbol("OPEN_RDFS_LITERAL", OPEN_RDFS_LITERAL);  }
        case 425: break;
        case 25: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 196: 
        case 197: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 237: 
        case 238: 
        case 239: 
        case 242: 
        case 243: 
        case 245: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 272: 
        case 273: 
        case 275: 
        case 276: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 301: 
        case 302: 
        case 304: 
        case 305: 
        case 306: 
        case 326: 
        case 327: 
        case 328: 
        case 343: 
        case 344: 
        case 345: 
        case 358: 
        case 359: 
        case 368: 
        case 374: 
          {  return symbolFactory.newSymbol("TAG_NAME_WITH_SCHEME", TAG_NAME_WITH_SCHEME);  }
        case 426: break;
        case 369: 
          {  return symbolFactory.newSymbol("RDFS_ISDEFINEDBY", RDFS_ISDEFINEDBY);  }
        case 427: break;
        case 48: 
          { return symbolFactory.newSymbol("RDF_N", RDF_N);  }
        case 428: break;
        case 372: 
          { return symbolFactory.newSymbol("CLOSE_RDF_CONTAINER", CLOSE_RDF_CONTAINER);  }
        case 429: break;
        case 363: 
          { return symbolFactory.newSymbol("CLOSE_RDF_STATEMENT", CLOSE_RDF_STATEMENT);  }
        case 430: break;
        case 355: 
          {  return symbolFactory.newSymbol("CLOSE_RDFS_LITERAL", CLOSE_RDFS_LITERAL);  }
        case 431: break;
        case 348: 
          { return symbolFactory.newSymbol("OPEN_RDF_CONTAINER", OPEN_RDF_CONTAINER);  }
        case 432: break;
        case 331: 
          { return symbolFactory.newSymbol("OPEN_RDF_STATEMENT", OPEN_RDF_STATEMENT);  }
        case 433: break;
        case 325: 
          { return symbolFactory.newSymbol("RDF_PARSETYPE", RDF_PARSETYPE);  }
        case 434: break;
        case 21: 
          {  return symbolFactory.newSymbol("CLOSE_SINGULAR_TAG", CLOSE_SINGULAR_TAG);  }
        case 435: break;
        case 375: 
          {  return symbolFactory.newSymbol("CLOSE_RDF_DESCRIPTION", CLOSE_RDF_DESCRIPTION);  }
        case 436: break;
        case 360: 
          {  return symbolFactory.newSymbol("OPEN_RDF_DESCRIPTION", OPEN_RDF_DESCRIPTION);  }
        case 437: break;
        case 357: 
          {  return symbolFactory.newSymbol("RDFS_SUBCLASSOF", RDFS_SUBCLASSOF);  }
        case 438: break;
        case 262: 
          {  return symbolFactory.newSymbol("CLOSE_RDF_TYPE", CLOSE_RDF_TYPE);  }
        case 439: break;
        case 171: 
          { return symbolFactory.newSymbol("OPEN_RDF_LIST", OPEN_RDF_LIST);  }
        case 440: break;
        case 173: 
          { return symbolFactory.newSymbol("OPEN_RDF_HTML", OPEN_RDF_HTML);  }
        case 441: break;
        case 265: 
          { return symbolFactory.newSymbol("CLOSE_RDF_HTML", CLOSE_RDF_HTML);  }
        case 442: break;
        case 3: 
        case 4: 
          {  }
        case 443: break;
        case 263: 
          { return symbolFactory.newSymbol("CLOSE_RDF_LIST", CLOSE_RDF_LIST);  }
        case 444: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
