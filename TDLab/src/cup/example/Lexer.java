/* The following code was generated by JFlex 1.3.5 on 10/26/22, 10:23 PM */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 10/26/22, 10:23 PM from the specification file
 * <tt>file:/C:/Users/alex_/eclipse-workspace/TDLab/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\15"+
    "\7\0\1\0\2\0\1\5\1\0\1\16\12\14\1\7\1\0\1\4"+
    "\1\17\1\6\2\0\1\44\1\40\1\34\1\21\1\5\1\22\1\5"+
    "\1\45\1\55\2\5\1\37\1\47\1\5\1\53\1\54\1\5\1\20"+
    "\1\42\1\46\12\5\1\13\1\5\1\36\1\52\1\25\1\11\1\23"+
    "\1\12\1\41\1\5\1\26\1\56\1\5\1\35\1\50\1\32\1\31"+
    "\1\27\1\43\1\10\1\24\1\30\1\33\1\57\2\5\1\51\1\5"+
    "\uff85\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    48,    96,   144,    96,   192,   240,    96,   288,   336, 
       96,   384,   432,   240,   480,   528,   336,   336,   576,   624, 
      480,   672,   720,   768,   816,   864,   912,   960,  1008,  1056, 
     1104,  1152,  1200,  1248,  1296,  1344,  1392,  1440,  1488,  1536, 
      864,  1584,  1632,  1680,  1728,  1776,  1824,  1872,  1920,  1968, 
     2016,  2064,  2112,  2160,  2208,  2256,  2304,  2352,  2400,  2448, 
     2496,  2544,  2592,  2640,  2688,  2736,  2784,  2832,  2880,  2928, 
     2976,  3024,    96,  3072,  3120,  3168,  3216,  3264,  3312,  3360, 
     3408,  3456,  3504,  3552,  3600,  3648,  3696,  3744,  3792,  3840, 
     3888,  3936,  3984,  4032,  4080,  4128,  4176,  4224,  4272,  4320, 
     4368,  4416,    96,  4464,  4512,  4560,  4608,  4656,  4704,  4752, 
     4800,    96,  4848,  4896,  4944,    96,    96,  4992,    96,  5040, 
     5088,  5136,  5184,  5232,  5280,  5328,  5376,  5424,  5472,  5520, 
     5568,  5616,  5664,  5712,  5760,  5808,  5856,  5904,  5952,  6000, 
     6048,  6096,  6144,  6192,  6240,  6288,  6336,  6384,  6432,  6480, 
     6528,  6576,  6624,  6672,  6720,  6768,  6816,  6864,    96,  6912, 
       96,  6960,  7008,  7056,  7104,  7152,  7200,  7248,    96,  7296, 
     7344,  7392,  7440,  7488,  7536,  7584,  7632,  7680,  7728,  7776, 
     7824,  7872,  7920,  7968,  8016,  8064,    96,  8112,  8160,  8208, 
     8256,  8304,  8352,  8400,  8448,  8496,  8544,  8592,  8640,  8688, 
     8736,  8784,  8832,  8880,  8928,  8976,  9024,    96,  9072,  9120, 
     9168,    96,    96,  9216,    96,  9264,  9312,  9360,  9408,  9456, 
     9504,  9552,  9600,  9648,  9696,  9744,  9792,  9840,    96,    96, 
     9888,  9936,  9984, 10032, 10080, 10128, 10176, 10224, 10272, 10320, 
    10368, 10416, 10464, 10512,    96, 10560, 10608, 10656,    96, 10704, 
       96, 10752, 10800, 10848, 10896, 10944, 10992, 11040, 11088, 11136, 
    11184,    96,    96,    96, 11232, 11280, 11328, 11376, 11424, 11472, 
       96, 11520, 11568, 11616, 11664, 11712, 11760, 11808, 11856, 11904, 
    11952, 12000, 12048, 12096, 12144, 12192, 12240, 12288,    96, 12336, 
    12384,    96, 12432, 12480, 12528, 12576, 12624, 12672, 12720, 12768, 
    12816, 12864, 12912,    96, 12960, 13008, 13056, 13104, 13152, 13200, 
       96, 13248,    96,    96, 13296, 13344,    96, 13392, 13440,    96, 
    13488, 13536, 13584,    96,    96,    96, 13632, 13680, 13728, 13776, 
    13824, 13872, 13920, 13968,    96,    96, 14016, 14064, 14112, 14160, 
       96,    96, 14208, 14256, 14304, 14352, 14400, 14448,    96, 14496, 
    14544, 14592,    96, 14640, 14688,    96,    96,    96, 14736,    96, 
    14784, 14832, 14880,    96,    96, 14928,    96,    96, 14976,    96
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\3\1\11"+
    "\4\7\1\12\1\3\1\13\40\7\60\3\62\0\1\5"+
    "\65\0\1\14\5\0\1\15\46\0\1\16\1\0\1\17"+
    "\5\16\3\0\40\16\5\0\1\16\1\0\1\17\1\16"+
    "\1\20\3\16\3\0\40\16\2\21\1\0\12\21\1\22"+
    "\42\21\11\0\1\23\56\0\1\24\54\0\1\25\2\0"+
    "\5\25\3\0\40\25\5\0\1\16\1\0\1\17\2\16"+
    "\1\26\2\16\3\0\40\16\12\0\1\27\56\0\1\30"+
    "\53\0\1\16\1\0\1\31\3\16\1\32\1\16\3\0"+
    "\4\16\1\33\33\16\7\0\1\34\14\0\1\35\45\0"+
    "\1\36\52\0\1\25\2\0\1\37\1\40\3\25\3\0"+
    "\4\25\1\41\2\25\1\42\1\43\1\44\1\45\3\25"+
    "\1\46\16\25\1\47\1\25\1\50\5\0\1\16\1\0"+
    "\1\17\4\16\1\51\3\0\40\16\5\0\1\16\1\0"+
    "\1\52\5\16\3\0\40\16\20\0\1\53\1\54\13\0"+
    "\1\55\1\0\1\56\1\57\1\0\1\60\1\0\1\61"+
    "\1\62\21\0\1\63\57\0\1\64\14\0\1\65\40\0"+
    "\1\25\2\0\5\25\3\0\3\25\1\66\34\25\5\0"+
    "\1\25\2\0\5\25\3\0\16\25\1\67\21\25\5\0"+
    "\1\25\2\0\5\25\3\0\13\25\1\70\24\25\5\0"+
    "\1\25\2\0\1\71\4\25\3\0\16\25\1\72\21\25"+
    "\5\0\1\25\2\0\5\25\3\0\31\25\1\73\6\25"+
    "\5\0\1\25\2\0\5\25\3\0\32\25\1\74\5\25"+
    "\5\0\1\25\2\0\5\25\3\0\11\25\1\75\26\25"+
    "\5\0\1\25\2\0\5\25\3\0\32\25\1\76\5\25"+
    "\5\0\1\25\2\0\5\25\3\0\1\25\1\77\36\25"+
    "\5\0\1\25\2\0\5\25\3\0\16\25\1\100\21\25"+
    "\5\0\1\25\2\0\1\101\1\102\3\25\3\0\4\25"+
    "\1\103\1\104\1\105\6\25\1\106\22\25\21\0\1\107"+
    "\61\0\1\110\62\0\1\111\7\0\1\112\47\0\1\113"+
    "\67\0\1\114\44\0\1\115\4\0\1\116\64\0\1\117"+
    "\70\0\1\120\31\0\1\121\1\122\12\0\1\123\2\0"+
    "\1\124\40\0\1\125\1\126\13\0\1\127\1\0\1\130"+
    "\1\131\1\0\1\132\1\0\1\133\1\134\21\0\1\135"+
    "\55\0\1\25\2\0\5\25\3\0\4\25\1\136\33\25"+
    "\5\0\1\25\2\0\5\25\3\0\10\25\1\137\27\25"+
    "\5\0\1\25\2\0\5\25\3\0\32\25\1\140\5\25"+
    "\5\0\1\25\2\0\5\25\3\0\3\25\1\141\34\25"+
    "\5\0\1\25\2\0\1\142\4\25\3\0\40\25\5\0"+
    "\1\25\2\0\5\25\3\0\7\25\1\143\30\25\5\0"+
    "\1\25\2\0\5\25\3\0\36\25\1\144\1\25\5\0"+
    "\1\25\2\0\1\25\1\145\3\25\3\0\40\25\5\0"+
    "\1\25\2\0\5\25\3\0\11\25\1\146\26\25\5\0"+
    "\1\25\2\0\5\25\2\0\1\147\40\25\5\0\1\25"+
    "\2\0\5\25\3\0\15\25\1\150\22\25\5\0\1\25"+
    "\2\0\5\25\3\0\16\25\1\151\21\25\5\0\1\25"+
    "\2\0\5\25\3\0\11\25\1\152\26\25\5\0\1\25"+
    "\2\0\5\25\3\0\3\25\1\153\7\25\1\154\24\25"+
    "\5\0\1\25\2\0\5\25\3\0\11\25\1\155\26\25"+
    "\5\0\1\25\2\0\5\25\3\0\4\25\1\156\33\25"+
    "\5\0\1\25\2\0\5\25\3\0\16\25\1\157\21\25"+
    "\22\0\1\160\61\0\1\161\65\0\1\162\51\0\1\163"+
    "\74\0\1\164\61\0\1\165\52\0\1\166\51\0\1\167"+
    "\76\0\1\170\33\0\1\171\72\0\1\172\52\0\1\173"+
    "\3\0\1\174\50\0\1\175\52\0\1\176\61\0\1\177"+
    "\62\0\1\200\7\0\1\201\47\0\1\202\67\0\1\203"+
    "\44\0\1\204\4\0\1\205\64\0\1\206\70\0\1\207"+
    "\31\0\1\210\1\211\12\0\1\212\2\0\1\213\25\0"+
    "\1\25\2\0\5\25\3\0\11\25\1\214\26\25\5\0"+
    "\1\25\2\0\5\25\3\0\16\25\1\215\21\25\5\0"+
    "\1\25\2\0\5\25\3\0\36\25\1\216\1\25\5\0"+
    "\1\25\2\0\1\25\1\217\3\25\3\0\40\25\5\0"+
    "\1\25\2\0\5\25\3\0\4\25\1\220\33\25\5\0"+
    "\1\25\2\0\5\25\3\0\3\25\1\221\34\25\5\0"+
    "\1\25\2\0\5\25\3\0\3\25\1\222\34\25\5\0"+
    "\1\25\2\0\5\25\3\0\3\25\1\223\34\25\5\0"+
    "\1\25\2\0\5\25\3\0\13\25\1\224\24\25\5\0"+
    "\1\25\2\0\5\25\3\0\13\25\1\225\24\25\5\0"+
    "\1\25\2\0\5\25\3\0\12\25\1\226\25\25\5\0"+
    "\1\25\2\0\5\25\3\0\30\25\1\227\7\25\5\0"+
    "\1\25\2\0\5\25\3\0\3\25\1\230\34\25\5\0"+
    "\1\25\2\0\5\25\3\0\32\25\1\231\5\25\5\0"+
    "\1\25\2\0\5\25\3\0\30\25\1\232\7\25\5\0"+
    "\1\25\2\0\5\25\3\0\1\25\1\233\36\25\5\0"+
    "\1\25\2\0\5\25\3\0\32\25\1\234\5\25\25\0"+
    "\1\235\73\0\1\236\46\0\1\237\57\0\1\240\66\0"+
    "\1\241\44\0\1\242\63\0\1\243\61\0\1\244\63\0"+
    "\1\245\51\0\1\246\51\0\1\247\61\0\1\250\41\0"+
    "\1\251\103\0\1\252\51\0\1\253\74\0\1\254\61\0"+
    "\1\255\52\0\1\256\51\0\1\257\76\0\1\260\33\0"+
    "\1\261\72\0\1\262\52\0\1\263\3\0\1\264\50\0"+
    "\1\265\36\0\1\25\2\0\5\25\3\0\13\25\1\266"+
    "\24\25\5\0\1\25\2\0\5\25\3\0\10\25\1\267"+
    "\27\25\5\0\1\25\2\0\5\25\3\0\3\25\1\270"+
    "\34\25\5\0\1\25\2\0\5\25\3\0\6\25\1\271"+
    "\31\25\5\0\1\25\2\0\5\25\3\0\3\25\1\272"+
    "\34\25\5\0\1\25\2\0\5\25\2\0\1\273\40\25"+
    "\5\0\1\25\2\0\5\25\3\0\5\25\1\274\32\25"+
    "\5\0\1\25\2\0\5\25\3\0\35\25\1\275\2\25"+
    "\5\0\1\25\2\0\5\25\3\0\10\25\1\276\27\25"+
    "\5\0\1\25\2\0\5\25\3\0\3\25\1\277\34\25"+
    "\5\0\1\25\2\0\5\25\3\0\21\25\1\300\16\25"+
    "\5\0\1\25\2\0\5\25\3\0\16\25\1\301\21\25"+
    "\5\0\1\25\2\0\5\25\3\0\24\25\1\302\13\25"+
    "\5\0\1\25\2\0\5\25\3\0\14\25\1\303\17\25"+
    "\1\304\3\25\5\0\1\25\2\0\5\25\3\0\30\25"+
    "\1\305\7\25\5\0\1\25\2\0\5\25\3\0\3\25"+
    "\1\306\34\25\5\0\1\25\2\0\5\25\3\0\3\25"+
    "\1\307\34\25\10\0\1\310\111\0\1\311\40\0\1\312"+
    "\65\0\1\313\64\0\1\314\51\0\1\315\53\0\1\316"+
    "\56\0\1\317\42\0\1\320\76\0\1\321\73\0\1\322"+
    "\46\0\1\323\35\0\1\324\57\0\1\325\101\0\1\326"+
    "\35\0\1\327\110\0\1\330\44\0\1\331\63\0\1\332"+
    "\61\0\1\333\63\0\1\334\51\0\1\335\34\0\1\25"+
    "\2\0\1\336\4\25\3\0\40\25\5\0\1\25\2\0"+
    "\5\25\3\0\31\25\1\337\6\25\5\0\1\25\2\0"+
    "\5\25\3\0\5\25\1\340\32\25\5\0\1\25\2\0"+
    "\5\25\3\0\5\25\1\341\32\25\5\0\1\25\2\0"+
    "\5\25\3\0\26\25\1\342\11\25\5\0\1\25\2\0"+
    "\5\25\3\0\10\25\1\343\27\25\5\0\1\25\2\0"+
    "\5\25\3\0\1\25\1\344\36\25\5\0\1\25\2\0"+
    "\5\25\2\0\1\345\40\25\5\0\1\25\2\0\5\25"+
    "\2\0\1\346\40\25\5\0\1\25\2\0\5\25\3\0"+
    "\3\25\1\347\34\25\5\0\1\25\2\0\5\25\3\0"+
    "\6\25\1\350\31\25\5\0\1\25\2\0\5\25\3\0"+
    "\15\25\1\351\22\25\5\0\1\25\2\0\5\25\3\0"+
    "\15\25\1\352\22\25\5\0\1\25\2\0\1\353\4\25"+
    "\3\0\40\25\5\0\1\25\2\0\5\25\3\0\3\25"+
    "\1\354\34\25\5\0\1\25\2\0\2\25\1\355\2\25"+
    "\3\0\40\25\5\0\1\25\2\0\5\25\3\0\15\25"+
    "\1\356\22\25\26\0\1\357\61\0\1\360\77\0\1\361"+
    "\42\0\1\362\54\0\1\363\65\0\1\364\45\0\1\365"+
    "\43\0\1\366\57\0\1\367\111\0\1\370\23\0\1\371"+
    "\74\0\1\372\42\0\1\373\102\0\1\374\64\0\1\375"+
    "\51\0\1\376\53\0\1\377\56\0\1\u0100\41\0\1\25"+
    "\2\0\5\25\3\0\5\25\1\u0101\32\25\5\0\1\25"+
    "\2\0\5\25\3\0\7\25\1\u0102\30\25\5\0\1\25"+
    "\2\0\5\25\3\0\10\25\1\u0103\27\25\5\0\1\25"+
    "\2\0\5\25\3\0\16\25\1\u0104\21\25\5\0\1\25"+
    "\2\0\5\25\3\0\31\25\1\u0105\6\25\5\0\1\25"+
    "\2\0\5\25\2\0\1\u0106\40\25\5\0\1\25\2\0"+
    "\5\25\2\0\1\u0107\40\25\5\0\1\25\2\0\5\25"+
    "\2\0\1\u0108\40\25\5\0\1\25\2\0\5\25\3\0"+
    "\12\25\1\u0109\25\25\5\0\1\25\2\0\5\25\3\0"+
    "\4\25\1\u010a\33\25\5\0\1\25\2\0\5\25\3\0"+
    "\16\25\1\u010b\21\25\5\0\1\25\2\0\5\25\3\0"+
    "\11\25\1\u010c\26\25\5\0\1\25\2\0\5\25\3\0"+
    "\12\25\1\u010d\25\25\5\0\1\25\2\0\5\25\3\0"+
    "\6\25\1\u010e\31\25\5\0\1\25\2\0\5\25\2\0"+
    "\1\u010f\40\25\27\0\1\u0110\40\0\1\u0111\72\0\1\u0112"+
    "\44\0\1\u0113\120\0\1\u0114\34\0\1\u0115\67\0\1\u0116"+
    "\47\0\1\u0117\61\0\1\u0118\77\0\1\u0119\42\0\1\u011a"+
    "\54\0\1\u011b\65\0\1\u011c\45\0\1\u011d\43\0\1\u011e"+
    "\54\0\1\25\2\0\5\25\3\0\3\25\1\u011f\34\25"+
    "\5\0\1\25\2\0\5\25\3\0\3\25\1\u0120\34\25"+
    "\5\0\1\25\2\0\5\25\2\0\1\u0121\40\25\5\0"+
    "\1\25\2\0\5\25\3\0\10\25\1\u0122\27\25\5\0"+
    "\1\25\2\0\5\25\3\0\7\25\1\u0123\30\25\5\0"+
    "\1\25\2\0\5\25\2\0\1\u0124\40\25\5\0\1\25"+
    "\2\0\5\25\3\0\11\25\1\u0125\26\25\5\0\1\25"+
    "\2\0\5\25\3\0\4\25\1\u0126\33\25\5\0\1\25"+
    "\2\0\5\25\3\0\7\25\1\u0127\30\25\5\0\1\25"+
    "\2\0\5\25\3\0\10\25\1\u0128\27\25\5\0\1\25"+
    "\2\0\5\25\3\0\12\25\1\u0129\25\25\30\0\1\u012a"+
    "\55\0\1\u012b\63\0\1\u012c\52\0\1\u012d\61\0\1\u012e"+
    "\62\0\1\u012f\62\0\1\u0130\51\0\1\u0131\40\0\1\u0132"+
    "\72\0\1\u0133\44\0\1\u0134\120\0\1\u0135\34\0\1\u0136"+
    "\37\0\1\u0137\107\0\1\u0138\26\0\1\25\2\0\5\25"+
    "\2\0\1\u0139\40\25\5\0\1\25\2\0\5\25\2\0"+
    "\1\u013a\40\25\5\0\1\25\2\0\5\25\3\0\3\25"+
    "\1\u013b\34\25\5\0\1\25\2\0\5\25\3\0\3\25"+
    "\1\u013c\34\25\5\0\1\25\2\0\5\25\2\0\1\u013d"+
    "\40\25\5\0\1\25\2\0\5\25\3\0\4\25\1\u013e"+
    "\33\25\5\0\1\25\2\0\5\25\3\0\3\25\1\u013f"+
    "\34\25\5\0\1\25\2\0\5\25\2\0\1\u0140\40\25"+
    "\5\0\1\25\2\0\5\25\3\0\3\25\1\u0141\34\25"+
    "\26\0\1\u0142\63\0\1\u0143\55\0\1\u0144\52\0\1\u0145"+
    "\57\0\1\u0146\57\0\1\u0147\64\0\1\u0148\55\0\1\u0149"+
    "\63\0\1\u014a\52\0\1\u014b\61\0\1\u014c\62\0\1\u014d"+
    "\62\0\1\u014e\27\0\1\25\2\0\5\25\2\0\1\u014f"+
    "\40\25\5\0\1\25\2\0\5\25\2\0\1\u0150\40\25"+
    "\5\0\1\25\2\0\5\25\3\0\33\25\1\u0151\4\25"+
    "\5\0\1\25\2\0\1\u0152\4\25\3\0\40\25\5\0"+
    "\1\25\2\0\1\25\1\u0153\3\25\3\0\40\25\31\0"+
    "\1\u0154\67\0\1\u0155\26\0\1\u0156\75\0\1\u0157\63\0"+
    "\1\u0158\55\0\1\u0159\52\0\1\u015a\57\0\1\u015b\57\0"+
    "\1\u015c\42\0\1\u015d\56\0\1\25\2\0\2\25\1\u015e"+
    "\2\25\3\0\40\25\5\0\1\25\2\0\5\25\3\0"+
    "\10\25\1\u015f\27\25\5\0\1\25\2\0\5\25\3\0"+
    "\20\25\1\u0160\17\25\32\0\1\u0161\56\0\1\u0162\67\0"+
    "\1\u0163\24\0\1\u0164\57\0\1\u0165\57\0\1\u0166\61\0"+
    "\1\u0167\54\0\1\25\2\0\5\25\2\0\1\u0168\40\25"+
    "\5\0\1\25\2\0\5\25\3\0\31\25\1\u0169\6\25"+
    "\5\0\1\25\2\0\5\25\3\0\31\25\1\u016a\6\25"+
    "\32\0\1\u016b\33\0\1\u016c\57\0\1\u016d\56\0\1\25"+
    "\2\0\5\25\3\0\33\25\1\u016e\4\25\5\0\1\25"+
    "\2\0\5\25\2\0\1\u016f\40\25\6\0\1\u0170\56\0"+
    "\1\25\2\0\2\25\1\u0171\2\25\3\0\40\25\5\0"+
    "\1\25\2\0\5\25\2\0\1\u0172\40\25";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  9,  1,  9,  1,  1,  9,  1,  1,  9,  0,  1,  0,  0,  0, 
     0,  1,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  9, 
     0,  0,  0,  9,  9,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  9,  0, 
     9,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  9, 
     0,  0,  0,  9,  9,  0,  9,  0,  0,  0,  0,  0,  0,  1,  1,  1, 
     1,  1,  1,  1,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0, 
     0,  0,  0,  0,  9,  0,  0,  0,  9,  0,  9,  0,  0,  0,  0,  0, 
     1,  1,  1,  1,  1,  9,  9,  9,  1,  1,  1,  1,  1,  1,  9,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1, 
     9,  1,  1,  9,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  9, 
     0,  0,  0,  0,  0,  0,  9,  0,  9,  9,  1,  1,  9,  1,  1,  9, 
     1,  0,  0,  9,  9,  9,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9, 
     1,  1,  1,  0,  9,  9,  0,  0,  0,  0,  0,  0,  9,  1,  1,  1, 
     9,  0,  0,  9,  9,  9,  0,  9,  1,  1,  0,  9,  9,  1,  9,  9, 
     1,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[15024];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 142) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 319: 
          {  return symbolFactory.newSymbol("RDFS_COMMENT", RDFS_COMMENT);  }
        case 371: break;
        case 316: 
          {  return symbolFactory.newSymbol("RDFS_SEEALSO", RDFS_SEEALSO);  }
        case 372: break;
        case 118: 
          {  return symbolFactory.newSymbol("OPEN_RDF_ALT", OPEN_RDF_ALT);  }
        case 373: break;
        case 116: 
          {  return symbolFactory.newSymbol("OPEN_RDF_SEQ", OPEN_RDF_SEQ);  }
        case 374: break;
        case 115: 
          {  return symbolFactory.newSymbol("OPEN_RDF_BAG", OPEN_RDF_BAG);  }
        case 375: break;
        case 111: 
          {  return symbolFactory.newSymbol("OPEN_RDF_RDF", OPEN_RDF_RDF);  }
        case 376: break;
        case 12: 
          {  return symbolFactory.newSymbol("OPEN_END_TAG", OPEN_END_TAG);  }
        case 377: break;
        case 168: 
          {  return symbolFactory.newSymbol("CLOSE_RDF_LI", CLOSE_RDF_LI);  }
        case 378: break;
        case 334: 
          {  return symbolFactory.newSymbol("RDF_PREDICATE", RDF_PREDICATE);  }
        case 379: break;
        case 207: 
          {  return symbolFactory.newSymbol("CLOSE_RDF_RDF", CLOSE_RDF_RDF);  }
        case 380: break;
        case 211: 
          {  return symbolFactory.newSymbol("CLOSE_RDF_BAG", CLOSE_RDF_BAG);  }
        case 381: break;
        case 212: 
          {  return symbolFactory.newSymbol("CLOSE_RDF_SEQ", CLOSE_RDF_SEQ);  }
        case 382: break;
        case 214: 
          {  return symbolFactory.newSymbol("CLOSE_RDF_ALT", CLOSE_RDF_ALT);  }
        case 383: break;
        case 313: 
          { return symbolFactory.newSymbol("RDF_DATATYPE", RDF_DATATYPE);  }
        case 384: break;
        case 312: 
          { return symbolFactory.newSymbol("RDF_RESOURCE", RDF_RESOURCE);  }
        case 385: break;
        case 2: 
        case 6: 
        case 8: 
        case 9: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 386: break;
        case 261: 
          {  return symbolFactory.newSymbol("RDF_OBJECT", RDF_OBJECT);  }
        case 387: break;
        case 263: 
          {  return symbolFactory.newSymbol("RDFS_RANGE", RDFS_RANGE);  }
        case 388: break;
        case 270: 
          {  return symbolFactory.newSymbol("RDFS_LABEL", RDFS_LABEL);  }
        case 389: break;
        case 5: 
          {  return symbolFactory.newSymbol("OPEN_TAG", OPEN_TAG);  }
        case 390: break;
        case 186: 
          {  return symbolFactory.newSymbol("RDF_TYPE", RDF_TYPE);  }
        case 391: break;
        case 102: 
          { return symbolFactory.newSymbol("RDF_ID", RDF_ID);  }
        case 392: break;
        case 72: 
          {  return symbolFactory.newSymbol("OPEN_RDF_LI", OPEN_RDF_LI);  }
        case 393: break;
        case 288: 
          {  return symbolFactory.newSymbol("RDF_SUBJECT", RDF_SUBJECT);  }
        case 394: break;
        case 291: 
          {  return symbolFactory.newSymbol("RDFS_DOMAIN", RDFS_DOMAIN);  }
        case 395: break;
        case 7: 
          {  return symbolFactory.newSymbol("CLOSE_TAG", CLOSE_TAG);  }
        case 396: break;
        case 229: 
          {  return symbolFactory.newSymbol("RDF_VALUE", RDF_VALUE);  }
        case 397: break;
        case 228: 
          { return symbolFactory.newSymbol("RDF_ABOUT", RDF_ABOUT);  }
        case 398: break;
        case 369: 
          {  return symbolFactory.newSymbol("RDFS_SUBPROPERTYOF", RDFS_SUBPROPERTYOF);  }
        case 399: break;
        case 356: 
          {  return symbolFactory.newSymbol("CLOSE_RDFS_RESOURCE", CLOSE_RDFS_RESOURCE);  }
        case 400: break;
        case 324: 
          {  return symbolFactory.newSymbol("OPEN_RDFS_RESOURCE", OPEN_RDFS_RESOURCE);  }
        case 401: break;
        case 262: 
          { return symbolFactory.newSymbol("RDF_NODEID", RDF_NODEID);  }
        case 402: break;
        case 10: 
          {  return symbolFactory.newSymbol("EQUALS", EQUALS);  }
        case 403: break;
        case 363: 
          {  return symbolFactory.newSymbol("CLOSE_RDF_LANGSTRING", CLOSE_RDF_LANGSTRING);  }
        case 404: break;
        case 357: 
          { return symbolFactory.newSymbol("CLOSE_RDF_DATATYPE", CLOSE_RDF_DATATYPE);  }
        case 405: break;
        case 340: 
          {  return symbolFactory.newSymbol("OPEN_RDF_LANGSTRING", OPEN_RDF_LANGSTRING);  }
        case 406: break;
        case 325: 
          { return symbolFactory.newSymbol("OPEN_RDF_DATATYPE", OPEN_RDF_DATATYPE);  }
        case 407: break;
        case 17: 
          {  return symbolFactory.newSymbol("PROPERTY_VALUE", PROPERTY_VALUE, yytext());  }
        case 408: break;
        case 244: 
          {  return symbolFactory.newSymbol("OPEN_RDFS_CLASS", OPEN_RDFS_CLASS);  }
        case 409: break;
        case 310: 
          {  return symbolFactory.newSymbol("CLOSE_RDFS_CLASS", CLOSE_RDFS_CLASS);  }
        case 410: break;
        case 303: 
          {  return symbolFactory.newSymbol("OPEN_RDFS_LITERAL", OPEN_RDFS_LITERAL);  }
        case 411: break;
        case 20: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 286: 
        case 287: 
        case 289: 
        case 290: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 314: 
        case 315: 
        case 317: 
        case 318: 
        case 320: 
        case 336: 
        case 337: 
        case 338: 
        case 349: 
        case 350: 
        case 351: 
        case 360: 
        case 361: 
        case 365: 
        case 368: 
          {  return symbolFactory.newSymbol("TAG_NAME_WITH_SCHEME", TAG_NAME_WITH_SCHEME);  }
        case 412: break;
        case 366: 
          {  return symbolFactory.newSymbol("RDFS_ISDEFINEDBY", RDFS_ISDEFINEDBY);  }
        case 413: break;
        case 40: 
          { return symbolFactory.newSymbol("RDF_N", RDF_N);  }
        case 414: break;
        case 364: 
          { return symbolFactory.newSymbol("CLOSE_RDF_CONTAINER", CLOSE_RDF_CONTAINER);  }
        case 415: break;
        case 355: 
          { return symbolFactory.newSymbol("CLOSE_RDF_STATEMENT", CLOSE_RDF_STATEMENT);  }
        case 416: break;
        case 348: 
          {  return symbolFactory.newSymbol("CLOSE_RDFS_LITERAL", CLOSE_RDFS_LITERAL);  }
        case 417: break;
        case 341: 
          { return symbolFactory.newSymbol("OPEN_RDF_CONTAINER", OPEN_RDF_CONTAINER);  }
        case 418: break;
        case 335: 
          { return symbolFactory.newSymbol("RDF_PARSETYPE", RDF_PARSETYPE);  }
        case 419: break;
        case 323: 
          { return symbolFactory.newSymbol("OPEN_RDF_STATEMENT", OPEN_RDF_STATEMENT);  }
        case 420: break;
        case 367: 
          {  return symbolFactory.newSymbol("CLOSE_RDF_DESCRIPTION", CLOSE_RDF_DESCRIPTION);  }
        case 421: break;
        case 359: 
          {  return symbolFactory.newSymbol("RDFS_SUBCLASSOF", RDFS_SUBCLASSOF);  }
        case 422: break;
        case 352: 
          {  return symbolFactory.newSymbol("OPEN_RDF_DESCRIPTION", OPEN_RDF_DESCRIPTION);  }
        case 423: break;
        case 160: 
          { return symbolFactory.newSymbol("OPEN_RDF_HTML", OPEN_RDF_HTML);  }
        case 424: break;
        case 158: 
          { return symbolFactory.newSymbol("OPEN_RDF_LIST", OPEN_RDF_LIST);  }
        case 425: break;
        case 3: 
        case 4: 
          {  }
        case 426: break;
        case 248: 
          { return symbolFactory.newSymbol("CLOSE_RDF_LIST", CLOSE_RDF_LIST);  }
        case 427: break;
        case 250: 
          { return symbolFactory.newSymbol("CLOSE_RDF_HTML", CLOSE_RDF_HTML);  }
        case 428: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
