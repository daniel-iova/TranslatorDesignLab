
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\036\004\000\002\002\004\000\002\002" +
    "\010\000\002\003\004\000\002\003\003\000\002\003\002" +
    "\000\002\004\010\000\002\004\012\000\002\004\012\000" +
    "\002\004\012\000\002\004\012\000\002\004\012\000\002" +
    "\004\012\000\002\004\010\000\002\004\010\000\002\004" +
    "\002\000\002\020\004\000\002\020\003\000\002\020\002" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\002" +
    "\000\002\035\006\000\002\035\005\000\002\035\002\000" +
    "\002\021\005\000\002\032\005\000\002\033\005\000\002" +
    "\023\005\000\002\022\005\000\002\024\005\000\002\025" +
    "\005\000\002\026\005\000\002\034\005\000\002\027\005" +
    "\000\002\030\005\000\002\031\005\000\002\005\004\000" +
    "\002\005\003\000\002\005\002\000\002\006\003\000\002" +
    "\006\002\000\002\010\007\000\002\010\010\000\002\010" +
    "\011\000\002\010\012\000\002\010\012\000\002\010\012" +
    "\000\002\010\012\000\002\010\011\000\002\010\012\000" +
    "\002\010\010\000\002\010\012\000\002\010\012\000\002" +
    "\010\012\000\002\010\006\000\002\010\003\000\002\045" +
    "\005\000\002\045\003\000\002\044\003\000\002\044\005" +
    "\000\002\044\004\000\002\044\003\000\002\007\010\000" +
    "\002\007\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\004\074\005\001\002\000\004\002\352\001" +
    "\002\000\004\004\006\001\002\000\004\011\010\001\002" +
    "\000\004\002\001\001\002\000\034\006\uffef\010\037\011" +
    "\033\021\036\057\034\060\030\061\020\062\013\063\025" +
    "\064\015\077\017\100\022\101\012\001\002\000\046\005" +
    "\ufff0\006\ufff0\010\ufff0\011\ufff0\021\ufff0\030\ufff0\050\ufff0" +
    "\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\076" +
    "\ufff0\077\ufff0\100\ufff0\101\ufff0\106\ufff0\001\002\000\004" +
    "\007\350\001\002\000\004\007\346\001\002\000\046\005" +
    "\uffe6\006\uffe6\010\uffe6\011\uffe6\021\uffe6\030\uffe6\050\uffe6" +
    "\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\076" +
    "\uffe6\077\uffe6\100\uffe6\101\uffe6\106\uffe6\001\002\000\004" +
    "\007\344\001\002\000\046\005\uffe4\006\uffe4\010\uffe4\011" +
    "\uffe4\021\uffe4\030\uffe4\050\uffe4\057\uffe4\060\uffe4\061\uffe4" +
    "\062\uffe4\063\uffe4\064\uffe4\076\uffe4\077\uffe4\100\uffe4\101" +
    "\uffe4\106\uffe4\001\002\000\004\007\342\001\002\000\004" +
    "\007\340\001\002\000\046\005\uffea\006\uffea\010\uffea\011" +
    "\uffea\021\uffea\030\uffea\050\uffea\057\uffea\060\uffea\061\uffea" +
    "\062\uffea\063\uffea\064\uffea\076\uffea\077\uffea\100\uffea\101" +
    "\uffea\106\uffea\001\002\000\004\007\336\001\002\000\046" +
    "\005\uffe3\006\uffe3\010\333\011\uffe3\021\uffe3\030\uffe3\050" +
    "\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3" +
    "\076\uffe3\077\uffe3\100\uffe3\101\uffe3\106\uffe3\001\002\000" +
    "\046\005\uffed\006\uffed\010\uffed\011\uffed\021\uffed\030\uffed" +
    "\050\uffed\057\uffed\060\uffed\061\uffed\062\uffed\063\uffed\064" +
    "\uffed\076\uffed\077\uffed\100\uffed\101\uffed\106\uffed\001\002" +
    "\000\004\007\331\001\002\000\046\005\uffe7\006\uffe7\010" +
    "\uffe7\011\uffe7\021\uffe7\030\uffe7\050\uffe7\057\uffe7\060\uffe7" +
    "\061\uffe7\062\uffe7\063\uffe7\064\uffe7\076\uffe7\077\uffe7\100" +
    "\uffe7\101\uffe7\106\uffe7\001\002\000\046\005\uffee\006\uffee" +
    "\010\uffee\011\uffee\021\uffee\030\uffee\050\uffee\057\uffee\060" +
    "\uffee\061\uffee\062\uffee\063\uffee\064\uffee\076\uffee\077\uffee" +
    "\100\uffee\101\uffee\106\uffee\001\002\000\004\007\327\001" +
    "\002\000\034\006\054\010\037\011\033\021\036\057\034" +
    "\060\030\061\020\062\013\063\025\064\015\077\017\100" +
    "\022\101\012\001\002\000\046\005\uffe5\006\uffe5\010\uffe5" +
    "\011\uffe5\021\uffe5\030\uffe5\050\uffe5\057\uffe5\060\uffe5\061" +
    "\uffe5\062\uffe5\063\uffe5\064\uffe5\076\uffe5\077\uffe5\100\uffe5" +
    "\101\uffe5\106\uffe5\001\002\000\004\007\051\001\002\000" +
    "\004\007\047\001\002\000\046\005\uffe8\006\uffe8\010\uffe8" +
    "\011\uffe8\021\uffe8\030\uffe8\050\uffe8\057\uffe8\060\uffe8\061" +
    "\uffe8\062\uffe8\063\uffe8\064\uffe8\076\uffe8\077\uffe8\100\uffe8" +
    "\101\uffe8\106\uffe8\001\002\000\004\007\045\001\002\000" +
    "\004\007\043\001\002\000\046\005\uffeb\006\uffeb\010\uffeb" +
    "\011\uffeb\021\uffeb\030\uffeb\050\uffeb\057\uffeb\060\uffeb\061" +
    "\uffeb\062\uffeb\063\uffeb\064\uffeb\076\uffeb\077\uffeb\100\uffeb" +
    "\101\uffeb\106\uffeb\001\002\000\046\005\uffec\006\uffec\010" +
    "\uffec\011\uffec\021\uffec\030\uffec\050\uffec\057\uffec\060\uffec" +
    "\061\uffec\062\uffec\063\uffec\064\uffec\076\uffec\077\uffec\100" +
    "\uffec\101\uffec\106\uffec\001\002\000\046\005\uffe9\006\uffe9" +
    "\010\uffe9\011\uffe9\021\uffe9\030\uffe9\050\uffe9\057\uffe9\060" +
    "\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9\076\uffe9\077\uffe9" +
    "\100\uffe9\101\uffe9\106\uffe9\001\002\000\004\105\044\001" +
    "\002\000\046\005\uffe0\006\uffe0\010\uffe0\011\uffe0\021\uffe0" +
    "\030\uffe0\050\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063" +
    "\uffe0\064\uffe0\076\uffe0\077\uffe0\100\uffe0\101\uffe0\106\uffe0" +
    "\001\002\000\004\105\046\001\002\000\046\005\uffd7\006" +
    "\uffd7\010\uffd7\011\uffd7\021\uffd7\030\uffd7\050\uffd7\057\uffd7" +
    "\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\076\uffd7\077" +
    "\uffd7\100\uffd7\101\uffd7\106\uffd7\001\002\000\004\105\050" +
    "\001\002\000\046\005\uffdb\006\uffdb\010\uffdb\011\uffdb\021" +
    "\uffdb\030\uffdb\050\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb" +
    "\063\uffdb\064\uffdb\076\uffdb\077\uffdb\100\uffdb\101\uffdb\106" +
    "\uffdb\001\002\000\004\105\052\001\002\000\046\005\uffde" +
    "\006\uffde\010\uffde\011\uffde\021\uffde\030\uffde\050\uffde\057" +
    "\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde\076\uffde" +
    "\077\uffde\100\uffde\101\uffde\106\uffde\001\002\000\046\005" +
    "\ufff1\006\ufff1\010\ufff1\011\ufff1\021\ufff1\030\ufff1\050\ufff1" +
    "\057\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\076" +
    "\ufff1\077\ufff1\100\ufff1\101\ufff1\106\ufff1\001\002\000\006" +
    "\004\055\031\ufffc\001\002\000\024\011\067\012\070\030" +
    "\071\057\066\060\063\061\072\062\064\063\062\064\065" +
    "\001\002\000\006\004\ufffd\031\ufffd\001\002\000\006\004" +
    "\055\031\060\001\002\000\004\002\uffff\001\002\000\006" +
    "\004\ufffe\031\ufffe\001\002\000\034\006\uffef\010\037\011" +
    "\033\021\036\057\034\060\030\061\020\062\013\063\025" +
    "\064\015\077\017\100\022\101\012\001\002\000\034\006" +
    "\uffef\010\037\011\033\021\036\057\034\060\030\061\020" +
    "\062\013\063\025\064\015\077\017\100\022\101\012\001" +
    "\002\000\034\006\uffef\010\037\011\033\021\036\057\034" +
    "\060\030\061\020\062\013\063\025\064\015\077\017\100" +
    "\022\101\012\001\002\000\034\006\uffef\010\037\011\033" +
    "\021\036\057\034\060\030\061\020\062\013\063\025\064" +
    "\015\077\017\100\022\101\012\001\002\000\034\006\uffef" +
    "\010\037\011\033\021\036\057\034\060\030\061\020\062" +
    "\013\063\025\064\015\077\017\100\022\101\012\001\002" +
    "\000\034\006\uffef\010\037\011\033\021\036\057\034\060" +
    "\030\061\020\062\013\063\025\064\015\077\017\100\022" +
    "\101\012\001\002\000\034\006\uffef\010\037\011\033\021" +
    "\036\057\034\060\030\061\020\062\013\063\025\064\015" +
    "\077\017\100\022\101\012\001\002\000\034\006\uffef\010" +
    "\037\011\033\021\036\057\034\060\030\061\020\062\013" +
    "\063\025\064\015\077\017\100\022\101\012\001\002\000" +
    "\034\006\uffef\010\037\011\033\021\036\057\034\060\030" +
    "\061\020\062\013\063\025\064\015\077\017\100\022\101" +
    "\012\001\002\000\034\006\074\010\037\011\033\021\036" +
    "\057\034\060\030\061\020\062\013\063\025\064\015\077" +
    "\017\100\022\101\012\001\002\000\006\004\076\005\uffd0" +
    "\001\002\000\020\004\uffcf\005\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\050\uffcf\076\uffcf\001\002\000\034\010\107\011\116" +
    "\012\115\030\117\057\114\060\110\061\121\062\111\063" +
    "\106\064\112\077\122\100\113\101\120\001\002\000\020" +
    "\004\uffbf\005\uffbf\030\uffbf\031\uffbf\032\uffbf\050\uffbf\076" +
    "\uffbf\001\002\000\020\004\uffd1\005\uffd1\030\uffd1\031\uffd1" +
    "\032\uffd1\050\uffd1\076\uffd1\001\002\000\006\004\076\005" +
    "\102\001\002\000\004\061\104\001\002\000\020\004\uffd2" +
    "\005\uffd2\030\uffd2\031\uffd2\032\uffd2\050\uffd2\076\uffd2\001" +
    "\002\000\004\006\105\001\002\000\020\004\ufff8\005\ufff8" +
    "\030\ufff8\031\ufff8\032\ufff8\050\ufff8\076\ufff8\001\002\000" +
    "\034\006\uffef\010\037\011\033\021\036\057\034\060\030" +
    "\061\020\062\013\063\025\064\015\077\017\100\022\101" +
    "\012\001\002\000\036\006\237\010\037\011\033\021\036" +
    "\057\034\060\030\061\020\062\013\063\025\064\015\077" +
    "\017\100\022\101\012\106\uffef\001\002\000\034\006\uffef" +
    "\010\037\011\033\021\036\057\034\060\030\061\020\062" +
    "\013\063\025\064\015\077\017\100\022\101\012\001\002" +
    "\000\034\006\216\010\037\011\033\021\036\057\034\060" +
    "\030\061\020\062\013\063\025\064\015\077\017\100\022" +
    "\101\012\001\002\000\004\006\211\001\002\000\034\006" +
    "\uffef\010\037\011\033\021\036\057\034\060\030\061\020" +
    "\062\013\063\025\064\015\077\017\100\022\101\012\001" +
    "\002\000\034\006\uffef\010\037\011\033\021\036\057\034" +
    "\060\030\061\020\062\013\063\025\064\015\077\017\100" +
    "\022\101\012\001\002\000\034\006\uffef\010\037\011\033" +
    "\021\036\057\034\060\030\061\020\062\013\063\025\064" +
    "\015\077\017\100\022\101\012\001\002\000\034\006\162" +
    "\010\037\011\033\021\036\057\034\060\030\061\020\062" +
    "\013\063\025\064\015\077\017\100\022\101\012\001\002" +
    "\000\044\005\uffef\006\uffef\010\037\011\033\021\036\030" +
    "\uffef\050\uffef\057\034\060\030\061\020\062\013\063\025" +
    "\064\015\076\uffef\077\017\100\022\101\012\001\002\000" +
    "\034\006\uffef\010\037\011\033\021\036\057\034\060\030" +
    "\061\020\062\013\063\025\064\015\077\017\100\022\101" +
    "\012\001\002\000\034\006\uffef\010\037\011\033\021\036" +
    "\057\034\060\030\061\020\062\013\063\025\064\015\077" +
    "\017\100\022\101\012\001\002\000\034\006\uffef\010\037" +
    "\011\033\021\036\057\034\060\030\061\020\062\013\063" +
    "\025\064\015\077\017\100\022\101\012\001\002\000\034" +
    "\006\124\010\037\011\033\021\036\057\034\060\030\061" +
    "\020\062\013\063\025\064\015\077\017\100\022\101\012" +
    "\001\002\000\006\004\055\005\ufff2\001\002\000\004\005" +
    "\126\001\002\000\004\077\127\001\002\000\004\006\130" +
    "\001\002\000\020\004\uffc3\005\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\050\uffc3\076\uffc3\001\002\000\034\006\132\010\037" +
    "\011\033\021\036\057\034\060\030\061\020\062\013\063" +
    "\025\064\015\077\017\100\022\101\012\001\002\000\006" +
    "\004\055\005\ufff2\001\002\000\004\005\134\001\002\000" +
    "\004\061\135\001\002\000\004\006\136\001\002\000\020" +
    "\004\uffc9\005\uffc9\030\uffc9\031\uffc9\032\uffc9\050\uffc9\076" +
    "\uffc9\001\002\000\034\006\140\010\037\011\033\021\036" +
    "\057\034\060\030\061\020\062\013\063\025\064\015\077" +
    "\017\100\022\101\012\001\002\000\006\004\055\005\ufff2" +
    "\001\002\000\004\005\142\001\002\000\004\101\143\001" +
    "\002\000\004\006\144\001\002\000\020\004\uffc1\005\uffc1" +
    "\030\uffc1\031\uffc1\032\uffc1\050\uffc1\076\uffc1\001\002\000" +
    "\044\005\150\006\153\010\037\011\033\021\036\030\151" +
    "\050\154\057\034\060\030\061\020\062\013\063\025\064" +
    "\015\076\147\077\017\100\022\101\012\001\002\000\020" +
    "\004\uffc0\005\uffc0\030\uffc0\031\uffc0\032\uffc0\050\uffc0\076" +
    "\uffc0\001\002\000\020\004\uffbc\005\uffbc\030\uffbc\031\uffbc" +
    "\032\uffbc\050\uffbc\076\uffbc\001\002\000\004\030\160\001" +
    "\002\000\004\006\157\001\002\000\020\004\uffbd\005\uffbd" +
    "\030\uffbd\031\uffbd\032\uffbd\050\uffbd\076\uffbd\001\002\000" +
    "\014\004\055\005\ufff2\030\ufff2\050\ufff2\076\ufff2\001\002" +
    "\000\020\004\uffb9\005\uffb9\030\uffb9\031\uffb9\032\uffb9\050" +
    "\uffb9\076\uffb9\001\002\000\012\005\150\030\151\050\154" +
    "\076\147\001\002\000\020\004\uffbe\005\uffbe\030\uffbe\031" +
    "\uffbe\032\uffbe\050\uffbe\076\uffbe\001\002\000\020\004\uffba" +
    "\005\uffba\030\uffba\031\uffba\032\uffba\050\uffba\076\uffba\001" +
    "\002\000\004\006\161\001\002\000\020\004\uffbb\005\uffbb" +
    "\030\uffbb\031\uffbb\032\uffbb\050\uffbb\076\uffbb\001\002\000" +
    "\006\004\055\031\ufff2\001\002\000\034\006\164\010\037" +
    "\011\033\021\036\057\034\060\030\061\020\062\013\063" +
    "\025\064\015\077\017\100\022\101\012\001\002\000\006" +
    "\004\055\031\ufff2\001\002\000\004\031\166\001\002\000" +
    "\020\004\uffcc\005\uffcc\030\uffcc\031\uffcc\032\uffcc\050\uffcc" +
    "\076\uffcc\001\002\000\004\031\170\001\002\000\020\004" +
    "\uffcd\005\uffcd\030\uffcd\031\uffcd\032\uffcd\050\uffcd\076\uffcd" +
    "\001\002\000\034\006\172\010\037\011\033\021\036\057" +
    "\034\060\030\061\020\062\013\063\025\064\015\077\017" +
    "\100\022\101\012\001\002\000\006\004\055\032\ufff2\001" +
    "\002\000\004\032\174\001\002\000\020\004\uffc4\005\uffc4" +
    "\030\uffc4\031\uffc4\032\uffc4\050\uffc4\076\uffc4\001\002\000" +
    "\034\006\176\010\037\011\033\021\036\057\034\060\030" +
    "\061\020\062\013\063\025\064\015\077\017\100\022\101" +
    "\012\001\002\000\006\004\055\005\ufff2\001\002\000\004" +
    "\005\200\001\002\000\004\057\201\001\002\000\004\006" +
    "\202\001\002\000\020\004\uffca\005\uffca\030\uffca\031\uffca" +
    "\032\uffca\050\uffca\076\uffca\001\002\000\034\006\204\010" +
    "\037\011\033\021\036\057\034\060\030\061\020\062\013" +
    "\063\025\064\015\077\017\100\022\101\012\001\002\000" +
    "\006\004\055\005\ufff2\001\002\000\004\005\206\001\002" +
    "\000\004\100\207\001\002\000\004\006\210\001\002\000" +
    "\020\004\uffc2\005\uffc2\030\uffc2\031\uffc2\032\uffc2\050\uffc2" +
    "\076\uffc2\001\002\000\006\004\055\005\ufff2\001\002\000" +
    "\004\005\213\001\002\000\004\064\214\001\002\000\004" +
    "\006\215\001\002\000\020\004\uffcb\005\uffcb\030\uffcb\031" +
    "\uffcb\032\uffcb\050\uffcb\076\uffcb\001\002\000\006\004\055" +
    "\005\ufff2\001\002\000\034\006\220\010\037\011\033\021" +
    "\036\057\034\060\030\061\020\062\013\063\025\064\015" +
    "\077\017\100\022\101\012\001\002\000\006\004\055\005" +
    "\ufff2\001\002\000\004\005\222\001\002\000\004\062\223" +
    "\001\002\000\004\006\224\001\002\000\020\004\uffc5\005" +
    "\uffc5\030\uffc5\031\uffc5\032\uffc5\050\uffc5\076\uffc5\001\002" +
    "\000\004\005\226\001\002\000\004\062\227\001\002\000" +
    "\004\006\230\001\002\000\020\004\uffc6\005\uffc6\030\uffc6" +
    "\031\uffc6\032\uffc6\050\uffc6\076\uffc6\001\002\000\034\006" +
    "\232\010\037\011\033\021\036\057\034\060\030\061\020" +
    "\062\013\063\025\064\015\077\017\100\022\101\012\001" +
    "\002\000\006\004\055\005\ufff2\001\002\000\004\005\234" +
    "\001\002\000\004\060\235\001\002\000\004\006\236\001" +
    "\002\000\020\004\uffc8\005\uffc8\030\uffc8\031\uffc8\032\uffc8" +
    "\050\uffc8\076\uffc8\001\002\000\004\005\244\001\002\000" +
    "\034\010\037\011\033\021\036\057\034\060\030\061\020" +
    "\062\013\063\025\064\015\077\017\100\022\101\012\106" +
    "\241\001\002\000\004\010\242\001\002\000\004\006\243" +
    "\001\002\000\020\004\uffb8\005\uffb8\030\uffb8\031\uffb8\032" +
    "\uffb8\050\uffb8\076\uffb8\001\002\000\004\010\245\001\002" +
    "\000\004\006\246\001\002\000\020\004\uffb7\005\uffb7\030" +
    "\uffb7\031\uffb7\032\uffb7\050\uffb7\076\uffb7\001\002\000\034" +
    "\006\250\010\037\011\033\021\036\057\034\060\030\061" +
    "\020\062\013\063\025\064\015\077\017\100\022\101\012" +
    "\001\002\000\006\004\055\005\ufff2\001\002\000\004\005" +
    "\252\001\002\000\004\063\253\001\002\000\004\006\254" +
    "\001\002\000\020\004\uffc7\005\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\050\uffc7\076\uffc7\001\002\000\034\006\256\010\037" +
    "\011\033\021\036\057\034\060\030\061\020\062\013\063" +
    "\025\064\015\077\017\100\022\101\012\001\002\000\014" +
    "\004\076\005\uffd0\030\uffd0\050\uffd0\076\uffd0\001\002\000" +
    "\014\004\076\005\150\030\151\050\154\076\147\001\002" +
    "\000\020\004\ufff3\005\ufff3\030\ufff3\031\ufff3\032\ufff3\050" +
    "\ufff3\076\ufff3\001\002\000\034\006\262\010\037\011\033" +
    "\021\036\057\034\060\030\061\020\062\013\063\025\064" +
    "\015\077\017\100\022\101\012\001\002\000\006\004\076" +
    "\032\uffd0\001\002\000\006\004\076\032\264\001\002\000" +
    "\020\004\ufff4\005\ufff4\030\ufff4\031\ufff4\032\ufff4\050\ufff4" +
    "\076\ufff4\001\002\000\034\006\266\010\037\011\033\021" +
    "\036\057\034\060\030\061\020\062\013\063\025\064\015" +
    "\077\017\100\022\101\012\001\002\000\006\004\076\031" +
    "\uffd0\001\002\000\006\004\076\031\270\001\002\000\020" +
    "\004\ufffb\005\ufffb\030\ufffb\031\ufffb\032\ufffb\050\ufffb\076" +
    "\ufffb\001\002\000\034\006\272\010\037\011\033\021\036" +
    "\057\034\060\030\061\020\062\013\063\025\064\015\077" +
    "\017\100\022\101\012\001\002\000\006\004\076\005\uffd0" +
    "\001\002\000\006\004\076\005\274\001\002\000\004\057" +
    "\275\001\002\000\004\006\276\001\002\000\020\004\ufff9" +
    "\005\ufff9\030\ufff9\031\ufff9\032\ufff9\050\ufff9\076\ufff9\001" +
    "\002\000\034\006\300\010\037\011\033\021\036\057\034" +
    "\060\030\061\020\062\013\063\025\064\015\077\017\100" +
    "\022\101\012\001\002\000\006\004\076\005\uffd0\001\002" +
    "\000\006\004\076\005\302\001\002\000\004\064\303\001" +
    "\002\000\004\006\304\001\002\000\020\004\ufffa\005\ufffa" +
    "\030\ufffa\031\ufffa\032\ufffa\050\ufffa\076\ufffa\001\002\000" +
    "\034\006\306\010\037\011\033\021\036\057\034\060\030" +
    "\061\020\062\013\063\025\064\015\077\017\100\022\101" +
    "\012\001\002\000\006\004\076\005\uffd0\001\002\000\006" +
    "\004\076\005\310\001\002\000\004\062\311\001\002\000" +
    "\004\006\312\001\002\000\020\004\ufff5\005\ufff5\030\ufff5" +
    "\031\ufff5\032\ufff5\050\ufff5\076\ufff5\001\002\000\034\006" +
    "\314\010\037\011\033\021\036\057\034\060\030\061\020" +
    "\062\013\063\025\064\015\077\017\100\022\101\012\001" +
    "\002\000\006\004\076\005\uffd0\001\002\000\006\004\076" +
    "\005\316\001\002\000\004\060\317\001\002\000\004\006" +
    "\320\001\002\000\020\004\ufff7\005\ufff7\030\ufff7\031\ufff7" +
    "\032\ufff7\050\ufff7\076\ufff7\001\002\000\034\006\322\010" +
    "\037\011\033\021\036\057\034\060\030\061\020\062\013" +
    "\063\025\064\015\077\017\100\022\101\012\001\002\000" +
    "\006\004\076\005\uffd0\001\002\000\006\004\076\005\324" +
    "\001\002\000\004\063\325\001\002\000\004\006\326\001" +
    "\002\000\020\004\ufff6\005\ufff6\030\ufff6\031\ufff6\032\ufff6" +
    "\050\ufff6\076\ufff6\001\002\000\004\105\330\001\002\000" +
    "\046\005\uffdc\006\uffdc\010\uffdc\011\uffdc\021\uffdc\030\uffdc" +
    "\050\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc\064" +
    "\uffdc\076\uffdc\077\uffdc\100\uffdc\101\uffdc\106\uffdc\001\002" +
    "\000\004\105\332\001\002\000\046\005\uffd9\006\uffd9\010" +
    "\uffd9\011\uffd9\021\uffd9\030\uffd9\050\uffd9\057\uffd9\060\uffd9" +
    "\061\uffd9\062\uffd9\063\uffd9\064\uffd9\076\uffd9\077\uffd9\100" +
    "\uffd9\101\uffd9\106\uffd9\001\002\000\004\007\334\001\002" +
    "\000\004\105\335\001\002\000\046\005\uffe1\006\uffe1\010" +
    "\uffe1\011\uffe1\021\uffe1\030\uffe1\050\uffe1\057\uffe1\060\uffe1" +
    "\061\uffe1\062\uffe1\063\uffe1\064\uffe1\076\uffe1\077\uffe1\100" +
    "\uffe1\101\uffe1\106\uffe1\001\002\000\004\105\337\001\002" +
    "\000\046\005\uffd4\006\uffd4\010\uffd4\011\uffd4\021\uffd4\030" +
    "\uffd4\050\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4" +
    "\064\uffd4\076\uffd4\077\uffd4\100\uffd4\101\uffd4\106\uffd4\001" +
    "\002\000\004\105\341\001\002\000\046\005\uffdd\006\uffdd" +
    "\010\uffdd\011\uffdd\021\uffdd\030\uffdd\050\uffdd\057\uffdd\060" +
    "\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd\076\uffdd\077\uffdd" +
    "\100\uffdd\101\uffdd\106\uffdd\001\002\000\004\105\343\001" +
    "\002\000\046\005\uffd5\006\uffd5\010\uffd5\011\uffd5\021\uffd5" +
    "\030\uffd5\050\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063" +
    "\uffd5\064\uffd5\076\uffd5\077\uffd5\100\uffd5\101\uffd5\106\uffd5" +
    "\001\002\000\004\105\345\001\002\000\046\005\uffda\006" +
    "\uffda\010\uffda\011\uffda\021\uffda\030\uffda\050\uffda\057\uffda" +
    "\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda\076\uffda\077" +
    "\uffda\100\uffda\101\uffda\106\uffda\001\002\000\004\105\347" +
    "\001\002\000\046\005\uffd8\006\uffd8\010\uffd8\011\uffd8\021" +
    "\uffd8\030\uffd8\050\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8" +
    "\063\uffd8\064\uffd8\076\uffd8\077\uffd8\100\uffd8\101\uffd8\106" +
    "\uffd8\001\002\000\004\105\351\001\002\000\046\005\uffd3" +
    "\006\uffd3\010\uffd3\011\uffd3\021\uffd3\030\uffd3\050\uffd3\057" +
    "\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\076\uffd3" +
    "\077\uffd3\100\uffd3\101\uffd3\106\uffd3\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\004\036\003\001\001\000\002\001\001\000" +
    "\004\002\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\017\010\020\030\021\026\022\020\023\037\024" +
    "\041\025\034\026\025\027\013\030\031\031\015\032\023" +
    "\033\040\035\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\017\052\021\026\022\020" +
    "\023\037\024\041\025\034\026\025\027\013\030\031\031" +
    "\015\032\023\033\040\035\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\056\004\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\017\010\020\320" +
    "\021\026\022\020\023\037\024\041\025\034\026\025\027" +
    "\013\030\031\031\015\032\023\033\040\035\022\001\001" +
    "\000\036\017\010\020\312\021\026\022\020\023\037\024" +
    "\041\025\034\026\025\027\013\030\031\031\015\032\023" +
    "\033\040\035\022\001\001\000\036\017\010\020\304\021" +
    "\026\022\020\023\037\024\041\025\034\026\025\027\013" +
    "\030\031\031\015\032\023\033\040\035\022\001\001\000" +
    "\036\017\010\020\276\021\026\022\020\023\037\024\041" +
    "\025\034\026\025\027\013\030\031\031\015\032\023\033" +
    "\040\035\022\001\001\000\036\017\010\020\270\021\026" +
    "\022\020\023\037\024\041\025\034\026\025\027\013\030" +
    "\031\031\015\032\023\033\040\035\022\001\001\000\036" +
    "\017\010\020\264\021\026\022\020\023\037\024\041\025" +
    "\034\026\025\027\013\030\031\031\015\032\023\033\040" +
    "\035\022\001\001\000\036\017\010\020\260\021\026\022" +
    "\020\023\037\024\041\025\034\026\025\027\013\030\031" +
    "\031\015\032\023\033\040\035\022\001\001\000\036\017" +
    "\010\020\254\021\026\022\020\023\037\024\041\025\034" +
    "\026\025\027\013\030\031\031\015\032\023\033\040\035" +
    "\022\001\001\000\036\017\010\020\072\021\026\022\020" +
    "\023\037\024\041\025\034\026\025\027\013\030\031\031" +
    "\015\032\023\033\040\035\022\001\001\000\034\017\052" +
    "\021\026\022\020\023\037\024\041\025\034\026\025\027" +
    "\013\030\031\031\015\032\023\033\040\035\022\001\001" +
    "\000\012\005\100\006\077\007\076\010\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\102\007\076\010\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\017\010\020\246\021\026\022\020\023" +
    "\037\024\041\025\034\026\025\027\013\030\031\031\015" +
    "\032\023\033\040\035\022\001\001\000\036\017\010\020" +
    "\237\021\026\022\020\023\037\024\041\025\034\026\025" +
    "\027\013\030\031\031\015\032\023\033\040\035\022\001" +
    "\001\000\036\017\010\020\230\021\026\022\020\023\037" +
    "\024\041\025\034\026\025\027\013\030\031\031\015\032" +
    "\023\033\040\035\022\001\001\000\036\017\010\020\216" +
    "\021\026\022\020\023\037\024\041\025\034\026\025\027" +
    "\013\030\031\031\015\032\023\033\040\035\022\001\001" +
    "\000\002\001\001\000\036\017\010\020\202\021\026\022" +
    "\020\023\037\024\041\025\034\026\025\027\013\030\031" +
    "\031\015\032\023\033\040\035\022\001\001\000\036\017" +
    "\010\020\174\021\026\022\020\023\037\024\041\025\034" +
    "\026\025\027\013\030\031\031\015\032\023\033\040\035" +
    "\022\001\001\000\036\017\010\020\170\021\026\022\020" +
    "\023\037\024\041\025\034\026\025\027\013\030\031\031" +
    "\015\032\023\033\040\035\022\001\001\000\036\017\010" +
    "\020\162\021\026\022\020\023\037\024\041\025\034\026" +
    "\025\027\013\030\031\031\015\032\023\033\040\035\022" +
    "\001\001\000\036\017\010\020\144\021\026\022\020\023" +
    "\037\024\041\025\034\026\025\027\013\030\031\031\015" +
    "\032\023\033\040\035\022\001\001\000\036\017\010\020" +
    "\136\021\026\022\020\023\037\024\041\025\034\026\025" +
    "\027\013\030\031\031\015\032\023\033\040\035\022\001" +
    "\001\000\036\017\010\020\130\021\026\022\020\023\037" +
    "\024\041\025\034\026\025\027\013\030\031\031\015\032" +
    "\023\033\040\035\022\001\001\000\036\017\010\020\122" +
    "\021\026\022\020\023\037\024\041\025\034\026\025\027" +
    "\013\030\031\031\015\032\023\033\040\035\022\001\001" +
    "\000\034\017\052\021\026\022\020\023\037\024\041\025" +
    "\034\026\025\027\013\030\031\031\015\032\023\033\040" +
    "\035\022\001\001\000\004\004\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\017\052\021\026\022\020\023\037\024\041\025" +
    "\034\026\025\027\013\030\031\031\015\032\023\033\040" +
    "\035\022\001\001\000\004\004\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\017\052\021\026\022\020\023\037\024\041\025" +
    "\034\026\025\027\013\030\031\031\015\032\023\033\040" +
    "\035\022\001\001\000\004\004\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\017\052\021\026\022\020\023\037\024\041\025" +
    "\034\026\025\027\013\030\031\031\015\032\023\033\040" +
    "\035\022\044\151\045\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\154\001\001\000\002\001\001\000" +
    "\004\044\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\166\001" +
    "\001\000\034\017\052\021\026\022\020\023\037\024\041" +
    "\025\034\026\025\027\013\030\031\031\015\032\023\033" +
    "\040\035\022\001\001\000\004\004\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\017\052\021\026\022\020\023\037\024\041" +
    "\025\034\026\025\027\013\030\031\031\015\032\023\033" +
    "\040\035\022\001\001\000\004\004\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\017\052\021\026\022" +
    "\020\023\037\024\041\025\034\026\025\027\013\030\031" +
    "\031\015\032\023\033\040\035\022\001\001\000\004\004" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\017\052\021\026\022" +
    "\020\023\037\024\041\025\034\026\025\027\013\030\031" +
    "\031\015\032\023\033\040\035\022\001\001\000\004\004" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\224\001\001\000\034\017\052\021" +
    "\026\022\020\023\037\024\041\025\034\026\025\027\013" +
    "\030\031\031\015\032\023\033\040\035\022\001\001\000" +
    "\004\004\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\017\052\021\026\022\020\023\037\024\041\025\034\026" +
    "\025\027\013\030\031\031\015\032\023\033\040\035\022" +
    "\001\001\000\004\004\232\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\017\052\021\026\022\020\023\037\024" +
    "\041\025\034\026\025\027\013\030\031\031\015\032\023" +
    "\033\040\035\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\017\052\021\026\022\020\023" +
    "\037\024\041\025\034\026\025\027\013\030\031\031\015" +
    "\032\023\033\040\035\022\001\001\000\004\004\250\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\017\052\021\026\022\020\023" +
    "\037\024\041\025\034\026\025\027\013\030\031\031\015" +
    "\032\023\033\040\035\022\001\001\000\012\005\256\006" +
    "\077\007\076\010\074\001\001\000\012\006\102\007\076" +
    "\010\074\044\257\001\001\000\002\001\001\000\034\017" +
    "\052\021\026\022\020\023\037\024\041\025\034\026\025" +
    "\027\013\030\031\031\015\032\023\033\040\035\022\001" +
    "\001\000\012\005\262\006\077\007\076\010\074\001\001" +
    "\000\010\006\102\007\076\010\074\001\001\000\002\001" +
    "\001\000\034\017\052\021\026\022\020\023\037\024\041" +
    "\025\034\026\025\027\013\030\031\031\015\032\023\033" +
    "\040\035\022\001\001\000\012\005\266\006\077\007\076" +
    "\010\074\001\001\000\010\006\102\007\076\010\074\001" +
    "\001\000\002\001\001\000\034\017\052\021\026\022\020" +
    "\023\037\024\041\025\034\026\025\027\013\030\031\031" +
    "\015\032\023\033\040\035\022\001\001\000\012\005\272" +
    "\006\077\007\076\010\074\001\001\000\010\006\102\007" +
    "\076\010\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\017\052\021\026\022\020\023" +
    "\037\024\041\025\034\026\025\027\013\030\031\031\015" +
    "\032\023\033\040\035\022\001\001\000\012\005\300\006" +
    "\077\007\076\010\074\001\001\000\010\006\102\007\076" +
    "\010\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\017\052\021\026\022\020\023\037" +
    "\024\041\025\034\026\025\027\013\030\031\031\015\032" +
    "\023\033\040\035\022\001\001\000\012\005\306\006\077" +
    "\007\076\010\074\001\001\000\010\006\102\007\076\010" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\017\052\021\026\022\020\023\037\024" +
    "\041\025\034\026\025\027\013\030\031\031\015\032\023" +
    "\033\040\035\022\001\001\000\012\005\314\006\077\007" +
    "\076\010\074\001\001\000\010\006\102\007\076\010\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\017\052\021\026\022\020\023\037\024\041" +
    "\025\034\026\025\027\013\030\031\031\015\032\023\033" +
    "\040\035\022\001\001\000\012\005\322\006\077\007\076" +
    "\010\074\001\001\000\010\006\102\007\076\010\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG1

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG2
 return lexer.next_token(); 
    }

//@@CUPDBG0

  protected Lexer lexer;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr_list ::= XML_VERSION rdfRDF 
            {
              String RESULT =null;
		Location xmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location xmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object xm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG3
 System.out.println("xml " + e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr_list EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // rdfRDF ::= OPEN_TAG OPEN_RDF_RDF nodeElementAttrList CLOSE_TAG nodeElementList CLOSE_RDF_RDF 
            {
              String RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG4
 RESULT = e.toString() + e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfRDF",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // nodeElementList ::= nodeElementList nodeElement 
            {
              String RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG5
 RESULT = e1.toString() + e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // nodeElementList ::= nodeElement 
            {
              String RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG6
 RESULT = e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // nodeElementList ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // nodeElement ::= OPEN_TAG OPEN_RDF_RDF nodeElementAttrList CLOSE_TAG propertyEltList CLOSE_RDF_RDF 
            {
              String RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG7
 RESULT = e1.toString() + e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // nodeElement ::= OPEN_TAG RDF_ID nodeElementAttrList CLOSE_TAG propertyEltList OPEN_END_TAG RDF_ID CLOSE_TAG 
            {
              String RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		//@@CUPDBG8
 RESULT = e1.toString() + e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // nodeElement ::= OPEN_TAG RDF_ABOUT nodeElementAttrList CLOSE_TAG propertyEltList OPEN_END_TAG RDF_ABOUT CLOSE_TAG 
            {
              String RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		//@@CUPDBG9
 RESULT = e1.toString() + e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // nodeElement ::= OPEN_TAG RDF_PARSETYPE nodeElementAttrList CLOSE_TAG propertyEltList OPEN_END_TAG RDF_PARSETYPE CLOSE_TAG 
            {
              String RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		//@@CUPDBG10
 RESULT = e1.toString() + e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // nodeElement ::= OPEN_TAG RDF_RESOURCE nodeElementAttrList CLOSE_TAG propertyEltList OPEN_END_TAG RDF_RESOURCE CLOSE_TAG 
            {
              String RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		//@@CUPDBG11
 RESULT = e1.toString() + e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // nodeElement ::= OPEN_TAG RDF_NODEID nodeElementAttrList CLOSE_TAG propertyEltList OPEN_END_TAG RDF_NODEID CLOSE_TAG 
            {
              String RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		//@@CUPDBG12
 RESULT = e1.toString() + e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // nodeElement ::= OPEN_TAG RDF_DATATYPE nodeElementAttrList CLOSE_TAG propertyEltList OPEN_END_TAG RDF_DATATYPE CLOSE_TAG 
            {
              String RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		//@@CUPDBG13
 RESULT = e1.toString() + e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // nodeElement ::= OPEN_TAG OPEN_RDF_DESCRIPTION nodeElementAttrList CLOSE_TAG propertyEltList CLOSE_RDF_DESCRIPTION 
            {
              String RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG14
 RESULT = e1.toString() + e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // nodeElement ::= OPEN_TAG OPEN_RDF_TYPE nodeElementAttrList CLOSE_TAG propertyEltList rdfTypeCloseTag 
            {
              String RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG15
 RESULT = e1.toString() + e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // nodeElement ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // nodeElementAttrList ::= nodeElementAttrList nodeElementAttr 
            {
              String RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG16
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementAttrList",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // nodeElementAttrList ::= nodeElementAttr 
            {
              String RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG17
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementAttrList",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // nodeElementAttrList ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementAttrList",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // nodeElementAttr ::= rdfRDFAttr 
            {
              String RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG18
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementAttr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // nodeElementAttr ::= rdfParseTypeAttr 
            {
              String RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG19
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementAttr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // nodeElementAttr ::= rdfResourceAttr 
            {
              String RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG20
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementAttr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // nodeElementAttr ::= rdfAboutAttr 
            {
              String RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG21
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementAttr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // nodeElementAttr ::= rdfIDAttr 
            {
              String RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG22
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementAttr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // nodeElementAttr ::= rdfNodeIDAttr 
            {
              String RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG23
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementAttr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // nodeElementAttr ::= rdfDatatypeAttr 
            {
              String RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG24
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementAttr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // nodeElementAttr ::= rdfLiAttr 
            {
              String RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG25
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementAttr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // nodeElementAttr ::= rdfAboutEachAttr 
            {
              String RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG26
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementAttr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // nodeElementAttr ::= rdfaboutEachPrefixAttr 
            {
              String RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG27
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementAttr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // nodeElementAttr ::= rdfBagIDAttr 
            {
              String RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG28
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementAttr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // nodeElementAttr ::= genericAttribute 
            {
              String RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG29
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementAttr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // nodeElementAttr ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementAttr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // genericAttribute ::= genericAttribute TAG_NAME_WITH_SCHEME EQUALS PROPERTY_VALUE 
            {
              String RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG30
 RESULT = e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("genericAttribute",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // genericAttribute ::= TAG_NAME_WITH_SCHEME EQUALS PROPERTY_VALUE 
            {
              String RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG31
 RESULT = e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("genericAttribute",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // genericAttribute ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("genericAttribute",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // rdfRDFAttr ::= OPEN_RDF_RDF EQUALS PROPERTY_VALUE 
            {
              String RESULT =null;
		Location pvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String pv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG32
 RESULT = pv; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfRDFAttr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // rdfParseTypeAttr ::= RDF_PARSETYPE EQUALS PROPERTY_VALUE 
            {
              String RESULT =null;
		Location pvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String pv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG33
 RESULT = pv; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfParseTypeAttr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // rdfResourceAttr ::= RDF_RESOURCE EQUALS PROPERTY_VALUE 
            {
              String RESULT =null;
		Location pvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String pv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG34
 RESULT = pv; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfResourceAttr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // rdfAboutAttr ::= RDF_ABOUT EQUALS PROPERTY_VALUE 
            {
              String RESULT =null;
		Location pvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String pv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG35
 RESULT = pv; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfAboutAttr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // rdfIDAttr ::= RDF_ID EQUALS PROPERTY_VALUE 
            {
              String RESULT =null;
		Location pvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String pv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG36
 RESULT = pv; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfIDAttr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // rdfNodeIDAttr ::= RDF_NODEID EQUALS PROPERTY_VALUE 
            {
              String RESULT =null;
		Location pvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String pv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG37
 RESULT = pv; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfNodeIDAttr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // rdfDatatypeAttr ::= RDF_DATATYPE EQUALS PROPERTY_VALUE 
            {
              String RESULT =null;
		Location pvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String pv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG38
 RESULT = pv; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfDatatypeAttr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // rdfLiAttr ::= OPEN_RDF_LI EQUALS PROPERTY_VALUE 
            {
              String RESULT =null;
		Location pvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String pv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG39
 RESULT = pv; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfLiAttr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // rdfDescriptionAttr ::= OPEN_RDF_DESCRIPTION EQUALS PROPERTY_VALUE 
            {
              String RESULT =null;
		Location pvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String pv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG40
 RESULT = pv; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfDescriptionAttr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // rdfAboutEachAttr ::= RDF_ABOUTEACH EQUALS PROPERTY_VALUE 
            {
              String RESULT =null;
		Location pvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String pv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG41
 RESULT = pv; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfAboutEachAttr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // rdfaboutEachPrefixAttr ::= RDF_ABOUTEACHPREFIX EQUALS PROPERTY_VALUE 
            {
              String RESULT =null;
		Location pvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String pv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG42
 RESULT = pv; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfaboutEachPrefixAttr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // rdfBagIDAttr ::= RDF_BAGID EQUALS PROPERTY_VALUE 
            {
              String RESULT =null;
		Location pvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String pv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG43
 RESULT = pv; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfBagIDAttr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // propertyEltList ::= propertyEltList propertyElt 
            {
              String RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG44
 RESULT = e1.toString() + e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("propertyEltList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // propertyEltList ::= propertyElt 
            {
              String RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG45
 RESULT = e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("propertyEltList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // propertyEltList ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("propertyEltList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // propertyElt ::= resourcePropertyElt 
            {
              String RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG46
 RESULT = e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("propertyElt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // propertyElt ::= 
            {
              String RESULT =null;
		//@@CUPDBG47
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("propertyElt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // resourcePropertyElt ::= OPEN_TAG OPEN_RDF_RDF CLOSE_TAG nodeElement CLOSE_RDF_RDF 
            {
              String RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG48
 RESULT = e1.toString() + e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resourcePropertyElt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // resourcePropertyElt ::= OPEN_TAG OPEN_RDF_RDF nodeElementAttrList CLOSE_TAG nodeElement CLOSE_RDF_RDF 
            {
              String RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG49
 RESULT = e1.toString() + e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resourcePropertyElt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // resourcePropertyElt ::= OPEN_TAG RDF_ID CLOSE_TAG nodeElement OPEN_END_TAG RDF_ID CLOSE_TAG 
            {
              String RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		//@@CUPDBG50
 RESULT = e1.toString() + e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resourcePropertyElt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // resourcePropertyElt ::= OPEN_TAG RDF_ABOUT nodeElementAttrList CLOSE_TAG nodeElement OPEN_END_TAG RDF_ABOUT CLOSE_TAG 
            {
              String RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		//@@CUPDBG51
 RESULT = e1.toString() + e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resourcePropertyElt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // resourcePropertyElt ::= OPEN_TAG RDF_PARSETYPE nodeElementAttrList CLOSE_TAG nodeElement OPEN_END_TAG RDF_PARSETYPE CLOSE_TAG 
            {
              String RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		//@@CUPDBG52
 RESULT = e1.toString() + e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resourcePropertyElt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // resourcePropertyElt ::= OPEN_TAG RDF_RESOURCE nodeElementAttrList CLOSE_TAG nodeElement OPEN_END_TAG RDF_RESOURCE CLOSE_TAG 
            {
              String RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		//@@CUPDBG53
 RESULT = e1.toString() + e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resourcePropertyElt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // resourcePropertyElt ::= OPEN_TAG RDF_NODEID nodeElementAttrList CLOSE_TAG nodeElement OPEN_END_TAG RDF_NODEID CLOSE_TAG 
            {
              String RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		//@@CUPDBG54
 RESULT = e1.toString() + e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resourcePropertyElt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // resourcePropertyElt ::= OPEN_TAG RDF_DATATYPE CLOSE_TAG nodeElement OPEN_END_TAG RDF_DATATYPE CLOSE_TAG 
            {
              String RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		//@@CUPDBG55
 RESULT = e1.toString() + e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resourcePropertyElt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // resourcePropertyElt ::= OPEN_TAG RDF_DATATYPE nodeElementAttrList CLOSE_TAG nodeElement OPEN_END_TAG RDF_DATATYPE CLOSE_TAG 
            {
              String RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		//@@CUPDBG56
 RESULT = e1.toString() + e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resourcePropertyElt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // resourcePropertyElt ::= OPEN_TAG OPEN_RDF_DESCRIPTION nodeElementAttrList CLOSE_TAG nodeElement CLOSE_RDF_DESCRIPTION 
            {
              String RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG57
 RESULT = e1.toString() + e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resourcePropertyElt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // resourcePropertyElt ::= OPEN_TAG RDF_ABOUTEACH nodeElementAttrList CLOSE_TAG nodeElement OPEN_END_TAG RDF_ABOUTEACH CLOSE_TAG 
            {
              String RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		//@@CUPDBG58
 RESULT = e1.toString() + e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resourcePropertyElt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // resourcePropertyElt ::= OPEN_TAG RDF_ABOUTEACHPREFIX nodeElementAttrList CLOSE_TAG nodeElement OPEN_END_TAG RDF_ABOUTEACHPREFIX CLOSE_TAG 
            {
              String RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		//@@CUPDBG59
 RESULT = e1.toString() + e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resourcePropertyElt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // resourcePropertyElt ::= OPEN_TAG RDF_BAGID nodeElementAttrList CLOSE_TAG nodeElement OPEN_END_TAG RDF_BAGID CLOSE_TAG 
            {
              String RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		//@@CUPDBG60
 RESULT = e1.toString() + e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resourcePropertyElt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // resourcePropertyElt ::= OPEN_TAG OPEN_RDF_TYPE nodeElementAttrList rdfTypeEND 
            {
              String RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG61
 RESULT = e1.toString() + e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resourcePropertyElt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // resourcePropertyElt ::= genericTag 
            {
              String RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG62
 RESULT = e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resourcePropertyElt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // rdfTypeEND ::= CLOSE_TAG nodeElement rdfTypeCloseTag 
            {
              String RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG63
 RESULT = e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfTypeEND",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // rdfTypeEND ::= rdfTypeCloseTag 
            {
              String RESULT =null;
		//@@CUPDBG64
 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfTypeEND",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // rdfTypeCloseTag ::= CLOSE_SINGULAR_TAG 
            {
              String RESULT =null;
		//@@CUPDBG65
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfTypeCloseTag",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // rdfTypeCloseTag ::= OPEN_END_TAG OPEN_RDF_TYPE CLOSE_TAG 
            {
              String RESULT =null;
		//@@CUPDBG66
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfTypeCloseTag",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // rdfTypeCloseTag ::= OPEN_RDF_TYPE CLOSE_TAG 
            {
              String RESULT =null;
		//@@CUPDBG67
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfTypeCloseTag",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // rdfTypeCloseTag ::= CLOSE_RDF_TYPE 
            {
              String RESULT =null;
		//@@CUPDBG68
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfTypeCloseTag",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // genericTag ::= OPEN_TAG TAG_NAME_WITH_SCHEME nodeElementAttrList INSIDE_TEXT TAG_NAME_WITH_SCHEME CLOSE_TAG 
            {
              String RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG69
 RESULT = e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("genericTag",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // genericTag ::= OPEN_TAG TAG_NAME_WITH_SCHEME CLOSE_TAG OPEN_END_TAG TAG_NAME_WITH_SCHEME CLOSE_TAG 
            {
              String RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG70
 RESULT = e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("genericTag",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
