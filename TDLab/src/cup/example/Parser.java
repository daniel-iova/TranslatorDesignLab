
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\022\004\000\002\002\004\000\002\002" +
    "\010\000\002\003\004\000\002\003\003\000\002\003\002" +
    "\000\002\004\010\000\002\004\010\000\002\004\010\000" +
    "\002\004\010\000\002\004\010\000\002\004\010\000\002" +
    "\004\002\000\002\011\004\000\002\011\003\000\002\011" +
    "\002\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\002\000\002\021\005\000\002\021\002\000\002" +
    "\013\005\000\002\017\005\000\002\015\005\000\002\014" +
    "\005\000\002\016\005\000\002\020\005\000\002\005\004" +
    "\000\002\005\003\000\002\005\002\000\002\006\003\000" +
    "\002\010\006\000\002\010\006\000\002\010\006\000\002" +
    "\010\006\000\002\010\006\000\002\010\006\000\002\010" +
    "\006\000\002\010\003\000\002\010\002\000\002\025\003" +
    "\000\002\025\004\000\002\026\003\000\002\026\004\000" +
    "\002\027\003\000\002\027\004\000\002\030\003\000\002" +
    "\030\004\000\002\031\003\000\002\031\004\000\002\023" +
    "\003\000\002\023\004\000\002\024\003\000\002\024\004" +
    "\000\002\007\010\000\002\007\010\000\002\007\005\000" +
    "\002\035\003\000\002\035\003\000\002\035\005\000\002" +
    "\035\004\000\002\044\005\000\002\044\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\005\000\002\032\004" +
    "\000\002\041\005\000\002\041\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\005\000\002\033\004\000\002" +
    "\042\005\000\002\042\003\000\002\034\003\000\002\034" +
    "\005\000\002\034\004\000\002\043\005\000\002\043\003" +
    "\000\002\036\003\000\002\036\005\000\002\036\004\000" +
    "\002\045\005\000\002\045\003\000\002\037\003\000\002" +
    "\037\005\000\002\037\004\000\002\046\005\000\002\046" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\005" +
    "\000\002\040\004\000\002\047\005\000\002\047\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\004\004\005\001\002\000\004\002\317\001" +
    "\002\000\004\005\006\001\002\000\004\006\010\001\002" +
    "\000\004\002\001\001\002\000\020\006\021\010\ufff2\011" +
    "\014\015\016\016\020\024\013\026\022\001\002\000\042" +
    "\006\ufff1\007\ufff1\010\ufff1\011\ufff1\015\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\026\ufff1" +
    "\027\ufff1\030\ufff1\032\ufff1\001\002\000\042\006\uffee\007" +
    "\uffee\010\uffee\011\uffee\015\uffee\016\uffee\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\023\uffee\024\uffee\026\uffee\027\uffee\030" +
    "\uffee\032\uffee\001\002\000\004\025\315\001\002\000\004" +
    "\025\123\001\002\000\042\006\uffef\007\uffef\010\uffef\011" +
    "\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef" +
    "\023\uffef\024\uffef\026\uffef\027\uffef\030\uffef\032\uffef\001" +
    "\002\000\004\025\313\001\002\000\042\006\uffec\007\uffec" +
    "\010\uffec\011\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021" +
    "\uffec\022\uffec\023\uffec\024\uffec\026\uffec\027\uffec\030\uffec" +
    "\032\uffec\001\002\000\004\025\141\001\002\000\004\025" +
    "\254\001\002\000\004\025\164\001\002\000\042\006\ufff0" +
    "\007\ufff0\010\ufff0\011\ufff0\015\ufff0\016\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\026\ufff0\027\ufff0" +
    "\030\ufff0\032\ufff0\001\002\000\042\006\ufff3\007\ufff3\010" +
    "\ufff3\011\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\026\ufff3\027\ufff3\030\ufff3\032" +
    "\ufff3\001\002\000\042\006\uffed\007\uffed\010\uffed\011\uffed" +
    "\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023" +
    "\uffed\024\uffed\026\uffed\027\uffed\030\uffed\032\uffed\001\002" +
    "\000\020\006\021\010\027\011\014\015\016\016\020\024" +
    "\013\026\022\001\002\000\020\005\031\006\ufffc\007\ufffc" +
    "\010\ufffc\021\ufffc\022\ufffc\032\ufffc\001\002\000\042\006" +
    "\ufff4\007\ufff4\010\ufff4\011\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\026\ufff4\027" +
    "\ufff4\030\ufff4\032\ufff4\001\002\000\016\006\055\011\061" +
    "\015\056\016\060\017\057\020\054\001\002\000\020\005" +
    "\ufffd\006\ufffd\007\ufffd\010\ufffd\021\ufffd\022\ufffd\032\ufffd" +
    "\001\002\000\020\005\031\006\041\007\042\010\037\021" +
    "\034\022\044\032\035\001\002\000\004\006\052\001\002" +
    "\000\014\006\041\007\042\010\037\021\034\022\044\001" +
    "\002\000\036\002\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5" +
    "\011\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\027\uffd5\001\002\000\014\005\031\006\ufff5" +
    "\007\ufff5\021\ufff5\022\ufff5\001\002\000\004\002\uffff\001" +
    "\002\000\004\010\046\001\002\000\044\002\uffbd\005\uffbd" +
    "\006\uffbd\007\uffbd\010\uffbd\011\uffbd\015\uffbd\016\uffbd\017" +
    "\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\026\uffbd\027\uffbd" +
    "\030\uffbd\032\uffbd\001\002\000\044\002\uffb9\005\uffb9\006" +
    "\uffb9\007\uffb9\010\uffb9\011\uffb9\015\uffb9\016\uffb9\017\uffb9" +
    "\020\uffb9\021\uffb9\022\uffb9\023\uffb9\026\uffb9\027\uffb9\030" +
    "\uffb9\032\uffb9\001\002\000\044\002\uffbe\005\uffbe\006\uffbe" +
    "\007\uffbe\010\uffbe\011\uffbe\015\uffbe\016\uffbe\017\uffbe\020" +
    "\uffbe\021\uffbe\022\uffbe\023\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\032\uffbe\001\002\000\020\005\ufffe\006\ufffe\007\ufffe\010" +
    "\ufffe\021\ufffe\022\ufffe\032\ufffe\001\002\000\044\002\uffbb" +
    "\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\015\uffbb\016" +
    "\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\032\uffbb\001\002\000\012\006\041\007" +
    "\042\021\034\022\044\001\002\000\044\002\uffba\005\uffba" +
    "\006\uffba\007\uffba\010\uffba\011\uffba\015\uffba\016\uffba\017" +
    "\uffba\020\uffba\021\uffba\022\uffba\023\uffba\026\uffba\027\uffba" +
    "\030\uffba\032\uffba\001\002\000\036\002\uffd4\005\uffd4\006" +
    "\uffd4\007\uffd4\010\uffd4\011\uffd4\015\uffd4\016\uffd4\017\uffd4" +
    "\020\uffd4\021\uffd4\022\uffd4\023\uffd4\027\uffd4\001\002\000" +
    "\004\010\053\001\002\000\044\002\uffbc\005\uffbc\006\uffbc" +
    "\007\uffbc\010\uffbc\011\uffbc\015\uffbc\016\uffbc\017\uffbc\020" +
    "\uffbc\021\uffbc\022\uffbc\023\uffbc\026\uffbc\027\uffbc\030\uffbc" +
    "\032\uffbc\001\002\000\020\006\021\010\ufff2\011\014\015" +
    "\016\016\020\024\013\026\022\001\002\000\020\006\021" +
    "\010\ufff2\011\014\015\016\016\020\024\013\026\022\001" +
    "\002\000\020\006\021\010\ufff2\011\014\015\016\016\020" +
    "\024\013\026\022\001\002\000\020\006\021\010\ufff2\011" +
    "\014\015\016\016\020\024\013\026\022\001\002\000\020" +
    "\006\021\010\ufff2\011\014\015\016\016\020\024\013\026" +
    "\022\001\002\000\020\006\021\010\ufff2\011\014\015\016" +
    "\016\020\024\013\026\022\001\002\000\020\006\021\010" +
    "\063\011\014\015\016\016\020\024\013\026\022\001\002" +
    "\000\014\005\065\010\uffe0\011\uffe0\021\uffe0\022\uffe0\001" +
    "\002\000\034\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf" +
    "\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023" +
    "\uffdf\027\uffdf\001\002\000\022\006\106\011\114\015\110" +
    "\016\113\017\111\020\107\024\105\026\112\001\002\000" +
    "\034\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\015\uffd7" +
    "\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\027" +
    "\uffd7\001\002\000\034\005\uffe1\006\uffe1\007\uffe1\010\uffe1" +
    "\011\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\027\uffe1\001\002\000\014\005\065\010\074" +
    "\011\071\021\072\022\075\001\002\000\004\010\104\001" +
    "\002\000\004\011\102\001\002\000\042\005\uffa9\006\uffa9" +
    "\007\uffa9\010\uffa9\011\uffa9\015\uffa9\016\uffa9\017\uffa9\020" +
    "\uffa9\021\uffa9\022\uffa9\023\uffa9\026\uffa9\027\uffa9\030\uffa9" +
    "\032\uffa9\001\002\000\012\005\031\011\ufff5\021\ufff5\022" +
    "\ufff5\001\002\000\042\005\uffad\006\uffad\007\uffad\010\uffad" +
    "\011\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022" +
    "\uffad\023\uffad\026\uffad\027\uffad\030\uffad\032\uffad\001\002" +
    "\000\042\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\015" +
    "\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8" +
    "\026\ufff8\027\ufff8\030\ufff8\032\ufff8\001\002\000\034\005" +
    "\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\015\uffe2\016\uffe2" +
    "\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\027\uffe2\001" +
    "\002\000\010\011\071\021\072\022\075\001\002\000\042" +
    "\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\015\uffaa\016" +
    "\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\026\uffaa" +
    "\027\uffaa\030\uffaa\032\uffaa\001\002\000\004\010\103\001" +
    "\002\000\042\005\uffac\006\uffac\007\uffac\010\uffac\011\uffac" +
    "\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023" +
    "\uffac\026\uffac\027\uffac\030\uffac\032\uffac\001\002\000\042" +
    "\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab\015\uffab\016" +
    "\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\026\uffab" +
    "\027\uffab\030\uffab\032\uffab\001\002\000\024\006\021\010" +
    "\256\011\014\015\016\016\020\022\257\024\013\026\022" +
    "\032\ufff2\001\002\000\030\006\021\007\ufff2\010\ufff2\011" +
    "\014\015\016\016\020\021\ufff2\022\ufff2\024\013\026\022" +
    "\032\ufff2\001\002\000\032\006\021\010\ufff2\011\014\015" +
    "\016\016\020\020\ufff2\021\ufff2\022\ufff2\024\013\026\022" +
    "\027\ufff2\032\ufff2\001\002\000\004\010\212\001\002\000" +
    "\032\006\021\010\ufff2\011\014\015\016\016\020\017\ufff2" +
    "\021\ufff2\022\ufff2\023\ufff2\024\013\026\022\032\ufff2\001" +
    "\002\000\030\006\021\010\ufff2\011\014\015\016\016\020" +
    "\021\ufff2\022\ufff2\024\013\026\022\030\ufff2\032\ufff2\001" +
    "\002\000\026\006\021\010\ufff2\011\014\015\016\016\020" +
    "\021\ufff2\022\ufff2\024\013\026\022\032\ufff2\001\002\000" +
    "\026\006\021\010\ufff2\011\014\015\016\016\020\021\ufff2" +
    "\022\ufff2\024\013\026\022\032\ufff2\001\002\000\026\006" +
    "\021\010\074\011\120\015\016\016\020\021\072\022\075" +
    "\024\013\026\022\032\121\001\002\000\034\005\uffcf\006" +
    "\uffcf\007\uffcf\010\uffcf\011\uffcf\015\uffcf\016\uffcf\017\uffcf" +
    "\020\uffcf\021\uffcf\022\uffcf\023\uffcf\027\uffcf\001\002\000" +
    "\034\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\027" +
    "\uffdb\001\002\000\006\010\104\025\123\001\002\000\012" +
    "\010\074\011\071\021\072\022\075\001\002\000\034\005" +
    "\uffce\006\uffce\007\uffce\010\uffce\011\uffce\015\uffce\016\uffce" +
    "\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\027\uffce\001" +
    "\002\000\004\031\124\001\002\000\042\006\uffe7\007\uffe7" +
    "\010\uffe7\011\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\026\uffe7\027\uffe7\030\uffe7" +
    "\032\uffe7\001\002\000\026\006\021\010\132\011\014\015" +
    "\016\016\134\021\127\022\126\024\013\026\022\032\135" +
    "\001\002\000\042\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011" +
    "\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8" +
    "\023\uffa8\026\uffa8\027\uffa8\030\uffa8\032\uffa8\001\002\000" +
    "\004\016\145\001\002\000\034\005\uffd1\006\uffd1\007\uffd1" +
    "\010\uffd1\011\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\027\uffd1\001\002\000\034\005\uffdc" +
    "\006\uffdc\007\uffdc\010\uffdc\011\uffdc\015\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\027\uffdc\001\002" +
    "\000\012\005\031\016\ufff5\021\ufff5\022\ufff5\001\002\000" +
    "\042\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\015\uffa4" +
    "\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\026" +
    "\uffa4\027\uffa4\030\uffa4\032\uffa4\001\002\000\006\010\140" +
    "\025\141\001\002\000\012\010\132\016\136\021\127\022" +
    "\126\001\002\000\004\010\140\001\002\000\034\005\uffd0" +
    "\006\uffd0\007\uffd0\010\uffd0\011\uffd0\015\uffd0\016\uffd0\017" +
    "\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\027\uffd0\001\002" +
    "\000\042\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6\015" +
    "\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6" +
    "\026\uffa6\027\uffa6\030\uffa6\032\uffa6\001\002\000\004\031" +
    "\142\001\002\000\042\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023" +
    "\uffe6\024\uffe6\026\uffe6\027\uffe6\030\uffe6\032\uffe6\001\002" +
    "\000\010\016\136\021\127\022\126\001\002\000\042\005" +
    "\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\015\uffa5\016\uffa5" +
    "\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\026\uffa5\027" +
    "\uffa5\030\uffa5\032\uffa5\001\002\000\004\010\146\001\002" +
    "\000\042\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\015" +
    "\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7" +
    "\026\uffa7\027\uffa7\030\uffa7\032\uffa7\001\002\000\030\006" +
    "\021\010\153\011\014\015\016\016\020\021\152\022\151" +
    "\024\013\026\156\030\155\032\160\001\002\000\034\005" +
    "\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\015\uff9e\016\uff9e" +
    "\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\027\uff9e\001" +
    "\002\000\034\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3" +
    "\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023" +
    "\uffa3\027\uffa3\001\002\000\004\012\170\001\002\000\014" +
    "\005\031\021\ufff5\022\ufff5\026\ufff5\030\ufff5\001\002\000" +
    "\034\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\015\uffc9" +
    "\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\027" +
    "\uffc9\001\002\000\034\005\uffa2\006\uffa2\007\uffa2\010\uffa2" +
    "\011\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022" +
    "\uffa2\023\uffa2\027\uffa2\001\002\000\006\010\163\025\164" +
    "\001\002\000\034\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\027\uffd8\001\002\000\014\010\153\021\152\022" +
    "\151\026\162\030\155\001\002\000\034\005\uffc8\006\uffc8" +
    "\007\uffc8\010\uffc8\011\uffc8\015\uffc8\016\uffc8\017\uffc8\020" +
    "\uffc8\021\uffc8\022\uffc8\023\uffc8\027\uffc8\001\002\000\004" +
    "\010\163\001\002\000\034\005\uffa0\006\uffa0\007\uffa0\010" +
    "\uffa0\011\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0" +
    "\022\uffa0\023\uffa0\027\uffa0\001\002\000\004\031\165\001" +
    "\002\000\042\006\uffe4\007\uffe4\010\uffe4\011\uffe4\015\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\032\uffe4\001\002\000\012" +
    "\021\152\022\151\026\162\030\155\001\002\000\034\005" +
    "\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\015\uff9f\016\uff9f" +
    "\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\027\uff9f\001" +
    "\002\000\004\010\171\001\002\000\034\005\uffa1\006\uffa1" +
    "\007\uffa1\010\uffa1\011\uffa1\015\uffa1\016\uffa1\017\uffa1\020" +
    "\uffa1\021\uffa1\022\uffa1\023\uffa1\027\uffa1\001\002\000\032" +
    "\006\021\010\201\011\014\015\016\016\020\017\174\021" +
    "\176\022\175\023\173\024\013\026\022\032\203\001\002" +
    "\000\042\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\015" +
    "\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7" +
    "\026\uffb7\027\uffb7\030\uffb7\032\uffb7\001\002\000\004\010" +
    "\211\001\002\000\042\005\uffb8\006\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022" +
    "\uffb8\023\uffb8\026\uffb8\027\uffb8\030\uffb8\032\uffb8\001\002" +
    "\000\004\017\207\001\002\000\034\005\uffcd\006\uffcd\007" +
    "\uffcd\010\uffcd\011\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd" +
    "\021\uffcd\022\uffcd\023\uffcd\027\uffcd\001\002\000\042\005" +
    "\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\015\uffb3\016\uffb3" +
    "\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\032\uffb3\001\002\000\014\005\031\017\ufff5" +
    "\021\ufff5\022\ufff5\023\ufff5\001\002\000\034\005\uffda\006" +
    "\uffda\007\uffda\010\uffda\011\uffda\015\uffda\016\uffda\017\uffda" +
    "\020\uffda\021\uffda\022\uffda\023\uffda\027\uffda\001\002\000" +
    "\014\010\201\017\174\021\176\022\175\023\173\001\002" +
    "\000\034\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\015" +
    "\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc" +
    "\027\uffcc\001\002\000\012\017\174\021\176\022\175\023" +
    "\173\001\002\000\042\005\uffb4\006\uffb4\007\uffb4\010\uffb4" +
    "\011\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022" +
    "\uffb4\023\uffb4\026\uffb4\027\uffb4\030\uffb4\032\uffb4\001\002" +
    "\000\004\010\210\001\002\000\042\005\uffb6\006\uffb6\007" +
    "\uffb6\010\uffb6\011\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6" +
    "\021\uffb6\022\uffb6\023\uffb6\026\uffb6\027\uffb6\030\uffb6\032" +
    "\uffb6\001\002\000\042\005\uffb5\006\uffb5\007\uffb5\010\uffb5" +
    "\011\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\023\uffb5\026\uffb5\027\uffb5\030\uffb5\032\uffb5\001\002" +
    "\000\014\010\221\015\215\021\216\022\222\032\220\001" +
    "\002\000\034\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3" +
    "\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023" +
    "\uffd3\027\uffd3\001\002\000\034\005\uffdd\006\uffdd\007\uffdd" +
    "\010\uffdd\011\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\027\uffdd\001\002\000\004\010\230" +
    "\001\002\000\004\015\226\001\002\000\042\005\uffae\006" +
    "\uffae\007\uffae\010\uffae\011\uffae\015\uffae\016\uffae\017\uffae" +
    "\020\uffae\021\uffae\022\uffae\023\uffae\026\uffae\027\uffae\030" +
    "\uffae\032\uffae\001\002\000\012\010\221\015\215\021\216" +
    "\022\222\001\002\000\012\005\031\015\ufff5\021\ufff5\022" +
    "\ufff5\001\002\000\042\005\uffb2\006\uffb2\007\uffb2\010\uffb2" +
    "\011\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022" +
    "\uffb2\023\uffb2\026\uffb2\027\uffb2\030\uffb2\032\uffb2\001\002" +
    "\000\010\015\215\021\216\022\222\001\002\000\042\005" +
    "\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\015\uffaf\016\uffaf" +
    "\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\026\uffaf\027" +
    "\uffaf\030\uffaf\032\uffaf\001\002\000\034\005\uffd2\006\uffd2" +
    "\007\uffd2\010\uffd2\011\uffd2\015\uffd2\016\uffd2\017\uffd2\020" +
    "\uffd2\021\uffd2\022\uffd2\023\uffd2\027\uffd2\001\002\000\004" +
    "\010\227\001\002\000\042\005\uffb1\006\uffb1\007\uffb1\010" +
    "\uffb1\011\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1" +
    "\022\uffb1\023\uffb1\026\uffb1\027\uffb1\030\uffb1\032\uffb1\001" +
    "\002\000\042\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0" +
    "\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023" +
    "\uffb0\026\uffb0\027\uffb0\030\uffb0\032\uffb0\001\002\000\032" +
    "\006\021\010\240\011\014\015\016\016\020\020\236\021" +
    "\235\022\234\024\013\026\022\027\242\032\241\001\002" +
    "\000\034\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\015" +
    "\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb" +
    "\027\uffcb\001\002\000\034\005\uffd9\006\uffd9\007\uffd9\010" +
    "\uffd9\011\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\027\uffd9\001\002\000\042\005\uffc4\006" +
    "\uffc4\007\uffc4\010\uffc4\011\uffc4\015\uffc4\016\uffc4\017\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\023\uffc4\026\uffc4\027\uffc4\030" +
    "\uffc4\032\uffc4\001\002\000\004\020\247\001\002\000\004" +
    "\010\246\001\002\000\042\005\uffbf\006\uffbf\007\uffbf\010" +
    "\uffbf\011\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf" +
    "\022\uffbf\023\uffbf\026\uffbf\027\uffbf\030\uffbf\032\uffbf\001" +
    "\002\000\014\005\031\020\ufff5\021\ufff5\022\ufff5\027\ufff5" +
    "\001\002\000\014\010\240\020\236\021\235\022\234\027" +
    "\242\001\002\000\042\005\uffc3\006\uffc3\007\uffc3\010\uffc3" +
    "\011\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022" +
    "\uffc3\023\uffc3\026\uffc3\027\uffc3\030\uffc3\032\uffc3\001\002" +
    "\000\034\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\015" +
    "\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca" +
    "\027\uffca\001\002\000\012\020\236\021\235\022\234\027" +
    "\242\001\002\000\042\005\uffc0\006\uffc0\007\uffc0\010\uffc0" +
    "\011\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022" +
    "\uffc0\023\uffc0\026\uffc0\027\uffc0\030\uffc0\032\uffc0\001\002" +
    "\000\042\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\015" +
    "\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1" +
    "\026\uffc1\027\uffc1\030\uffc1\032\uffc1\001\002\000\004\010" +
    "\250\001\002\000\042\005\uffc2\006\uffc2\007\uffc2\010\uffc2" +
    "\011\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022" +
    "\uffc2\023\uffc2\026\uffc2\027\uffc2\030\uffc2\032\uffc2\001\002" +
    "\000\030\006\253\007\042\010\037\011\014\015\016\016" +
    "\020\021\034\022\044\024\013\026\022\032\035\001\002" +
    "\000\034\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\015" +
    "\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde" +
    "\027\uffde\001\002\000\006\010\046\025\254\001\002\000" +
    "\004\031\255\001\002\000\042\006\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\026\uffe8\027\uffe8\030\uffe8\032\uffe8" +
    "\001\002\000\004\021\264\001\002\000\034\005\uffc5\006" +
    "\uffc5\007\uffc5\010\uffc5\011\uffc5\015\uffc5\016\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\022\uffc5\023\uffc5\027\uffc5\001\002\000" +
    "\020\006\021\011\014\015\016\016\020\024\013\026\022" +
    "\032\261\001\002\000\004\024\262\001\002\000\004\010" +
    "\263\001\002\000\034\005\uffc7\006\uffc7\007\uffc7\010\uffc7" +
    "\011\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022" +
    "\uffc7\023\uffc7\027\uffc7\001\002\000\004\024\265\001\002" +
    "\000\004\010\266\001\002\000\034\005\uffc6\006\uffc6\007" +
    "\uffc6\010\uffc6\011\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6" +
    "\021\uffc6\022\uffc6\023\uffc6\027\uffc6\001\002\000\020\006" +
    "\021\010\270\011\014\015\016\016\020\024\013\026\022" +
    "\001\002\000\014\005\065\010\uffe0\016\uffe0\021\uffe0\022" +
    "\uffe0\001\002\000\014\005\065\010\132\016\136\021\127" +
    "\022\126\001\002\000\042\005\ufff9\006\ufff9\007\ufff9\010" +
    "\ufff9\011\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9" +
    "\022\ufff9\023\ufff9\026\ufff9\027\ufff9\030\ufff9\032\ufff9\001" +
    "\002\000\020\006\021\010\274\011\014\015\016\016\020" +
    "\024\013\026\022\001\002\000\016\005\065\010\uffe0\017" +
    "\uffe0\021\uffe0\022\uffe0\023\uffe0\001\002\000\016\005\065" +
    "\010\201\017\174\021\176\022\175\023\173\001\002\000" +
    "\042\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\015\ufff7" +
    "\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\026" +
    "\ufff7\027\ufff7\030\ufff7\032\ufff7\001\002\000\020\006\021" +
    "\010\300\011\014\015\016\016\020\024\013\026\022\001" +
    "\002\000\014\005\065\010\uffe0\015\uffe0\021\uffe0\022\uffe0" +
    "\001\002\000\014\005\065\010\221\015\215\021\216\022" +
    "\222\001\002\000\042\005\ufffa\006\ufffa\007\ufffa\010\ufffa" +
    "\011\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022" +
    "\ufffa\023\ufffa\026\ufffa\027\ufffa\030\ufffa\032\ufffa\001\002" +
    "\000\020\006\021\010\304\011\014\015\016\016\020\024" +
    "\013\026\022\001\002\000\016\005\065\006\uffe0\007\uffe0" +
    "\010\uffe0\021\uffe0\022\uffe0\001\002\000\016\005\065\006" +
    "\041\007\042\010\037\021\034\022\044\001\002\000\042" +
    "\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\015\ufffb\016" +
    "\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\026\ufffb" +
    "\027\ufffb\030\ufffb\032\ufffb\001\002\000\020\006\021\010" +
    "\310\011\014\015\016\016\020\024\013\026\022\001\002" +
    "\000\016\005\065\010\uffe0\020\uffe0\021\uffe0\022\uffe0\027" +
    "\uffe0\001\002\000\016\005\065\010\240\020\236\021\235" +
    "\022\234\027\242\001\002\000\042\005\ufff6\006\ufff6\007" +
    "\ufff6\010\ufff6\011\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\021\ufff6\022\ufff6\023\ufff6\026\ufff6\027\ufff6\030\ufff6\032" +
    "\ufff6\001\002\000\004\031\314\001\002\000\042\006\uffe5" +
    "\007\uffe5\010\uffe5\011\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\032\uffe5\001\002\000\004\031\316\001\002\000" +
    "\042\006\uffea\007\uffea\010\uffea\011\uffea\015\uffea\016\uffea" +
    "\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\026" +
    "\uffea\027\uffea\030\uffea\032\uffea\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\004\022\003\001\001\000\002\001\001\000" +
    "\004\002\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\011\025\012\023\013\010\014\011\015\014\016" +
    "\024\017\022\021\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\012\027\013\010" +
    "\014\011\015\014\016\024\017\022\021\016\001\001\000" +
    "\006\003\032\004\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\044\025\037\032" +
    "\042\041\035\001\001\000\002\001\001\000\006\032\042" +
    "\041\050\001\001\000\002\001\001\000\004\004\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\011\306\012\023\013\010\014\011\015\014\016\024" +
    "\017\022\021\016\001\001\000\022\011\302\012\023\013" +
    "\010\014\011\015\014\016\024\017\022\021\016\001\001" +
    "\000\022\011\276\012\023\013\010\014\011\015\014\016" +
    "\024\017\022\021\016\001\001\000\022\011\272\012\023" +
    "\013\010\014\011\015\014\016\024\017\022\021\016\001" +
    "\001\000\022\011\266\012\023\013\010\014\011\015\014" +
    "\016\024\017\022\021\016\001\001\000\022\011\061\012" +
    "\023\013\010\014\011\015\014\016\024\017\022\021\016" +
    "\001\001\000\020\012\027\013\010\014\011\015\014\016" +
    "\024\017\022\021\016\001\001\000\012\005\067\006\066" +
    "\007\065\010\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\006\076" +
    "\007\065\010\063\036\072\045\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\011" +
    "\257\012\023\013\010\014\011\015\014\016\024\017\022" +
    "\021\016\001\001\000\022\011\250\012\023\013\010\014" +
    "\011\015\014\016\024\017\022\021\016\001\001\000\022" +
    "\011\230\012\023\013\010\014\011\015\014\016\024\017" +
    "\022\021\016\001\001\000\002\001\001\000\022\011\171" +
    "\012\023\013\010\014\011\015\014\016\024\017\022\021" +
    "\016\001\001\000\022\011\146\012\023\013\010\014\011" +
    "\015\014\016\024\017\022\021\016\001\001\000\022\011" +
    "\124\012\023\013\010\014\011\015\014\016\024\017\022" +
    "\021\016\001\001\000\022\011\114\012\023\013\010\014" +
    "\011\015\014\016\024\017\022\021\016\001\001\000\026" +
    "\012\027\013\010\014\011\015\014\016\024\017\022\021" +
    "\016\030\116\036\072\045\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\036\072\045" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\012\027\013\010\014\011\015\014\016" +
    "\024\017\022\021\016\027\130\037\132\046\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\037\132\046\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\012\027\013\010\014\011\015\014\016\024\017\022\021" +
    "\016\024\156\040\147\047\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\040\147\047\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\012\027\013\010\014\011\015\014\016\024\017\022\021" +
    "\016\031\201\033\177\042\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\204\001\001" +
    "\000\002\001\001\000\006\033\177\042\203\001\001\000" +
    "\002\001\001\000\004\033\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\026\213\034\216\043\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\034\216\043\224\001\001\000\004" +
    "\004\222\001\001\000\002\001\001\000\004\034\223\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\012\027\013" +
    "\010\014\011\015\014\016\024\017\022\021\016\023\232" +
    "\035\236\044\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\243\001\001\000\006\035" +
    "\236\044\242\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\244\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\012\027" +
    "\013\010\014\011\015\014\016\024\017\022\021\016\025" +
    "\251\032\042\041\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\012\027\013\010\014\011" +
    "\015\014\016\024\017\022\021\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\012\027\013" +
    "\010\014\011\015\014\016\024\017\022\021\016\001\001" +
    "\000\012\005\270\006\066\007\065\010\063\001\001\000" +
    "\014\006\076\007\065\010\063\037\132\046\271\001\001" +
    "\000\002\001\001\000\020\012\027\013\010\014\011\015" +
    "\014\016\024\017\022\021\016\001\001\000\012\005\274" +
    "\006\066\007\065\010\063\001\001\000\014\006\076\007" +
    "\065\010\063\033\177\042\275\001\001\000\002\001\001" +
    "\000\020\012\027\013\010\014\011\015\014\016\024\017" +
    "\022\021\016\001\001\000\012\005\300\006\066\007\065" +
    "\010\063\001\001\000\014\006\076\007\065\010\063\034" +
    "\216\043\301\001\001\000\002\001\001\000\020\012\027" +
    "\013\010\014\011\015\014\016\024\017\022\021\016\001" +
    "\001\000\012\005\304\006\066\007\065\010\063\001\001" +
    "\000\014\006\076\007\065\010\063\032\042\041\305\001" +
    "\001\000\002\001\001\000\020\012\027\013\010\014\011" +
    "\015\014\016\024\017\022\021\016\001\001\000\012\005" +
    "\310\006\066\007\065\010\063\001\001\000\014\006\076" +
    "\007\065\010\063\035\236\044\311\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG1

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG2
 return lexer.next_token(); 
    }

//@@CUPDBG0

   
 	protected Lexer lexer;
  	protected MultiTree syntaxTree = new MultiTree(); 
	
 	 public MultiTree getSyntaxTree()
  	{
		return syntaxTree;
  	}

	protected MultiTreeNode createRDFRootTag(String name, ArrayList<NodeProperty> nodeElementAttrList, MultiTreeNode nodeElementList, MultiTreeNode rpEltEnd) { throw new UnsupportedOperationException(); }
	protected MultiTreeNode	createNodeElementNode(String name, ArrayList<NodeProperty> nodeElementAttrList, MultiTreeNode propertyEltList, MultiTreeNode endInfo) { throw new UnsupportedOperationException(); }
	protected NodeProperty  createNodeElementAttr(String name, String insideText) { throw new UnsupportedOperationException(); }
	protected MultiTreeNode createRPEltEndNode(MultiTreeNode nodeElement, String insideText) { throw new UnsupportedOperationException(); }
	protected MultiTreeNode createGenericTagNode(String name, String insideText) { throw new UnsupportedOperationException(); }
	protected MultiTreeNode createResourcePropertyEltNode(String name, ArrayList<NodeProperty> nodeElementAttrList, MultiTreeNode rpEltEnd) { throw new UnsupportedOperationException(); }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr_list ::= XML_VERSION rdfRDF 
            {
              MultiTreeNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG3
 RESULT = syntaxTree.create("RDF Document Tree", e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr_list EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode start_val = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // rdfRDF ::= OPEN_TAG OPEN_RDF_RDF nodeElementAttrList CLOSE_TAG nodeElementList rdfRPEltEND 
            {
              MultiTreeNode RESULT =null;
		Location e0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location e0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ArrayList<NodeProperty> e1 = (ArrayList<NodeProperty>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode e2 = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e3 = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG4
 RESULT = createRDFRootTag(e0, e1, e2, e3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfRDF",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // nodeElementList ::= nodeElementList nodeElement 
            {
              MultiTreeNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode e1 = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e2 = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG5
 RESULT = e1; RESULT.addChild(e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // nodeElementList ::= nodeElement 
            {
              MultiTreeNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG6
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // nodeElementList ::= 
            {
              MultiTreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // nodeElement ::= OPEN_TAG OPEN_RDF_RDF nodeElementAttrList CLOSE_TAG propertyEltList rdfRdfEND 
            {
              MultiTreeNode RESULT =null;
		Location e0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location e0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ArrayList<NodeProperty> e1 = (ArrayList<NodeProperty>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode e2 = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e3 = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG7
 RESULT = createNodeElementNode(e0, e1, e2, e3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // nodeElement ::= OPEN_TAG RDF_ID nodeElementAttrList CLOSE_TAG propertyEltList rdfIdEND 
            {
              MultiTreeNode RESULT =null;
		Location e0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location e0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ArrayList<NodeProperty> e1 = (ArrayList<NodeProperty>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode e2 = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e3 = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG8
 RESULT = createNodeElementNode(e0, e1, e2, e3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // nodeElement ::= OPEN_TAG RDF_ABOUT nodeElementAttrList CLOSE_TAG propertyEltList rdfAboutEND 
            {
              MultiTreeNode RESULT =null;
		Location e0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location e0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ArrayList<NodeProperty> e1 = (ArrayList<NodeProperty>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode e2 = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e3 = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG9
 RESULT = createNodeElementNode(e0, e1, e2, e3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // nodeElement ::= OPEN_TAG RDF_RESOURCE nodeElementAttrList CLOSE_TAG propertyEltList rdfResourceEND 
            {
              MultiTreeNode RESULT =null;
		Location e0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location e0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ArrayList<NodeProperty> e1 = (ArrayList<NodeProperty>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode e2 = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e3 = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG10
 RESULT = createNodeElementNode(e0, e1, e2, e3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // nodeElement ::= OPEN_TAG OPEN_RDF_DESCRIPTION nodeElementAttrList CLOSE_TAG propertyEltList rdfDescriptionEND 
            {
              MultiTreeNode RESULT =null;
		Location e0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location e0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ArrayList<NodeProperty> e1 = (ArrayList<NodeProperty>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode e2 = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e3 = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG11
 RESULT = createNodeElementNode(e0, e1, e2, e3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // nodeElement ::= OPEN_TAG OPEN_RDF_TYPE nodeElementAttrList CLOSE_TAG propertyEltList rdfTypeEND 
            {
              MultiTreeNode RESULT =null;
		Location e0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location e0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ArrayList<NodeProperty> e1 = (ArrayList<NodeProperty>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode e2 = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e3 = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG12
 RESULT = createNodeElementNode(e0, e1, e2, e3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // nodeElement ::= 
            {
              MultiTreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // nodeElementAttrList ::= nodeElementAttrList nodeElementAttr 
            {
              ArrayList<NodeProperty> RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ArrayList<NodeProperty> e1 = (ArrayList<NodeProperty>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		NodeProperty e2 = (NodeProperty)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG13
 RESULT = e1; RESULT.add(e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementAttrList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // nodeElementAttrList ::= nodeElementAttr 
            {
              ArrayList<NodeProperty> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		NodeProperty e = (NodeProperty)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG14
 RESULT = new ArrayList<NodeProperty>(); RESULT.add(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementAttrList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // nodeElementAttrList ::= 
            {
              ArrayList<NodeProperty> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementAttrList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // nodeElementAttr ::= rdfRDFAttr 
            {
              NodeProperty RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		NodeProperty e = (NodeProperty)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG15
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementAttr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // nodeElementAttr ::= rdfResourceAttr 
            {
              NodeProperty RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		NodeProperty e = (NodeProperty)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG16
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementAttr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // nodeElementAttr ::= rdfAboutAttr 
            {
              NodeProperty RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		NodeProperty e = (NodeProperty)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG17
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementAttr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // nodeElementAttr ::= rdfIDAttr 
            {
              NodeProperty RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		NodeProperty e = (NodeProperty)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG18
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementAttr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // nodeElementAttr ::= rdfLiAttr 
            {
              NodeProperty RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		NodeProperty e = (NodeProperty)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG19
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementAttr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // nodeElementAttr ::= genericAttribute 
            {
              NodeProperty RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		NodeProperty e = (NodeProperty)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG20
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementAttr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // nodeElementAttr ::= 
            {
              NodeProperty RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nodeElementAttr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // genericAttribute ::= TAG_NAME_WITH_SCHEME EQUALS PROPERTY_VALUE 
            {
              NodeProperty RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG21
 RESULT = createNodeElementAttr(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("genericAttribute",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // genericAttribute ::= 
            {
              NodeProperty RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("genericAttribute",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // rdfRDFAttr ::= OPEN_RDF_RDF EQUALS PROPERTY_VALUE 
            {
              NodeProperty RESULT =null;
		Location e0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location pvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String pv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG22
 RESULT = createNodeElementAttr(e0, pv); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfRDFAttr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // rdfResourceAttr ::= RDF_RESOURCE EQUALS PROPERTY_VALUE 
            {
              NodeProperty RESULT =null;
		Location e0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location pvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String pv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG23
 RESULT = createNodeElementAttr(e0, pv); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfResourceAttr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // rdfAboutAttr ::= RDF_ABOUT EQUALS PROPERTY_VALUE 
            {
              NodeProperty RESULT =null;
		Location e0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location pvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String pv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG24
 RESULT = createNodeElementAttr(e0, pv); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfAboutAttr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // rdfIDAttr ::= RDF_ID EQUALS PROPERTY_VALUE 
            {
              NodeProperty RESULT =null;
		Location e0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location pvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String pv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG25
 RESULT = createNodeElementAttr(e0, pv); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfIDAttr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // rdfLiAttr ::= OPEN_RDF_LI EQUALS PROPERTY_VALUE 
            {
              NodeProperty RESULT =null;
		Location e0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location pvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String pv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG26
 RESULT = createNodeElementAttr(e0, pv); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfLiAttr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // rdfDescriptionAttr ::= OPEN_RDF_DESCRIPTION EQUALS PROPERTY_VALUE 
            {
              NodeProperty RESULT =null;
		Location e0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location pvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String pv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG27
 RESULT = createNodeElementAttr(e0, pv); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfDescriptionAttr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // propertyEltList ::= propertyEltList propertyElt 
            {
              MultiTreeNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode e1 = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e2 = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG28
 RESULT = e1; RESULT.addChild(e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("propertyEltList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // propertyEltList ::= propertyElt 
            {
              MultiTreeNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG29
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("propertyEltList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // propertyEltList ::= 
            {
              MultiTreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("propertyEltList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // propertyElt ::= resourcePropertyElt 
            {
              MultiTreeNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG30
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("propertyElt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // resourcePropertyElt ::= OPEN_TAG OPEN_RDF_RDF nodeElementAttrList rdfRPEltEND 
            {
              MultiTreeNode RESULT =null;
		Location e0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ArrayList<NodeProperty> e1 = (ArrayList<NodeProperty>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e2 = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG31
 RESULT = createResourcePropertyEltNode(e0, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resourcePropertyElt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // resourcePropertyElt ::= OPEN_TAG RDF_ID CLOSE_TAG idRPEltEND 
            {
              MultiTreeNode RESULT =null;
		Location e0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e2 = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG32
 RESULT = createResourcePropertyEltNode(e0, null, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resourcePropertyElt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // resourcePropertyElt ::= OPEN_TAG RDF_ABOUT nodeElementAttrList aboutRPEltEND 
            {
              MultiTreeNode RESULT =null;
		Location e0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ArrayList<NodeProperty> e1 = (ArrayList<NodeProperty>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e2 = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG33
 RESULT = createResourcePropertyEltNode(e0, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resourcePropertyElt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // resourcePropertyElt ::= OPEN_TAG RDF_RESOURCE nodeElementAttrList resourceRPEltEND 
            {
              MultiTreeNode RESULT =null;
		Location e0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ArrayList<NodeProperty> e1 = (ArrayList<NodeProperty>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e2 = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG34
 RESULT = createResourcePropertyEltNode(e0, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resourcePropertyElt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // resourcePropertyElt ::= OPEN_TAG OPEN_RDF_DESCRIPTION nodeElementAttrList descriptionRPEltEND 
            {
              MultiTreeNode RESULT =null;
		Location e0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ArrayList<NodeProperty> e1 = (ArrayList<NodeProperty>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e2 = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG35
 RESULT = createResourcePropertyEltNode(e0, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resourcePropertyElt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // resourcePropertyElt ::= OPEN_TAG OPEN_RDF_TYPE nodeElementAttrList typeRPEltEND 
            {
              MultiTreeNode RESULT =null;
		Location e0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ArrayList<NodeProperty> e1 = (ArrayList<NodeProperty>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e2 = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG36
 RESULT = createResourcePropertyEltNode(e0, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resourcePropertyElt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // resourcePropertyElt ::= OPEN_TAG OPEN_RDF_LI nodeElementAttrList liRPEltEND 
            {
              MultiTreeNode RESULT =null;
		Location e0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ArrayList<NodeProperty> e1 = (ArrayList<NodeProperty>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e2 = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG37
 RESULT = createResourcePropertyEltNode(e0, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resourcePropertyElt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // resourcePropertyElt ::= genericTag 
            {
              MultiTreeNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG38
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resourcePropertyElt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // resourcePropertyElt ::= 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG39
 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resourcePropertyElt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // rdfRPEltEND ::= rdfRdfEND 
            {
              MultiTreeNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG40
 RESULT = createRPEltEndNode(e, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfRPEltEND",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // rdfRPEltEND ::= INSIDE_TEXT rdfRdfEND 
            {
              MultiTreeNode RESULT =null;
		Location itxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location itxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String it = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG41
 RESULT = createRPEltEndNode(e, it); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfRPEltEND",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // idRPEltEND ::= rdfIdEND 
            {
              MultiTreeNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG42
 RESULT = createRPEltEndNode(e, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idRPEltEND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // idRPEltEND ::= INSIDE_TEXT rdfIdEND 
            {
              MultiTreeNode RESULT =null;
		Location itxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location itxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String it = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG43
 RESULT = createRPEltEndNode(e, it); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idRPEltEND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // aboutRPEltEND ::= rdfAboutEND 
            {
              MultiTreeNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG44
 RESULT = createRPEltEndNode(e, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aboutRPEltEND",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // aboutRPEltEND ::= INSIDE_TEXT rdfAboutEND 
            {
              MultiTreeNode RESULT =null;
		Location itxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location itxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String it = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG45
 RESULT = createRPEltEndNode(e, it); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aboutRPEltEND",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // resourceRPEltEND ::= rdfResourceEND 
            {
              MultiTreeNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG46
 RESULT = createRPEltEndNode(e, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resourceRPEltEND",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // resourceRPEltEND ::= INSIDE_TEXT rdfResourceEND 
            {
              MultiTreeNode RESULT =null;
		Location itxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location itxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String it = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG47
 RESULT = createRPEltEndNode(e, it); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resourceRPEltEND",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // descriptionRPEltEND ::= rdfDescriptionEND 
            {
              MultiTreeNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG48
 RESULT = createRPEltEndNode(e, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("descriptionRPEltEND",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // descriptionRPEltEND ::= INSIDE_TEXT rdfDescriptionEND 
            {
              MultiTreeNode RESULT =null;
		Location itxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location itxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String it = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG49
 RESULT = createRPEltEndNode(e, it); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("descriptionRPEltEND",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // typeRPEltEND ::= rdfTypeEND 
            {
              MultiTreeNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG50
 RESULT = createRPEltEndNode(e, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeRPEltEND",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // typeRPEltEND ::= INSIDE_TEXT rdfTypeEND 
            {
              MultiTreeNode RESULT =null;
		Location itxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location itxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String it = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG51
 RESULT = createRPEltEndNode(e, it); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeRPEltEND",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // liRPEltEND ::= rdfLiEND 
            {
              MultiTreeNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG52
 RESULT = createRPEltEndNode(e, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("liRPEltEND",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // liRPEltEND ::= INSIDE_TEXT rdfLiEND 
            {
              MultiTreeNode RESULT =null;
		Location itxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location itxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String it = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode e = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG53
 RESULT = createRPEltEndNode(e, it); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("liRPEltEND",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // genericTag ::= OPEN_TAG TAG_NAME_WITH_SCHEME nodeElementAttrList INSIDE_TEXT TAG_NAME_WITH_SCHEME CLOSE_TAG 
            {
              MultiTreeNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ArrayList<NodeProperty> e2 = (ArrayList<NodeProperty>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location itxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location itxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String it = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG54
 RESULT = createGenericTagNode(e1, it); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("genericTag",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // genericTag ::= OPEN_TAG TAG_NAME_WITH_SCHEME CLOSE_TAG OPEN_END_TAG TAG_NAME_WITH_SCHEME CLOSE_TAG 
            {
              MultiTreeNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG55
 RESULT = createGenericTagNode(e1, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("genericTag",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // genericTag ::= OPEN_TAG TAG_NAME_WITH_SCHEME CLOSE_SINGULAR_TAG 
            {
              MultiTreeNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG56
 RESULT = createGenericTagNode(e1, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("genericTag",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // rdfTypeCloseTag ::= CLOSE_SINGULAR_TAG 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG57
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfTypeCloseTag",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // rdfTypeCloseTag ::= CLOSE_RDF_TYPE 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG58
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfTypeCloseTag",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // rdfTypeCloseTag ::= OPEN_END_TAG OPEN_RDF_TYPE CLOSE_TAG 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG59
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfTypeCloseTag",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // rdfTypeCloseTag ::= OPEN_RDF_TYPE CLOSE_TAG 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG60
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfTypeCloseTag",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // rdfTypeEND ::= CLOSE_TAG nodeElement rdfTypeCloseTag 
            {
              MultiTreeNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode e = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG61
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfTypeEND",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // rdfTypeEND ::= rdfTypeCloseTag 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG62
 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfTypeEND",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // rdfRdfCloseTag ::= CLOSE_SINGULAR_TAG 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG63
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfRdfCloseTag",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // rdfRdfCloseTag ::= CLOSE_RDF_RDF 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG64
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfRdfCloseTag",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // rdfRdfCloseTag ::= OPEN_END_TAG OPEN_RDF_RDF CLOSE_TAG 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG65
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfRdfCloseTag",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // rdfRdfCloseTag ::= OPEN_RDF_RDF CLOSE_TAG 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG66
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfRdfCloseTag",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // rdfRdfEND ::= CLOSE_TAG nodeElement rdfRdfCloseTag 
            {
              MultiTreeNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode e = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG67
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfRdfEND",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // rdfRdfEND ::= rdfRdfCloseTag 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG68
 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfRdfEND",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // rdfDescriptionCloseTag ::= CLOSE_SINGULAR_TAG 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG69
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfDescriptionCloseTag",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // rdfDescriptionCloseTag ::= CLOSE_RDF_DESCRIPTION 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG70
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfDescriptionCloseTag",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // rdfDescriptionCloseTag ::= OPEN_END_TAG OPEN_RDF_DESCRIPTION CLOSE_TAG 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG71
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfDescriptionCloseTag",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // rdfDescriptionCloseTag ::= OPEN_RDF_DESCRIPTION CLOSE_TAG 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG72
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfDescriptionCloseTag",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // rdfDescriptionEND ::= CLOSE_TAG nodeElement rdfDescriptionCloseTag 
            {
              MultiTreeNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode e = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG73
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfDescriptionEND",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // rdfDescriptionEND ::= rdfDescriptionCloseTag 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG74
 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfDescriptionEND",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // rdfIdCloseTag ::= CLOSE_SINGULAR_TAG 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG75
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfIdCloseTag",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // rdfIdCloseTag ::= OPEN_END_TAG RDF_ID CLOSE_TAG 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG76
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfIdCloseTag",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // rdfIdCloseTag ::= RDF_ID CLOSE_TAG 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG77
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfIdCloseTag",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // rdfIdEND ::= CLOSE_TAG nodeElement rdfIdCloseTag 
            {
              MultiTreeNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode e = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG78
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfIdEND",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // rdfIdEND ::= rdfIdCloseTag 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG79
 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfIdEND",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // rdfResourceCloseTag ::= CLOSE_SINGULAR_TAG 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG80
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfResourceCloseTag",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // rdfResourceCloseTag ::= OPEN_END_TAG RDF_RESOURCE CLOSE_TAG 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG81
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfResourceCloseTag",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // rdfResourceCloseTag ::= RDF_RESOURCE CLOSE_TAG 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG82
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfResourceCloseTag",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // rdfResourceEND ::= CLOSE_TAG nodeElement rdfResourceCloseTag 
            {
              MultiTreeNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode e = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG83
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfResourceEND",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // rdfResourceEND ::= rdfResourceCloseTag 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG84
 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfResourceEND",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // rdfAboutCloseTag ::= CLOSE_SINGULAR_TAG 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG85
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfAboutCloseTag",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // rdfAboutCloseTag ::= OPEN_END_TAG RDF_ABOUT CLOSE_TAG 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG86
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfAboutCloseTag",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // rdfAboutCloseTag ::= RDF_ABOUT CLOSE_TAG 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG87
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfAboutCloseTag",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // rdfAboutEND ::= CLOSE_TAG nodeElement rdfAboutCloseTag 
            {
              MultiTreeNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode e = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG88
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfAboutEND",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // rdfAboutEND ::= rdfAboutCloseTag 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG89
 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfAboutEND",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // rdfLiCloseTag ::= CLOSE_SINGULAR_TAG 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG90
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfLiCloseTag",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // rdfLiCloseTag ::= CLOSE_RDF_LI 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG91
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfLiCloseTag",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // rdfLiCloseTag ::= OPEN_END_TAG RDF_LI CLOSE_TAG 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG92
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfLiCloseTag",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // rdfLiCloseTag ::= OPEN_RDF_LI CLOSE_TAG 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG93
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfLiCloseTag",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // rdfLiEND ::= CLOSE_TAG nodeElement rdfLiCloseTag 
            {
              MultiTreeNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode e = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG94
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfLiEND",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // rdfLiEND ::= rdfLiCloseTag 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG95
 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rdfLiEND",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
