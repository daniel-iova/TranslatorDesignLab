/*
   Simple + ' ' +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList;

parser code {:
   
 	protected Lexer lexer;
  	protected MultiTree syntaxTree = new MultiTree(); 
	
 	 public MultiTree getSyntaxTree()
  	{
		return syntaxTree;
  	}

	protected MultiTreeNode createRDFRootTag(String name, ArrayList<NodeProperty> nodeElementAttrList, MultiTreeNode nodeElementList, MultiTreeNode rpEltEnd) { throw new UnsupportedOperationException(); }
	protected MultiTreeNode	createNodeElementNode(String name, ArrayList<NodeProperty> nodeElementAttrList, MultiTreeNode propertyEltList, MultiTreeNode endInfo) { throw new UnsupportedOperationException(); }
	protected NodeProperty  createNodeElementAttr(String name, String insideText) { throw new UnsupportedOperationException(); }
	protected MultiTreeNode createRPEltEndNode(MultiTreeNode nodeElement, String insideText) { throw new UnsupportedOperationException(); }
	protected MultiTreeNode createGenericTagNode(String name, String insideText) { throw new UnsupportedOperationException(); }
	protected MultiTreeNode createResourcePropertyEltNode(String name, ArrayList<NodeProperty> nodeElementAttrList, MultiTreeNode rpEltEnd) { throw new UnsupportedOperationException(); }
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

terminal String
	XML_VERSION, OPEN_TAG, OPEN_RDF_RDF, CLOSE_RDF_RDF, CLOSE_TAG, 
	RDF_RESOURCE, RDF_LI, RDF_DESCRIPTION, RDF_TYPE,
	RDF_ID, RDF_ABOUT, OPEN_RDF_DESCRIPTION, OPEN_RDF_TYPE, OPEN_END_TAG, CLOSE_SINGULAR_TAG,
	CLOSE_RDF_DESCRIPTION, TAG_NAME_WITH_SCHEME, EQUALS,
	OPEN_RDF_LI, CLOSE_RDF_TYPE, CLOSE_RDF_LI;

terminal String PROPERTY_VALUE, INSIDE_TEXT;

/* Non terminals */
non terminal MultiTreeNode rdfRDF;
non terminal MultiTreeNode nodeElementList, nodeElement, propertyEltList, propertyElt, genericTag;


non terminal MultiTreeNode resourcePropertyElt;
	
// attributes
non terminal ArrayList<NodeProperty> nodeElementAttrList;

non terminal NodeProperty nodeElementAttr,
	rdfRDFAttr, rdfIDAttr, rdfAboutAttr, rdfLiAttr, rdfResourceAttr, 
	rdfDescriptionAttr, genericAttribute;

non terminal MultiTreeNode expr_list, 
	typeRPEltEND, liRPEltEND, rdfRPEltEND, idRPEltEND, aboutRPEltEND,
	resourceRPEltEND, descriptionRPEltEND;

// close tags
non terminal MultiTreeNode rdfRdfCloseTag, rdfDescriptionCloseTag, rdfIdCloseTag, rdfTypeCloseTag,
			rdfResourceCloseTag, rdfAboutCloseTag, rdfLiCloseTag;
// end terminals
non terminal MultiTreeNode rdfRdfEND, rdfDescriptionEND, rdfIdEND, rdfTypeEND,
			rdfResourceEND, rdfAboutEND, rdfLiEND;


expr_list ::= XML_VERSION rdfRDF:e {: RESULT = syntaxTree.create("RDF Document Tree", e); :}
		  ;
		  
rdfRDF ::= OPEN_TAG OPEN_RDF_RDF:e0 nodeElementAttrList:e1 CLOSE_TAG nodeElementList:e2 rdfRPEltEND:e3 {: RESULT = createRDFRootTag(e0, e1, e2, e3); :};

nodeElementList ::= nodeElementList:e1 nodeElement:e2 {: RESULT = e1; RESULT.addChild(e2); :}
				| nodeElement:e {: RESULT = e; :}
				| 
				;

nodeElement ::= OPEN_TAG OPEN_RDF_RDF:e0 nodeElementAttrList:e1 CLOSE_TAG propertyEltList:e2 rdfRdfEND:e3 {: RESULT = createNodeElementNode(e0, e1, e2, e3); :}
			| OPEN_TAG RDF_ID:e0 nodeElementAttrList:e1 CLOSE_TAG propertyEltList:e2 rdfIdEND:e3 {: RESULT = createNodeElementNode(e0, e1, e2, e3); :}
			| OPEN_TAG RDF_ABOUT:e0 nodeElementAttrList:e1 CLOSE_TAG propertyEltList:e2 rdfAboutEND:e3 {: RESULT = createNodeElementNode(e0, e1, e2, e3); :}
			| OPEN_TAG RDF_RESOURCE:e0 nodeElementAttrList:e1 CLOSE_TAG propertyEltList:e2 rdfResourceEND:e3 {: RESULT = createNodeElementNode(e0, e1, e2, e3); :}
			| OPEN_TAG OPEN_RDF_DESCRIPTION:e0 nodeElementAttrList:e1 CLOSE_TAG propertyEltList:e2 rdfDescriptionEND:e3 {: RESULT = createNodeElementNode(e0, e1, e2, e3); :}
			| OPEN_TAG OPEN_RDF_TYPE:e0 nodeElementAttrList:e1 CLOSE_TAG propertyEltList:e2 rdfTypeEND:e3 {: RESULT = createNodeElementNode(e0, e1, e2, e3); :}
			| 
			;

nodeElementAttrList ::= nodeElementAttrList:e1 nodeElementAttr:e2 {: RESULT = e1; RESULT.add(e2); :}
					| nodeElementAttr:e {: RESULT = new ArrayList<NodeProperty>(); RESULT.add(e); :}
					| 
					;

nodeElementAttr ::= rdfRDFAttr:e {: RESULT = e; :}
				| rdfResourceAttr:e {: RESULT = e; :}
				| rdfAboutAttr:e {: RESULT = e; :}
				| rdfIDAttr:e {: RESULT = e; :}
				| rdfLiAttr:e {: RESULT = e; :}
				| genericAttribute:e {: RESULT = e; :}
				|
				;

genericAttribute ::= TAG_NAME_WITH_SCHEME:e1 EQUALS PROPERTY_VALUE:e2 {: RESULT = createNodeElementAttr(e1, e2); :}
				 | 
				 ;

rdfRDFAttr ::= OPEN_RDF_RDF:e0 EQUALS PROPERTY_VALUE:pv {: RESULT = createNodeElementAttr(e0, pv); :};
rdfResourceAttr ::= RDF_RESOURCE:e0 EQUALS PROPERTY_VALUE:pv {: RESULT = createNodeElementAttr(e0, pv); :};
rdfAboutAttr ::= RDF_ABOUT:e0 EQUALS PROPERTY_VALUE:pv {: RESULT = createNodeElementAttr(e0, pv); :};
rdfIDAttr ::= RDF_ID EQUALS:e0 PROPERTY_VALUE:pv {: RESULT = createNodeElementAttr(e0, pv); :};
rdfLiAttr ::= OPEN_RDF_LI:e0 EQUALS PROPERTY_VALUE:pv {: RESULT = createNodeElementAttr(e0, pv); :};
rdfDescriptionAttr ::= OPEN_RDF_DESCRIPTION:e0 EQUALS PROPERTY_VALUE:pv {: RESULT = createNodeElementAttr(e0, pv); :};


propertyEltList ::= propertyEltList:e1 propertyElt:e2 {: RESULT = e1; RESULT.addChild(e2); :}
				| propertyElt:e {: RESULT = e; :}
				| 
				;
		
propertyElt ::= resourcePropertyElt:e {: RESULT = e; :}
			;

resourcePropertyElt ::= OPEN_TAG OPEN_RDF_RDF:e0 nodeElementAttrList:e1 rdfRPEltEND:e2 {: RESULT = createResourcePropertyEltNode(e0, e1, e2); :}
					| OPEN_TAG RDF_ID:e0 CLOSE_TAG idRPEltEND:e2 {: RESULT = createResourcePropertyEltNode(e0, null, e2); :}
					| OPEN_TAG RDF_ABOUT:e0 nodeElementAttrList:e1 aboutRPEltEND:e2 {: RESULT = createResourcePropertyEltNode(e0, e1, e2); :}
					| OPEN_TAG RDF_RESOURCE:e0 nodeElementAttrList:e1 resourceRPEltEND:e2 {: RESULT = createResourcePropertyEltNode(e0, e1, e2); :}
					| OPEN_TAG OPEN_RDF_DESCRIPTION:e0 nodeElementAttrList:e1 descriptionRPEltEND:e2 {: RESULT = createResourcePropertyEltNode(e0, e1, e2); :}
					| OPEN_TAG OPEN_RDF_TYPE:e0 nodeElementAttrList:e1 typeRPEltEND:e2 {: RESULT = createResourcePropertyEltNode(e0, e1, e2); :}
					| OPEN_TAG OPEN_RDF_LI:e0 nodeElementAttrList:e1 liRPEltEND:e2 {: RESULT = createResourcePropertyEltNode(e0, e1, e2); :}
					| genericTag:e {: RESULT = e; :}
					| {: RESULT = null; :}
					;


rdfRPEltEND ::= rdfRdfEND:e {: RESULT = createRPEltEndNode(e, null); :}
		|  INSIDE_TEXT:it rdfRdfEND:e {: RESULT = createRPEltEndNode(e, it); :}
		;

idRPEltEND ::= rdfIdEND:e {: RESULT = createRPEltEndNode(e, null); :}
		|  INSIDE_TEXT:it rdfIdEND:e {: RESULT = createRPEltEndNode(e, it); :}
		;

aboutRPEltEND ::= rdfAboutEND:e {: RESULT = createRPEltEndNode(e, null); :}
		|  INSIDE_TEXT:it rdfAboutEND:e {: RESULT = createRPEltEndNode(e, it); :}
		;

resourceRPEltEND ::= rdfResourceEND:e {: RESULT = createRPEltEndNode(e, null); :}
		|  INSIDE_TEXT:it rdfResourceEND:e {: RESULT = createRPEltEndNode(e, it); :}
		;

descriptionRPEltEND ::= rdfDescriptionEND:e {: RESULT = createRPEltEndNode(e, null); :}
		|  INSIDE_TEXT:it rdfDescriptionEND:e {: RESULT = createRPEltEndNode(e, it); :}
		;

typeRPEltEND ::= rdfTypeEND:e {: RESULT = createRPEltEndNode(e, null); :}
		|  INSIDE_TEXT:it rdfTypeEND:e {: RESULT = createRPEltEndNode(e, it); :}
		;
		
liRPEltEND ::= rdfLiEND:e {: RESULT = createRPEltEndNode(e, null); :}
		|  INSIDE_TEXT:it rdfLiEND:e {: RESULT = createRPEltEndNode(e, it); :}
		;

genericTag ::= OPEN_TAG TAG_NAME_WITH_SCHEME:e1 nodeElementAttrList:e2 INSIDE_TEXT:it TAG_NAME_WITH_SCHEME CLOSE_TAG {: RESULT = createGenericTagNode(e1, it); :}
			| OPEN_TAG TAG_NAME_WITH_SCHEME:e1 CLOSE_TAG OPEN_END_TAG TAG_NAME_WITH_SCHEME CLOSE_TAG {: RESULT = createGenericTagNode(e1, null); :}
			| OPEN_TAG TAG_NAME_WITH_SCHEME:e1 CLOSE_SINGULAR_TAG {: RESULT = createGenericTagNode(e1, null); :}
			;
			
rdfTypeCloseTag ::= CLOSE_SINGULAR_TAG {: :}
				| CLOSE_RDF_TYPE {: :}
                | OPEN_END_TAG OPEN_RDF_TYPE CLOSE_TAG {: :}
                | OPEN_RDF_TYPE CLOSE_TAG {: :}
                ;


rdfTypeEND ::= CLOSE_TAG nodeElement:e rdfTypeCloseTag {: RESULT = e; :}
                | rdfTypeCloseTag {: RESULT = null; :}
                ;			

rdfRdfCloseTag ::= CLOSE_SINGULAR_TAG {: :}
				| CLOSE_RDF_RDF {: :}
                | OPEN_END_TAG OPEN_RDF_RDF CLOSE_TAG {: :}
                | OPEN_RDF_RDF CLOSE_TAG {: :}
                ;


rdfRdfEND ::= CLOSE_TAG nodeElement:e rdfRdfCloseTag {: RESULT = e; :}
                | rdfRdfCloseTag {: RESULT = null; :}
                ;

rdfDescriptionCloseTag ::= CLOSE_SINGULAR_TAG {: :}
				| CLOSE_RDF_DESCRIPTION {: :}
                | OPEN_END_TAG OPEN_RDF_DESCRIPTION CLOSE_TAG {: :}
                | OPEN_RDF_DESCRIPTION CLOSE_TAG {: :}
                ;


rdfDescriptionEND ::= CLOSE_TAG nodeElement:e rdfDescriptionCloseTag {: RESULT = e; :}
                | rdfDescriptionCloseTag {: RESULT = null; :}
                ;



rdfIdCloseTag ::= CLOSE_SINGULAR_TAG {: :}
                | OPEN_END_TAG RDF_ID CLOSE_TAG {: :}
                | RDF_ID CLOSE_TAG {: :}
                ;


rdfIdEND ::= CLOSE_TAG nodeElement:e rdfIdCloseTag {: RESULT = e; :}
                | rdfIdCloseTag {: RESULT = null; :}
                ;


rdfResourceCloseTag ::= CLOSE_SINGULAR_TAG {: :}
                | OPEN_END_TAG RDF_RESOURCE CLOSE_TAG {: :}
                | RDF_RESOURCE CLOSE_TAG {: :}
                ;


rdfResourceEND ::= CLOSE_TAG nodeElement:e rdfResourceCloseTag {: RESULT = e; :}
                | rdfResourceCloseTag {: RESULT = null; :}
                ;


rdfAboutCloseTag ::= CLOSE_SINGULAR_TAG {: :}
                | OPEN_END_TAG RDF_ABOUT CLOSE_TAG {: :}
                | RDF_ABOUT CLOSE_TAG {: :}
                ;


rdfAboutEND ::= CLOSE_TAG nodeElement:e rdfAboutCloseTag {: RESULT = e; :}
                | rdfAboutCloseTag {: RESULT = null; :}
                ;


rdfLiCloseTag ::= CLOSE_SINGULAR_TAG {: :}
				| CLOSE_RDF_LI {: :}
                | OPEN_END_TAG RDF_LI CLOSE_TAG {: :}
                | OPEN_RDF_LI CLOSE_TAG {: :}
                ;


rdfLiEND ::= CLOSE_TAG nodeElement:e rdfLiCloseTag {: RESULT = e; :}
                | rdfLiCloseTag {: RESULT = null; :}
                ;